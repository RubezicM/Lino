/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@glidejs/glide/dist/glide.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/@glidejs/glide/dist/glide.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Glide.js v3.3.0
 * (c) 2013-2019 Jędrzej Chałubek <jedrzej.chalubek@gmail.com> (http://jedrzejchalubek.com/)
 * Released under the MIT License.
 */
!function (t, e) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  "use strict";

  var i = {
    type: "slider",
    startAt: 0,
    perView: 1,
    focusAt: 0,
    gap: 10,
    autoplay: !1,
    hoverpause: !0,
    keyboard: !0,
    bound: !1,
    swipeThreshold: 80,
    dragThreshold: 120,
    perTouch: !1,
    touchRatio: .5,
    touchAngle: 45,
    animationDuration: 400,
    rewind: !0,
    rewindDuration: 800,
    animationTimingFunc: "cubic-bezier(.165, .840, .440, 1)",
    throttle: 10,
    direction: "ltr",
    peek: 0,
    breakpoints: {},
    classes: {
      direction: {
        ltr: "glide--ltr",
        rtl: "glide--rtl"
      },
      slider: "glide--slider",
      carousel: "glide--carousel",
      swipeable: "glide--swipeable",
      dragging: "glide--dragging",
      cloneSlide: "glide__slide--clone",
      activeNav: "glide__bullet--active",
      activeSlide: "glide__slide--active",
      disabledArrow: "glide__arrow--disabled"
    }
  };

  var n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
    return _typeof(t);
  } : function (t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : _typeof(t);
  },
      r = function r(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  },
      o = function () {
    function i(t, e) {
      for (var n = 0; n < e.length; n++) {
        var i = e[n];
        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }

    return function (t, e, n) {
      return e && i(t.prototype, e), n && i(t, n), t;
    };
  }(),
      a = Object.assign || function (t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];

      for (var i in n) {
        Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
      }
    }

    return t;
  },
      s = function s(t, e) {
    if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !e || "object" != _typeof(e) && "function" != typeof e ? t : e;
  };

  function y(t) {
    return parseInt(t);
  }

  function u(t) {
    return "string" == typeof t;
  }

  function c(t) {
    var e = void 0 === t ? "undefined" : n(t);
    return "function" === e || "object" === e && !!t;
  }

  function l(t) {
    return "function" == typeof t;
  }

  function f(t) {
    return void 0 === t;
  }

  function d(t) {
    return t.constructor === Array;
  }

  function p(t, e, n) {
    Object.defineProperty(t, e, n);
  }

  function h(t, e) {
    var n = a({}, t, e);
    return e.hasOwnProperty("classes") && (n.classes = a({}, t.classes, e.classes), e.classes.hasOwnProperty("direction") && (n.classes.direction = a({}, t.classes.direction, e.classes.direction))), e.hasOwnProperty("breakpoints") && (n.breakpoints = a({}, t.breakpoints, e.breakpoints)), n;
  }

  var v = function () {
    function e() {
      var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
      r(this, e), this.events = t, this.hop = t.hasOwnProperty;
    }

    return o(e, [{
      key: "on",
      value: function value(t, e) {
        if (d(t)) for (var n = 0; n < t.length; n++) {
          this.on(t[n], e);
        }
        this.hop.call(this.events, t) || (this.events[t] = []);
        var i = this.events[t].push(e) - 1;
        return {
          remove: function remove() {
            delete this.events[t][i];
          }
        };
      }
    }, {
      key: "emit",
      value: function value(t, e) {
        if (d(t)) for (var n = 0; n < t.length; n++) {
          this.emit(t[n], e);
        }
        this.hop.call(this.events, t) && this.events[t].forEach(function (t) {
          t(e || {});
        });
      }
    }]), e;
  }(),
      m = function () {
    function n(t) {
      var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
      r(this, n), this._c = {}, this._t = [], this._e = new v(), this.disabled = !1, this.selector = t, this.settings = h(i, e), this.index = this.settings.startAt;
    }

    return o(n, [{
      key: "mount",
      value: function value() {
        var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
        return this._e.emit("mount.before"), c(t) && (this._c = function (t, e, n) {
          var i = {};

          for (var r in e) {
            l(e[r]) && (i[r] = e[r](t, i, n));
          }

          for (var o in i) {
            l(i[o].mount) && i[o].mount();
          }

          return i;
        }(this, t, this._e)), this._e.emit("mount.after"), this;
      }
    }, {
      key: "mutate",
      value: function value() {
        var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [];
        return d(t) && (this._t = t), this;
      }
    }, {
      key: "update",
      value: function value() {
        var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
        return this.settings = h(this.settings, t), t.hasOwnProperty("startAt") && (this.index = t.startAt), this._e.emit("update"), this;
      }
    }, {
      key: "go",
      value: function value(t) {
        return this._c.Run.make(t), this;
      }
    }, {
      key: "move",
      value: function value(t) {
        return this._c.Transition.disable(), this._c.Move.make(t), this;
      }
    }, {
      key: "destroy",
      value: function value() {
        return this._e.emit("destroy"), this;
      }
    }, {
      key: "play",
      value: function value() {
        var t = 0 < arguments.length && void 0 !== arguments[0] && arguments[0];
        return t && (this.settings.autoplay = t), this._e.emit("play"), this;
      }
    }, {
      key: "pause",
      value: function value() {
        return this._e.emit("pause"), this;
      }
    }, {
      key: "disable",
      value: function value() {
        return this.disabled = !0, this;
      }
    }, {
      key: "enable",
      value: function value() {
        return this.disabled = !1, this;
      }
    }, {
      key: "on",
      value: function value(t, e) {
        return this._e.on(t, e), this;
      }
    }, {
      key: "isType",
      value: function value(t) {
        return this.settings.type === t;
      }
    }, {
      key: "settings",
      get: function get() {
        return this._o;
      },
      set: function set(t) {
        c(t) && (this._o = t);
      }
    }, {
      key: "index",
      get: function get() {
        return this._i;
      },
      set: function set(t) {
        this._i = y(t);
      }
    }, {
      key: "type",
      get: function get() {
        return this.settings.type;
      }
    }, {
      key: "disabled",
      get: function get() {
        return this._d;
      },
      set: function set(t) {
        this._d = !!t;
      }
    }]), n;
  }();

  function g() {
    return new Date().getTime();
  }

  function b(n, i, r) {
    var o = void 0,
        s = void 0,
        u = void 0,
        a = void 0,
        c = 0;
    r || (r = {});

    var l = function l() {
      c = !1 === r.leading ? 0 : g(), o = null, a = n.apply(s, u), o || (s = u = null);
    },
        t = function t() {
      var t = g();
      c || !1 !== r.leading || (c = t);
      var e = i - (t - c);
      return s = this, u = arguments, e <= 0 || i < e ? (o && (clearTimeout(o), o = null), c = t, a = n.apply(s, u), o || (s = u = null)) : o || !1 === r.trailing || (o = setTimeout(l, e)), a;
    };

    return t.cancel = function () {
      clearTimeout(o), c = 0, o = s = u = null;
    }, t;
  }

  var w = {
    ltr: ["marginLeft", "marginRight"],
    rtl: ["marginRight", "marginLeft"]
  };

  function _(t) {
    if (t && t.parentNode) {
      for (var e = t.parentNode.firstChild, n = []; e; e = e.nextSibling) {
        1 === e.nodeType && e !== t && n.push(e);
      }

      return n;
    }

    return [];
  }

  function k(t) {
    return !!(t && t instanceof window.HTMLElement);
  }

  var S = '[data-glide-el="track"]';

  var H = function () {
    function e() {
      var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
      r(this, e), this.listeners = t;
    }

    return o(e, [{
      key: "on",
      value: function value(t, e, n) {
        var i = 3 < arguments.length && void 0 !== arguments[3] && arguments[3];
        u(t) && (t = [t]);

        for (var r = 0; r < t.length; r++) {
          this.listeners[t[r]] = n, e.addEventListener(t[r], this.listeners[t[r]], i);
        }
      }
    }, {
      key: "off",
      value: function value(t, e) {
        var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2];
        u(t) && (t = [t]);

        for (var i = 0; i < t.length; i++) {
          e.removeEventListener(t[i], this.listeners[t[i]], n);
        }
      }
    }, {
      key: "destroy",
      value: function value() {
        delete this.listeners;
      }
    }]), e;
  }();

  var T = ["ltr", "rtl"],
      x = {
    ">": "<",
    "<": ">",
    "=": "="
  };

  function t(t, e) {
    return {
      modify: function modify(t) {
        return e.Direction.is("rtl") ? -t : t;
      }
    };
  }

  function O(i, r, o) {
    var s = [function (e, n) {
      return {
        modify: function modify(t) {
          return t + n.Gaps.value * e.index;
        }
      };
    }, function (t, e) {
      return {
        modify: function modify(t) {
          return t + e.Clones.grow / 2;
        }
      };
    }, function (n, i) {
      return {
        modify: function modify(t) {
          if (0 <= n.settings.focusAt) {
            var e = i.Peek.value;
            return c(e) ? t - e.before : t - e;
          }

          return t;
        }
      };
    }, function (o, s) {
      return {
        modify: function modify(t) {
          var e = s.Gaps.value,
              n = s.Sizes.width,
              i = o.settings.focusAt,
              r = s.Sizes.slideWidth;
          return "center" === i ? t - (n / 2 - r / 2) : t - r * i - e * i;
        }
      };
    }].concat(i._t, [t]);
    return {
      mutate: function mutate(t) {
        for (var e = 0; e < s.length; e++) {
          var n = s[e];
          l(n) && l(n().modify) && (t = n(i, r, o).modify(t));
        }

        return t;
      }
    };
  }

  var e = !1;

  try {
    var A = Object.defineProperty({}, "passive", {
      get: function get() {
        e = !0;
      }
    });
    window.addEventListener("testPassive", null, A), window.removeEventListener("testPassive", null, A);
  } catch (t) {}

  var M = e,
      C = ["touchstart", "mousedown"],
      P = ["touchmove", "mousemove"],
      L = ["touchend", "touchcancel", "mouseup", "mouseleave"],
      z = ["mousedown", "mousemove", "mouseup", "mouseleave"];
  var j = '[data-glide-el="controls[nav]"]',
      D = '[data-glide-el^="controls"]';

  function E(t) {
    return c(t) ? (n = t, Object.keys(n).sort().reduce(function (t, e) {
      return t[e] = n[e], t[e], t;
    }, {})) : {};
    var n;
  }

  var R = {
    Html: function Html(e, t) {
      var n = {
        mount: function mount() {
          this.root = e.selector, this.track = this.root.querySelector(S), this.slides = Array.prototype.slice.call(this.wrapper.children).filter(function (t) {
            return !t.classList.contains(e.settings.classes.cloneSlide);
          });
        }
      };
      return p(n, "root", {
        get: function get() {
          return n._r;
        },
        set: function set(t) {
          u(t) && (t = document.querySelector(t)), k(t) && (n._r = t);
        }
      }), p(n, "track", {
        get: function get() {
          return n._t;
        },
        set: function set(t) {
          k(t) && (n._t = t);
        }
      }), p(n, "wrapper", {
        get: function get() {
          return n.track.children[0];
        }
      }), n;
    },
    Translate: function Translate(r, o, s) {
      var u = {
        set: function set(t) {
          var e = O(r, o).mutate(t);
          o.Html.wrapper.style.transform = "translate3d(" + -1 * e + "px, 0px, 0px)";
        },
        remove: function remove() {
          o.Html.wrapper.style.transform = "";
        }
      };
      return s.on("move", function (t) {
        var e = o.Gaps.value,
            n = o.Sizes.length,
            i = o.Sizes.slideWidth;
        return r.isType("carousel") && o.Run.isOffset("<") ? (o.Transition.after(function () {
          s.emit("translate.jump"), u.set(i * (n - 1));
        }), u.set(-i - e * n)) : r.isType("carousel") && o.Run.isOffset(">") ? (o.Transition.after(function () {
          s.emit("translate.jump"), u.set(0);
        }), u.set(i * n + e * n)) : u.set(t.movement);
      }), s.on("destroy", function () {
        u.remove();
      }), u;
    },
    Transition: function Transition(n, e, t) {
      var i = !1,
          r = {
        compose: function compose(t) {
          var e = n.settings;
          return i ? t + " 0ms " + e.animationTimingFunc : t + " " + this.duration + "ms " + e.animationTimingFunc;
        },
        set: function set() {
          var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "transform";
          e.Html.wrapper.style.transition = this.compose(t);
        },
        remove: function remove() {
          e.Html.wrapper.style.transition = "";
        },
        after: function after(t) {
          setTimeout(function () {
            t();
          }, this.duration);
        },
        enable: function enable() {
          i = !1, this.set();
        },
        disable: function disable() {
          i = !0, this.set();
        }
      };
      return p(r, "duration", {
        get: function get() {
          var t = n.settings;
          return n.isType("slider") && e.Run.offset ? t.rewindDuration : t.animationDuration;
        }
      }), t.on("move", function () {
        r.set();
      }), t.on(["build.before", "resize", "translate.jump"], function () {
        r.disable();
      }), t.on("run", function () {
        r.enable();
      }), t.on("destroy", function () {
        r.remove();
      }), r;
    },
    Direction: function Direction(t, e, n) {
      var i = {
        mount: function mount() {
          this.value = t.settings.direction;
        },
        resolve: function resolve(t) {
          var e = t.slice(0, 1);
          return this.is("rtl") ? t.split(e).join(x[e]) : t;
        },
        is: function is(t) {
          return this.value === t;
        },
        addClass: function addClass() {
          e.Html.root.classList.add(t.settings.classes.direction[this.value]);
        },
        removeClass: function removeClass() {
          e.Html.root.classList.remove(t.settings.classes.direction[this.value]);
        }
      };
      return p(i, "value", {
        get: function get() {
          return i._v;
        },
        set: function set(t) {
          -1 < T.indexOf(t) && (i._v = t);
        }
      }), n.on(["destroy", "update"], function () {
        i.removeClass();
      }), n.on("update", function () {
        i.mount();
      }), n.on(["build.before", "update"], function () {
        i.addClass();
      }), i;
    },
    Peek: function Peek(n, t, e) {
      var i = {
        mount: function mount() {
          this.value = n.settings.peek;
        }
      };
      return p(i, "value", {
        get: function get() {
          return i._v;
        },
        set: function set(t) {
          c(t) ? (t.before = y(t.before), t.after = y(t.after)) : t = y(t), i._v = t;
        }
      }), p(i, "reductor", {
        get: function get() {
          var t = i.value,
              e = n.settings.perView;
          return c(t) ? t.before / e + t.after / e : 2 * t / e;
        }
      }), e.on(["resize", "update"], function () {
        i.mount();
      }), i;
    },
    Sizes: function Sizes(t, i, e) {
      var n = {
        setupSlides: function setupSlides() {
          for (var t = this.slideWidth + "px", e = i.Html.slides, n = 0; n < e.length; n++) {
            e[n].style.width = t;
          }
        },
        setupWrapper: function setupWrapper(t) {
          i.Html.wrapper.style.width = this.wrapperSize + "px";
        },
        remove: function remove() {
          for (var t = i.Html.slides, e = 0; e < t.length; e++) {
            t[e].style.width = "";
          }

          i.Html.wrapper.style.width = "";
        }
      };
      return p(n, "length", {
        get: function get() {
          return i.Html.slides.length;
        }
      }), p(n, "width", {
        get: function get() {
          return i.Html.root.offsetWidth;
        }
      }), p(n, "wrapperSize", {
        get: function get() {
          return n.slideWidth * n.length + i.Gaps.grow + i.Clones.grow;
        }
      }), p(n, "slideWidth", {
        get: function get() {
          return n.width / t.settings.perView - i.Peek.reductor - i.Gaps.reductor;
        }
      }), e.on(["build.before", "resize", "update"], function () {
        n.setupSlides(), n.setupWrapper();
      }), e.on("destroy", function () {
        n.remove();
      }), n;
    },
    Gaps: function Gaps(e, o, t) {
      var n = {
        apply: function apply(t) {
          for (var e = 0, n = t.length; e < n; e++) {
            var i = t[e].style,
                r = o.Direction.value;
            i[w[r][0]] = 0 !== e ? this.value / 2 + "px" : "", e !== t.length - 1 ? i[w[r][1]] = this.value / 2 + "px" : i[w[r][1]] = "";
          }
        },
        remove: function remove(t) {
          for (var e = 0, n = t.length; e < n; e++) {
            var i = t[e].style;
            i.marginLeft = "", i.marginRight = "";
          }
        }
      };
      return p(n, "value", {
        get: function get() {
          return y(e.settings.gap);
        }
      }), p(n, "grow", {
        get: function get() {
          return n.value * (o.Sizes.length - 1);
        }
      }), p(n, "reductor", {
        get: function get() {
          var t = e.settings.perView;
          return n.value * (t - 1) / t;
        }
      }), t.on(["build.after", "update"], b(function () {
        n.apply(o.Html.wrapper.children);
      }, 30)), t.on("destroy", function () {
        n.remove(o.Html.wrapper.children);
      }), n;
    },
    Move: function Move(t, n, i) {
      var e = {
        mount: function mount() {
          this._o = 0;
        },
        make: function make() {
          var t = this,
              e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0;
          this.offset = e, i.emit("move", {
            movement: this.value
          }), n.Transition.after(function () {
            i.emit("move.after", {
              movement: t.value
            });
          });
        }
      };
      return p(e, "offset", {
        get: function get() {
          return e._o;
        },
        set: function set(t) {
          e._o = f(t) ? 0 : y(t);
        }
      }), p(e, "translate", {
        get: function get() {
          return n.Sizes.slideWidth * t.index;
        }
      }), p(e, "value", {
        get: function get() {
          var t = this.offset,
              e = this.translate;
          return n.Direction.is("rtl") ? e + t : e - t;
        }
      }), i.on(["build.before", "run"], function () {
        e.make();
      }), e;
    },
    Clones: function Clones(h, v, t) {
      var e = {
        mount: function mount() {
          this.items = [], h.isType("carousel") && (this.items = this.collect());
        },
        collect: function collect() {
          for (var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], e = v.Html.slides, n = h.settings, i = n.perView, r = n.classes, o = i + +!!h.settings.peek, s = e.slice(0, o), u = e.slice(-o), a = 0; a < Math.max(1, Math.floor(i / e.length)); a++) {
            for (var c = 0; c < s.length; c++) {
              var l = s[c].cloneNode(!0);
              l.classList.add(r.cloneSlide), t.push(l);
            }

            for (var f = 0; f < u.length; f++) {
              var d = u[f].cloneNode(!0);
              d.classList.add(r.cloneSlide), t.unshift(d);
            }
          }

          return t;
        },
        append: function append() {
          for (var t = this.items, e = v.Html, n = e.wrapper, i = e.slides, r = Math.floor(t.length / 2), o = t.slice(0, r).reverse(), s = t.slice(r, t.length), u = v.Sizes.slideWidth + "px", a = 0; a < s.length; a++) {
            n.appendChild(s[a]);
          }

          for (var c = 0; c < o.length; c++) {
            n.insertBefore(o[c], i[0]);
          }

          for (var l = 0; l < t.length; l++) {
            t[l].style.width = u;
          }
        },
        remove: function remove() {
          for (var t = this.items, e = 0; e < t.length; e++) {
            v.Html.wrapper.removeChild(t[e]);
          }
        }
      };
      return p(e, "grow", {
        get: function get() {
          return (v.Sizes.slideWidth + v.Gaps.value) * e.items.length;
        }
      }), t.on("update", function () {
        e.remove(), e.mount(), e.append();
      }), t.on("build.before", function () {
        h.isType("carousel") && e.append();
      }), t.on("destroy", function () {
        e.remove();
      }), e;
    },
    Resize: function Resize(t, e, n) {
      var i = new H(),
          r = {
        mount: function mount() {
          this.bind();
        },
        bind: function bind() {
          i.on("resize", window, b(function () {
            n.emit("resize");
          }, t.settings.throttle));
        },
        unbind: function unbind() {
          i.off("resize", window);
        }
      };
      return n.on("destroy", function () {
        r.unbind(), i.destroy();
      }), r;
    },
    Build: function Build(n, i, t) {
      var e = {
        mount: function mount() {
          t.emit("build.before"), this.typeClass(), this.activeClass(), t.emit("build.after");
        },
        typeClass: function typeClass() {
          i.Html.root.classList.add(n.settings.classes[n.settings.type]);
        },
        activeClass: function activeClass() {
          var e = n.settings.classes,
              t = i.Html.slides[n.index];
          t && (t.classList.add(e.activeSlide), _(t).forEach(function (t) {
            t.classList.remove(e.activeSlide);
          }));
        },
        removeClasses: function removeClasses() {
          var e = n.settings.classes;
          i.Html.root.classList.remove(e[n.settings.type]), i.Html.slides.forEach(function (t) {
            t.classList.remove(e.activeSlide);
          });
        }
      };
      return t.on(["destroy", "update"], function () {
        e.removeClasses();
      }), t.on(["resize", "update"], function () {
        e.mount();
      }), t.on("move.after", function () {
        e.activeClass();
      }), e;
    },
    Run: function Run(o, n, i) {
      var t = {
        mount: function mount() {
          this._o = !1;
        },
        make: function make(t) {
          var e = this;
          o.disabled || (o.disable(), this.move = t, i.emit("run.before", this.move), this.calculate(), i.emit("run", this.move), n.Transition.after(function () {
            e.isStart() && i.emit("run.start", e.move), e.isEnd() && i.emit("run.end", e.move), (e.isOffset("<") || e.isOffset(">")) && (e._o = !1, i.emit("run.offset", e.move)), i.emit("run.after", e.move), o.enable();
          }));
        },
        calculate: function calculate() {
          var t = this.move,
              e = this.length,
              n = t.steps,
              i = t.direction,
              r = "number" == typeof y(n) && 0 !== y(n);

          switch (i) {
            case ">":
              ">" === n ? o.index = e : this.isEnd() ? o.isType("slider") && !o.settings.rewind || (this._o = !0, o.index = 0) : r ? o.index += Math.min(e - o.index, -y(n)) : o.index++;
              break;

            case "<":
              "<" === n ? o.index = 0 : this.isStart() ? o.isType("slider") && !o.settings.rewind || (this._o = !0, o.index = e) : r ? o.index -= Math.min(o.index, y(n)) : o.index--;
              break;

            case "=":
              o.index = n;
          }
        },
        isStart: function isStart() {
          return 0 === o.index;
        },
        isEnd: function isEnd() {
          return o.index === this.length;
        },
        isOffset: function isOffset(t) {
          return this._o && this.move.direction === t;
        }
      };
      return p(t, "move", {
        get: function get() {
          return this._m;
        },
        set: function set(t) {
          var e = t.substr(1);
          this._m = {
            direction: t.substr(0, 1),
            steps: e ? y(e) ? y(e) : e : 0
          };
        }
      }), p(t, "length", {
        get: function get() {
          var t = o.settings,
              e = n.Html.slides.length;
          return o.isType("slider") && "center" !== t.focusAt && t.bound ? e - 1 - (y(t.perView) - 1) + y(t.focusAt) : e - 1;
        }
      }), p(t, "offset", {
        get: function get() {
          return this._o;
        }
      }), t;
    },
    Swipe: function Swipe(d, h, v) {
      var n = new H(),
          p = 0,
          m = 0,
          g = 0,
          i = !1,
          r = !!M && {
        passive: !0
      },
          t = {
        mount: function mount() {
          this.bindSwipeStart();
        },
        start: function start(t) {
          if (!i && !d.disabled) {
            this.disable();
            var e = this.touches(t);
            p = null, m = y(e.pageX), g = y(e.pageY), this.bindSwipeMove(), this.bindSwipeEnd(), v.emit("swipe.start");
          }
        },
        move: function move(t) {
          if (!d.disabled) {
            var e = d.settings,
                n = e.touchAngle,
                i = e.touchRatio,
                r = e.classes,
                o = this.touches(t),
                s = y(o.pageX) - m,
                u = y(o.pageY) - g,
                a = Math.abs(s << 2),
                c = Math.abs(u << 2),
                l = Math.sqrt(a + c),
                f = Math.sqrt(c);
            if (!(180 * (p = Math.asin(f / l)) / Math.PI < n)) return !1;
            t.stopPropagation(), h.Move.make(s * parseFloat(i)), h.Html.root.classList.add(r.dragging), v.emit("swipe.move");
          }
        },
        end: function end(t) {
          if (!d.disabled) {
            var e = d.settings,
                n = this.touches(t),
                i = this.threshold(t),
                r = n.pageX - m,
                o = 180 * p / Math.PI,
                s = Math.round(r / h.Sizes.slideWidth);
            this.enable(), i < r && o < e.touchAngle ? (e.perTouch && (s = Math.min(s, y(e.perTouch))), h.Direction.is("rtl") && (s = -s), h.Run.make(h.Direction.resolve("<" + s))) : r < -i && o < e.touchAngle ? (e.perTouch && (s = Math.max(s, -y(e.perTouch))), h.Direction.is("rtl") && (s = -s), h.Run.make(h.Direction.resolve(">" + s))) : h.Move.make(), h.Html.root.classList.remove(e.classes.dragging), this.unbindSwipeMove(), this.unbindSwipeEnd(), v.emit("swipe.end");
          }
        },
        bindSwipeStart: function bindSwipeStart() {
          var e = this,
              t = d.settings;
          t.swipeThreshold && n.on(C[0], h.Html.wrapper, function (t) {
            e.start(t);
          }, r), t.dragThreshold && n.on(C[1], h.Html.wrapper, function (t) {
            e.start(t);
          }, r);
        },
        unbindSwipeStart: function unbindSwipeStart() {
          n.off(C[0], h.Html.wrapper, r), n.off(C[1], h.Html.wrapper, r);
        },
        bindSwipeMove: function bindSwipeMove() {
          var e = this;
          n.on(P, h.Html.wrapper, b(function (t) {
            e.move(t);
          }, d.settings.throttle), r);
        },
        unbindSwipeMove: function unbindSwipeMove() {
          n.off(P, h.Html.wrapper, r);
        },
        bindSwipeEnd: function bindSwipeEnd() {
          var e = this;
          n.on(L, h.Html.wrapper, function (t) {
            e.end(t);
          });
        },
        unbindSwipeEnd: function unbindSwipeEnd() {
          n.off(L, h.Html.wrapper);
        },
        touches: function touches(t) {
          return -1 < z.indexOf(t.type) ? t : t.touches[0] || t.changedTouches[0];
        },
        threshold: function threshold(t) {
          var e = d.settings;
          return -1 < z.indexOf(t.type) ? e.dragThreshold : e.swipeThreshold;
        },
        enable: function enable() {
          return i = !1, h.Transition.enable(), this;
        },
        disable: function disable() {
          return i = !0, h.Transition.disable(), this;
        }
      };
      return v.on("build.after", function () {
        h.Html.root.classList.add(d.settings.classes.swipeable);
      }), v.on("destroy", function () {
        t.unbindSwipeStart(), t.unbindSwipeMove(), t.unbindSwipeEnd(), n.destroy();
      }), t;
    },
    Images: function Images(t, e, n) {
      var i = new H(),
          r = {
        mount: function mount() {
          this.bind();
        },
        bind: function bind() {
          i.on("dragstart", e.Html.wrapper, this.dragstart);
        },
        unbind: function unbind() {
          i.off("dragstart", e.Html.wrapper);
        },
        dragstart: function dragstart(t) {
          t.preventDefault();
        }
      };
      return n.on("destroy", function () {
        r.unbind(), i.destroy();
      }), r;
    },
    Anchors: function Anchors(t, e, n) {
      var i = new H(),
          r = !1,
          o = !1,
          s = {
        mount: function mount() {
          this._a = e.Html.wrapper.querySelectorAll("a"), this.bind();
        },
        bind: function bind() {
          i.on("click", e.Html.wrapper, this.click);
        },
        unbind: function unbind() {
          i.off("click", e.Html.wrapper);
        },
        click: function click(t) {
          o && (t.stopPropagation(), t.preventDefault());
        },
        detach: function detach() {
          if (o = !0, !r) {
            for (var t = 0; t < this.items.length; t++) {
              this.items[t].draggable = !1, this.items[t].setAttribute("data-href", this.items[t].getAttribute("href")), this.items[t].removeAttribute("href");
            }

            r = !0;
          }

          return this;
        },
        attach: function attach() {
          if (o = !1, r) {
            for (var t = 0; t < this.items.length; t++) {
              this.items[t].draggable = !0, this.items[t].setAttribute("href", this.items[t].getAttribute("data-href"));
            }

            r = !1;
          }

          return this;
        }
      };
      return p(s, "items", {
        get: function get() {
          return s._a;
        }
      }), n.on("swipe.move", function () {
        s.detach();
      }), n.on("swipe.end", function () {
        e.Transition.after(function () {
          s.attach();
        });
      }), n.on("destroy", function () {
        s.attach(), s.unbind(), i.destroy();
      }), s;
    },
    Controls: function Controls(i, e, t) {
      var n = new H(),
          r = !!M && {
        passive: !0
      },
          o = {
        mount: function mount() {
          this._n = e.Html.root.querySelectorAll(j), this._c = e.Html.root.querySelectorAll(D), this.addBindings();
        },
        setActive: function setActive() {
          for (var t = 0; t < this._n.length; t++) {
            this.addClass(this._n[t].children);
          }
        },
        removeActive: function removeActive() {
          for (var t = 0; t < this._n.length; t++) {
            this.removeClass(this._n[t].children);
          }
        },
        addClass: function addClass(t) {
          var e = i.settings,
              n = t[i.index];
          n && (n.classList.add(e.classes.activeNav), _(n).forEach(function (t) {
            t.classList.remove(e.classes.activeNav);
          }));
        },
        removeClass: function removeClass(t) {
          var e = t[i.index];
          e && e.classList.remove(i.settings.classes.activeNav);
        },
        addBindings: function addBindings() {
          for (var t = 0; t < this._c.length; t++) {
            this.bind(this._c[t].children);
          }
        },
        removeBindings: function removeBindings() {
          for (var t = 0; t < this._c.length; t++) {
            this.unbind(this._c[t].children);
          }
        },
        bind: function bind(t) {
          for (var e = 0; e < t.length; e++) {
            n.on("click", t[e], this.click), n.on("touchstart", t[e], this.click, r);
          }
        },
        unbind: function unbind(t) {
          for (var e = 0; e < t.length; e++) {
            n.off(["click", "touchstart"], t[e]);
          }
        },
        click: function click(t) {
          t.preventDefault(), e.Run.make(e.Direction.resolve(t.currentTarget.getAttribute("data-glide-dir")));
        }
      };
      return p(o, "items", {
        get: function get() {
          return o._c;
        }
      }), t.on(["mount.after", "move.after"], function () {
        o.setActive();
      }), t.on("destroy", function () {
        o.removeBindings(), o.removeActive(), n.destroy();
      }), o;
    },
    Keyboard: function Keyboard(t, e, n) {
      var i = new H(),
          r = {
        mount: function mount() {
          t.settings.keyboard && this.bind();
        },
        bind: function bind() {
          i.on("keyup", document, this.press);
        },
        unbind: function unbind() {
          i.off("keyup", document);
        },
        press: function press(t) {
          39 === t.keyCode && e.Run.make(e.Direction.resolve(">")), 37 === t.keyCode && e.Run.make(e.Direction.resolve("<"));
        }
      };
      return n.on(["destroy", "update"], function () {
        r.unbind();
      }), n.on("update", function () {
        r.mount();
      }), n.on("destroy", function () {
        i.destroy();
      }), r;
    },
    Autoplay: function Autoplay(e, n, t) {
      var i = new H(),
          r = {
        mount: function mount() {
          this.start(), e.settings.hoverpause && this.bind();
        },
        start: function start() {
          var t = this;
          e.settings.autoplay && f(this._i) && (this._i = setInterval(function () {
            t.stop(), n.Run.make(">"), t.start();
          }, this.time));
        },
        stop: function stop() {
          this._i = clearInterval(this._i);
        },
        bind: function bind() {
          var t = this;
          i.on("mouseover", n.Html.root, function () {
            t.stop();
          }), i.on("mouseout", n.Html.root, function () {
            t.start();
          });
        },
        unbind: function unbind() {
          i.off(["mouseover", "mouseout"], n.Html.root);
        }
      };
      return p(r, "time", {
        get: function get() {
          var t = n.Html.slides[e.index].getAttribute("data-glide-autoplay");
          return y(t || e.settings.autoplay);
        }
      }), t.on(["destroy", "update"], function () {
        r.unbind();
      }), t.on(["run.before", "pause", "destroy", "swipe.start", "update"], function () {
        r.stop();
      }), t.on(["run.after", "play", "swipe.end"], function () {
        r.start();
      }), t.on("update", function () {
        r.mount();
      }), t.on("destroy", function () {
        i.destroy();
      }), r;
    },
    Breakpoints: function Breakpoints(t, e, n) {
      var i = new H(),
          r = t.settings,
          o = E(r.breakpoints),
          s = a({}, r),
          u = {
        match: function match(t) {
          if (void 0 !== window.matchMedia) for (var e in t) {
            if (t.hasOwnProperty(e) && window.matchMedia("(max-width: " + e + "px)").matches) return t[e];
          }
          return s;
        }
      };
      return a(r, u.match(o)), i.on("resize", window, b(function () {
        t.settings = h(r, u.match(o));
      }, t.settings.throttle)), n.on("update", function () {
        o = E(o), s = a({}, r);
      }), n.on("destroy", function () {
        i.off("resize", window);
      }), u;
    }
  };
  return function (t) {
    function e() {
      return r(this, e), s(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
    }

    return function (t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + _typeof(e));
      t.prototype = Object.create(e && e.prototype, {
        constructor: {
          value: t,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
    }(e, m), o(e, [{
      key: "mount",
      value: function value() {
        var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
        return function t(e, n, i) {
          null === e && (e = Function.prototype);
          var r = Object.getOwnPropertyDescriptor(e, n);

          if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : t(o, n, i);
          }

          if ("value" in r) return r.value;
          var s = r.get;
          return void 0 !== s ? s.call(i) : void 0;
        }(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "mount", this).call(this, a({}, R, t));
      }
    }]), e;
  }();
});

/***/ }),

/***/ "./node_modules/mixitup/dist/mixitup.js":
/*!**********************************************!*\
  !*** ./node_modules/mixitup/dist/mixitup.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**!
 * MixItUp v3.3.1
 * A high-performance, dependency-free library for animated filtering, sorting and more
 * Build 94e0fbf6-cd0b-4987-b3c0-14b59b67b8a0
 *
 * @copyright Copyright 2014-2018 KunkaLabs Limited.
 * @author    KunkaLabs Limited.
 * @link      https://www.kunkalabs.com/mixitup/
 *
 * @license   Commercial use requires a commercial license.
 *            https://www.kunkalabs.com/mixitup/licenses/
 *
 *            Non-commercial use permitted under same terms as CC BY-NC 3.0 license.
 *            http://creativecommons.org/licenses/by-nc/3.0/
 */
(function (window) {
  'use strict';

  var _mixitup = null,
      h = null;

  (function () {
    var VENDORS = ['webkit', 'moz', 'o', 'ms'],
        canary = window.document.createElement('div'),
        i = -1; // window.requestAnimationFrame

    for (i = 0; i < VENDORS.length && !window.requestAnimationFrame; i++) {
      window.requestAnimationFrame = window[VENDORS[i] + 'RequestAnimationFrame'];
    } // Element.nextElementSibling


    if (typeof canary.nextElementSibling === 'undefined') {
      Object.defineProperty(window.Element.prototype, 'nextElementSibling', {
        get: function get() {
          var el = this.nextSibling;

          while (el) {
            if (el.nodeType === 1) {
              return el;
            }

            el = el.nextSibling;
          }

          return null;
        }
      });
    } // Element.matches


    (function (ElementPrototype) {
      ElementPrototype.matches = ElementPrototype.matches || ElementPrototype.machesSelector || ElementPrototype.mozMatchesSelector || ElementPrototype.msMatchesSelector || ElementPrototype.oMatchesSelector || ElementPrototype.webkitMatchesSelector || function (selector) {
        return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(selector), this) > -1;
      };
    })(window.Element.prototype); // Object.keys
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys


    if (!Object.keys) {
      Object.keys = function () {
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = false,
            dontEnums = [],
            dontEnumsLength = -1;
        hasDontEnumBug = !{
          toString: null
        }.propertyIsEnumerable('toString');
        dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
        dontEnumsLength = dontEnums.length;
        return function (obj) {
          var result = [],
              prop = '',
              i = -1;

          if (_typeof(obj) !== 'object' && (typeof obj !== 'function' || obj === null)) {
            throw new TypeError('Object.keys called on non-object');
          }

          for (prop in obj) {
            if (hasOwnProperty.call(obj, prop)) {
              result.push(prop);
            }
          }

          if (hasDontEnumBug) {
            for (i = 0; i < dontEnumsLength; i++) {
              if (hasOwnProperty.call(obj, dontEnums[i])) {
                result.push(dontEnums[i]);
              }
            }
          }

          return result;
        };
      }();
    } // Array.isArray
    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray


    if (!Array.isArray) {
      Array.isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
      };
    } // Object.create
    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create


    if (typeof Object.create !== 'function') {
      Object.create = function (undefined) {
        var Temp = function Temp() {};

        return function (prototype, propertiesObject) {
          if (prototype !== Object(prototype) && prototype !== null) {
            throw TypeError('Argument must be an object, or null');
          }

          Temp.prototype = prototype || {};
          var result = new Temp();
          Temp.prototype = null;

          if (propertiesObject !== undefined) {
            Object.defineProperties(result, propertiesObject);
          }

          if (prototype === null) {
            /* jshint ignore:start */
            result.__proto__ = null;
            /* jshint ignore:end */
          }

          return result;
        };
      }();
    } // String.prototyoe.trim


    if (!String.prototype.trim) {
      String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
      };
    } // Array.prototype.indexOf
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf


    if (!Array.prototype.indexOf) {
      Array.prototype.indexOf = function (searchElement) {
        var n, k, t, len;

        if (this === null) {
          throw new TypeError();
        }

        t = Object(this);
        len = t.length >>> 0;

        if (len === 0) {
          return -1;
        }

        n = 0;

        if (arguments.length > 1) {
          n = Number(arguments[1]);

          if (n !== n) {
            n = 0;
          } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
            n = (n > 0 || -1) * Math.floor(Math.abs(n));
          }
        }

        if (n >= len) {
          return -1;
        }

        for (k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) {
          if (k in t && t[k] === searchElement) {
            return k;
          }
        }

        return -1;
      };
    } // Function.prototype.bind
    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind


    if (!Function.prototype.bind) {
      Function.prototype.bind = function (oThis) {
        var aArgs, self, FNOP, fBound;

        if (typeof this !== 'function') {
          throw new TypeError();
        }

        aArgs = Array.prototype.slice.call(arguments, 1);
        self = this;

        FNOP = function FNOP() {};

        fBound = function fBound() {
          return self.apply(this instanceof FNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
        };

        if (this.prototype) {
          FNOP.prototype = this.prototype;
        }

        fBound.prototype = new FNOP();
        return fBound;
      };
    } // Element.prototype.dispatchEvent


    if (!window.Element.prototype.dispatchEvent) {
      window.Element.prototype.dispatchEvent = function (event) {
        try {
          return this.fireEvent('on' + event.type, event);
        } catch (err) {}
      };
    }
  })();
  /**
   * The `mixitup()` "factory" function creates and returns individual instances
   * of MixItUp, known as "mixers", on which API methods can be called.
   *
   * When loading MixItUp via a script tag, the factory function is accessed
   * via the global variable `mixitup`. When using a module loading
   * system (e.g. ES2015, CommonJS, RequireJS), the factory function is
   * exported into your module when you require the MixItUp library.
   *
   * @example
   * mixitup(container [,config] [,foreignDoc])
   *
   * @example <caption>Example 1: Creating a mixer instance with an element reference</caption>
   * var containerEl = document.querySelector('.container');
   *
   * var mixer = mixitup(containerEl);
   *
   * @example <caption>Example 2: Creating a mixer instance with a selector string</caption>
   * var mixer = mixitup('.container');
   *
   * @example <caption>Example 3: Passing a configuration object</caption>
   * var mixer = mixitup(containerEl, {
   *     animation: {
   *         effects: 'fade scale(0.5)'
   *     }
   * });
   *
   * @example <caption>Example 4: Passing an iframe reference</caption>
   * var mixer = mixitup(containerEl, config, foreignDocument);
   *
   * @global
   * @namespace
   * @public
   * @kind        function
   * @since       3.0.0
   * @param       {(Element|string)}  container
   *      A DOM element or selector string representing the container(s) on which to instantiate MixItUp.
   * @param       {object}            [config]
   *      An optional "configuration object" used to customize the behavior of the MixItUp instance.
   * @param       {object}            [foreignDoc]
   *      An optional reference to a `document`, which can be used to control a MixItUp instance in an iframe.
   * @return      {mixitup.Mixer}
   *      A "mixer" object holding the MixItUp instance.
   */


  _mixitup = function mixitup(container, config, foreignDoc) {
    var el = null,
        returnCollection = false,
        instance = null,
        facade = null,
        doc = null,
        output = null,
        instances = [],
        id = '',
        elements = [],
        i = -1;
    doc = foreignDoc || window.document;

    if (returnCollection = arguments[3]) {
      // A non-documented 4th paramater enabling control of multiple instances
      returnCollection = typeof returnCollection === 'boolean';
    }

    if (typeof container === 'string') {
      elements = doc.querySelectorAll(container);
    } else if (container && _typeof(container) === 'object' && h.isElement(container, doc)) {
      elements = [container];
    } else if (container && _typeof(container) === 'object' && container.length) {
      // Although not documented, the container may also be an array-like list of
      // elements such as a NodeList or jQuery collection, is returnCollection is true
      elements = container;
    } else {
      throw new Error(_mixitup.messages.errorFactoryInvalidContainer());
    }

    if (elements.length < 1) {
      throw new Error(_mixitup.messages.errorFactoryContainerNotFound());
    }

    for (i = 0; el = elements[i]; i++) {
      if (i > 0 && !returnCollection) break;

      if (!el.id) {
        id = 'MixItUp' + h.randomHex();
        el.id = id;
      } else {
        id = el.id;
      }

      if (_mixitup.instances[id] instanceof _mixitup.Mixer) {
        instance = _mixitup.instances[id];

        if (!config || config && config.debug && config.debug.showWarnings !== false) {
          console.warn(_mixitup.messages.warningFactoryPreexistingInstance());
        }
      } else {
        instance = new _mixitup.Mixer();
        instance.attach(el, doc, id, config);
        _mixitup.instances[id] = instance;
      }

      facade = new _mixitup.Facade(instance);

      if (config && config.debug && config.debug.enable) {
        instances.push(instance);
      } else {
        instances.push(facade);
      }
    }

    if (returnCollection) {
      output = new _mixitup.Collection(instances);
    } else {
      // Return the first instance regardless
      output = instances[0];
    }

    return output;
  };
  /**
   * The `.use()` static method is used to extend the functionality of mixitup with compatible
   * extensions and libraries in an environment with modular scoping e.g. ES2015, CommonJS, or RequireJS.
   *
   * You need only call the `.use()` function once per project, per extension, as module loaders
   * will cache a single reference to MixItUp inclusive of all changes made.
   *
   * @example
   * mixitup.use(extension)
   *
   * @example <caption>Example 1: Extending MixItUp with the Pagination Extension</caption>
   *
   * import mixitup from 'mixitup';
   * import mixitupPagination from 'mixitup-pagination';
   *
   * mixitup.use(mixitupPagination);
   *
   * // All mixers created by the factory function in all modules will now
   * // have pagination functionality
   *
   * var mixer = mixitup('.container');
   *
   * @public
   * @name     use
   * @memberof mixitup
   * @kind     function
   * @static
   * @since    3.0.0
   * @param    {*}  extension   A reference to the extension or library to be used.
   * @return   {void}
   */


  _mixitup.use = function (extension) {
    _mixitup.Base.prototype.callActions.call(_mixitup, 'beforeUse', arguments); // Call the extension's factory function, passing
    // the mixitup factory as a paramater


    if (typeof extension === 'function' && extension.TYPE === 'mixitup-extension') {
      // Mixitup extension
      if (typeof _mixitup.extensions[extension.NAME] === 'undefined') {
        extension(_mixitup);
        _mixitup.extensions[extension.NAME] = extension;
      }
    } else if (extension.fn && extension.fn.jquery) {
      // jQuery
      _mixitup.libraries.$ = extension;
    }

    _mixitup.Base.prototype.callActions.call(_mixitup, 'afterUse', arguments);
  };

  _mixitup.instances = {};
  _mixitup.extensions = {};
  _mixitup.libraries = {};
  /**
   * @private
   */

  h = {
    /**
     * @private
     * @param   {HTMLElement}   el
     * @param   {string}        cls
     * @return  {boolean}
     */
    hasClass: function hasClass(el, cls) {
      return !!el.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
    },

    /**
     * @private
     * @param   {HTMLElement}   el
     * @param   {string}        cls
     * @return  {void}
     */
    addClass: function addClass(el, cls) {
      if (!this.hasClass(el, cls)) el.className += el.className ? ' ' + cls : cls;
    },

    /**
     * @private
     * @param   {HTMLElement}   el
     * @param   {string}        cls
     * @return  {void}
     */
    removeClass: function removeClass(el, cls) {
      if (this.hasClass(el, cls)) {
        var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
        el.className = el.className.replace(reg, ' ').trim();
      }
    },

    /**
     * Merges the properties of the source object onto the
     * target object. Alters the target object.
     *
     * @private
     * @param   {object}    destination
     * @param   {object}    source
     * @param   {boolean}   [deep=false]
     * @param   {boolean}   [handleErrors=false]
     * @return  {void}
     */
    extend: function extend(destination, source, deep, handleErrors) {
      var sourceKeys = [],
          key = '',
          i = -1;
      deep = deep || false;
      handleErrors = handleErrors || false;

      try {
        if (Array.isArray(source)) {
          for (i = 0; i < source.length; i++) {
            sourceKeys.push(i);
          }
        } else if (source) {
          sourceKeys = Object.keys(source);
        }

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];

          if (!deep || _typeof(source[key]) !== 'object' || this.isElement(source[key])) {
            // All non-object properties, or all properties if shallow extend
            destination[key] = source[key];
          } else if (Array.isArray(source[key])) {
            // Arrays
            if (!destination[key]) {
              destination[key] = [];
            }

            this.extend(destination[key], source[key], deep, handleErrors);
          } else {
            // Objects
            if (!destination[key]) {
              destination[key] = {};
            }

            this.extend(destination[key], source[key], deep, handleErrors);
          }
        }
      } catch (err) {
        if (handleErrors) {
          this.handleExtendError(err, destination);
        } else {
          throw err;
        }
      }

      return destination;
    },

    /**
     * @private
     * @param   {Error}  err
     * @param   {object} destination
     * @return  {void}
     */
    handleExtendError: function handleExtendError(err, destination) {
      var re = /property "?(\w*)"?[,:] object/i,
          matches = null,
          erroneous = '',
          message = '',
          suggestion = '',
          probableMatch = '',
          key = '',
          mostMatchingChars = -1,
          i = -1;

      if (err instanceof TypeError && (matches = re.exec(err.message))) {
        erroneous = matches[1];

        for (key in destination) {
          i = 0;

          while (i < erroneous.length && erroneous.charAt(i) === key.charAt(i)) {
            i++;
          }

          if (i > mostMatchingChars) {
            mostMatchingChars = i;
            probableMatch = key;
          }
        }

        if (mostMatchingChars > 1) {
          suggestion = _mixitup.messages.errorConfigInvalidPropertySuggestion({
            probableMatch: probableMatch
          });
        }

        message = _mixitup.messages.errorConfigInvalidProperty({
          erroneous: erroneous,
          suggestion: suggestion
        });
        throw new TypeError(message);
      }

      throw err;
    },

    /**
     * @private
     * @param   {string} str
     * @return  {function}
     */
    template: function template(str) {
      var re = /\${([\w]*)}/g,
          dynamics = {},
          matches = null;

      while (matches = re.exec(str)) {
        dynamics[matches[1]] = new RegExp('\\${' + matches[1] + '}', 'g');
      }

      return function (data) {
        var key = '',
            output = str;
        data = data || {};

        for (key in dynamics) {
          output = output.replace(dynamics[key], typeof data[key] !== 'undefined' ? data[key] : '');
        }

        return output;
      };
    },

    /**
     * @private
     * @param   {HTMLElement}   el
     * @param   {string}        type
     * @param   {function}      fn
     * @param   {boolean}       useCapture
     * @return  {void}
     */
    on: function on(el, type, fn, useCapture) {
      if (!el) return;

      if (el.addEventListener) {
        el.addEventListener(type, fn, useCapture);
      } else if (el.attachEvent) {
        el['e' + type + fn] = fn;

        el[type + fn] = function () {
          el['e' + type + fn](window.event);
        };

        el.attachEvent('on' + type, el[type + fn]);
      }
    },

    /**
     * @private
     * @param   {HTMLElement}   el
     * @param   {string}        type
     * @param   {function}      fn
     * @return  {void}
     */
    off: function off(el, type, fn) {
      if (!el) return;

      if (el.removeEventListener) {
        el.removeEventListener(type, fn, false);
      } else if (el.detachEvent) {
        el.detachEvent('on' + type, el[type + fn]);
        el[type + fn] = null;
      }
    },

    /**
     * @private
     * @param   {string}      eventType
     * @param   {object}      detail
     * @param   {Document}    [doc]
     * @return  {CustomEvent}
     */
    getCustomEvent: function getCustomEvent(eventType, detail, doc) {
      var event = null;
      doc = doc || window.document;

      if (typeof window.CustomEvent === 'function') {
        event = new window.CustomEvent(eventType, {
          detail: detail,
          bubbles: true,
          cancelable: true
        });
      } else if (typeof doc.createEvent === 'function') {
        event = doc.createEvent('CustomEvent');
        event.initCustomEvent(eventType, true, true, detail);
      } else {
        event = doc.createEventObject(), event.type = eventType;
        event.returnValue = false;
        event.cancelBubble = false;
        event.detail = detail;
      }

      return event;
    },

    /**
     * @private
     * @param   {Event} e
     * @return  {Event}
     */
    getOriginalEvent: function getOriginalEvent(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0];
      } else if (e.changedTouches && e.changedTouches.length) {
        return e.changedTouches[0];
      } else {
        return e;
      }
    },

    /**
     * @private
     * @param   {HTMLElement}   el
     * @param   {string}        selector
     * @return  {Number}
     */
    index: function index(el, selector) {
      var i = 0;

      while ((el = el.previousElementSibling) !== null) {
        if (!selector || el.matches(selector)) {
          ++i;
        }
      }

      return i;
    },

    /**
     * Converts a dash or snake-case string to camel case.
     *
     * @private
     * @param   {string}    str
     * @param   {boolean}   [isPascal]
     * @return  {string}
     */
    camelCase: function camelCase(str) {
      return str.toLowerCase().replace(/([_-][a-z])/g, function ($1) {
        return $1.toUpperCase().replace(/[_-]/, '');
      });
    },

    /**
     * Converts a dash or snake-case string to pascal case.
     *
     * @private
     * @param   {string}    str
     * @param   {boolean}   [isPascal]
     * @return  {string}
     */
    pascalCase: function pascalCase(str) {
      return (str = this.camelCase(str)).charAt(0).toUpperCase() + str.slice(1);
    },

    /**
     * Converts a camel or pascal-case string to dash case.
     *
     * @private
     * @param   {string}    str
     * @return  {string}
     */
    dashCase: function dashCase(str) {
      return str.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();
    },

    /**
     * @private
     * @param   {HTMLElement}       el
     * @param   {HTMLHtmlElement}   [doc]
     * @return  {boolean}
     */
    isElement: function isElement(el, doc) {
      doc = doc || window.document;

      if (window.HTMLElement && el instanceof window.HTMLElement) {
        return true;
      } else if (doc.defaultView && doc.defaultView.HTMLElement && el instanceof doc.defaultView.HTMLElement) {
        return true;
      } else {
        return el !== null && el.nodeType === 1 && typeof el.nodeName === 'string';
      }
    },

    /**
     * @private
     * @param   {string}            htmlString
     * @param   {HTMLHtmlElement}   [doc]
     * @return  {DocumentFragment}
     */
    createElement: function createElement(htmlString, doc) {
      var frag = null,
          temp = null;
      doc = doc || window.document;
      frag = doc.createDocumentFragment();
      temp = doc.createElement('div');
      temp.innerHTML = htmlString.trim();

      while (temp.firstChild) {
        frag.appendChild(temp.firstChild);
      }

      return frag;
    },

    /**
     * @private
     * @param   {Node} node
     * @return  {void}
     */
    removeWhitespace: function removeWhitespace(node) {
      var deleting;

      while (node && node.nodeName === '#text') {
        deleting = node;
        node = node.previousSibling;
        deleting.parentElement && deleting.parentElement.removeChild(deleting);
      }
    },

    /**
     * @private
     * @param   {Array<*>}  a
     * @param   {Array<*>}  b
     * @return  {boolean}
     */
    isEqualArray: function isEqualArray(a, b) {
      var i = a.length;
      if (i !== b.length) return false;

      while (i--) {
        if (a[i] !== b[i]) return false;
      }

      return true;
    },

    /**
     * @private
     * @param   {object}  a
     * @param   {object}  b
     * @return  {boolean}
     */
    deepEquals: function deepEquals(a, b) {
      var key;

      if (_typeof(a) === 'object' && a && _typeof(b) === 'object' && b) {
        if (Object.keys(a).length !== Object.keys(b).length) return false;

        for (key in a) {
          if (!b.hasOwnProperty(key) || !this.deepEquals(a[key], b[key])) return false;
        }
      } else if (a !== b) {
        return false;
      }

      return true;
    },

    /**
     * @private
     * @param   {Array<*>}  oldArray
     * @return  {Array<*>}
     */
    arrayShuffle: function arrayShuffle(oldArray) {
      var newArray = oldArray.slice(),
          len = newArray.length,
          i = len,
          p = -1,
          t = [];

      while (i--) {
        p = ~~(Math.random() * len);
        t = newArray[i];
        newArray[i] = newArray[p];
        newArray[p] = t;
      }

      return newArray;
    },

    /**
     * @private
     * @param   {object}    list
     */
    arrayFromList: function arrayFromList(list) {
      var output, i;

      try {
        return Array.prototype.slice.call(list);
      } catch (err) {
        output = [];

        for (i = 0; i < list.length; i++) {
          output.push(list[i]);
        }

        return output;
      }
    },

    /**
     * @private
     * @param   {function}  func
     * @param   {Number}    wait
     * @param   {boolean}   immediate
     * @return  {function}
     */
    debounce: function debounce(func, wait, immediate) {
      var timeout;
      return function () {
        var self = this,
            args = arguments,
            callNow = immediate && !timeout,
            later = null;

        later = function later() {
          timeout = null;

          if (!immediate) {
            func.apply(self, args);
          }
        };

        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(self, args);
      };
    },

    /**
     * @private
     * @param   {HTMLElement}   element
     * @return  {object}
     */
    position: function position(element) {
      var xPosition = 0,
          yPosition = 0,
          offsetParent = element;

      while (element) {
        xPosition -= element.scrollLeft;
        yPosition -= element.scrollTop;

        if (element === offsetParent) {
          xPosition += element.offsetLeft;
          yPosition += element.offsetTop;
          offsetParent = element.offsetParent;
        }

        element = element.parentElement;
      }

      return {
        x: xPosition,
        y: yPosition
      };
    },

    /**
     * @private
     * @param   {object}    node1
     * @param   {object}    node2
     * @return  {Number}
     */
    getHypotenuse: function getHypotenuse(node1, node2) {
      var distanceX = node1.x - node2.x,
          distanceY = node1.y - node2.y;
      distanceX = distanceX < 0 ? distanceX * -1 : distanceX, distanceY = distanceY < 0 ? distanceY * -1 : distanceY;
      return Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));
    },

    /**
     * Calcuates the area of intersection between two rectangles and expresses it as
     * a ratio in comparison to the area of the first rectangle.
     *
     * @private
     * @param   {Rect}  box1
     * @param   {Rect}  box2
     * @return  {number}
     */
    getIntersectionRatio: function getIntersectionRatio(box1, box2) {
      var controlArea = box1.width * box1.height,
          intersectionX = -1,
          intersectionY = -1,
          intersectionArea = -1,
          ratio = -1;
      intersectionX = Math.max(0, Math.min(box1.left + box1.width, box2.left + box2.width) - Math.max(box1.left, box2.left));
      intersectionY = Math.max(0, Math.min(box1.top + box1.height, box2.top + box2.height) - Math.max(box1.top, box2.top));
      intersectionArea = intersectionY * intersectionX;
      ratio = intersectionArea / controlArea;
      return ratio;
    },

    /**
     * @private
     * @param   {object}            el
     * @param   {string}            selector
     * @param   {boolean}           [includeSelf]
     * @param   {HTMLHtmlElement}   [doc]
     * @return  {Element|null}
     */
    closestParent: function closestParent(el, selector, includeSelf, doc) {
      var parent = el.parentNode;
      doc = doc || window.document;

      if (includeSelf && el.matches(selector)) {
        return el;
      }

      while (parent && parent != doc.body) {
        if (parent.matches && parent.matches(selector)) {
          return parent;
        } else if (parent.parentNode) {
          parent = parent.parentNode;
        } else {
          return null;
        }
      }

      return null;
    },

    /**
     * @private
     * @param   {HTMLElement}       el
     * @param   {string}            selector
     * @param   {HTMLHtmlElement}   [doc]
     * @return  {NodeList}
     */
    children: function children(el, selector, doc) {
      var children = [],
          tempId = '';
      doc = doc || window.doc;

      if (el) {
        if (!el.id) {
          tempId = 'Temp' + this.randomHexKey();
          el.id = tempId;
        }

        children = doc.querySelectorAll('#' + el.id + ' > ' + selector);

        if (tempId) {
          el.removeAttribute('id');
        }
      }

      return children;
    },

    /**
     * Creates a clone of a provided array, with any empty strings removed.
     *
     * @private
     * @param   {Array<*>} originalArray
     * @return  {Array<*>}
     */
    clean: function clean(originalArray) {
      var cleanArray = [],
          i = -1;

      for (i = 0; i < originalArray.length; i++) {
        if (originalArray[i] !== '') {
          cleanArray.push(originalArray[i]);
        }
      }

      return cleanArray;
    },

    /**
     * Abstracts an ES6 promise into a q-like deferred interface for storage and deferred resolution.
     *
     * @private
     * @param  {object} libraries
     * @return {h.Deferred}
     */
    defer: function defer(libraries) {
      var deferred = null,
          promiseWrapper = null,
          $ = null;
      promiseWrapper = new this.Deferred();

      if (_mixitup.features.has.promises) {
        // ES6 native promise or polyfill
        promiseWrapper.promise = new Promise(function (resolve, reject) {
          promiseWrapper.resolve = resolve;
          promiseWrapper.reject = reject;
        });
      } else if (($ = window.jQuery || libraries.$) && typeof $.Deferred === 'function') {
        // jQuery
        deferred = $.Deferred();
        promiseWrapper.promise = deferred.promise();
        promiseWrapper.resolve = deferred.resolve;
        promiseWrapper.reject = deferred.reject;
      } else if (window.console) {
        // No implementation
        console.warn(_mixitup.messages.warningNoPromiseImplementation());
      }

      return promiseWrapper;
    },

    /**
     * @private
     * @param   {Array<Promise>}    tasks
     * @param   {object}            libraries
     * @return  {Promise<Array>}
     */
    all: function all(tasks, libraries) {
      var $ = null;

      if (_mixitup.features.has.promises) {
        return Promise.all(tasks);
      } else if (($ = window.jQuery || libraries.$) && typeof $.when === 'function') {
        return $.when.apply($, tasks).done(function () {
          // jQuery when returns spread arguments rather than an array or resolutions
          return arguments;
        });
      } // No implementation


      if (window.console) {
        console.warn(_mixitup.messages.warningNoPromiseImplementation());
      }

      return [];
    },

    /**
     * @private
     * @param   {HTMLElement}   el
     * @param   {string}        property
     * @param   {Array<string>} vendors
     * @return  {string}
     */
    getPrefix: function getPrefix(el, property, vendors) {
      var i = -1,
          prefix = '';
      if (h.dashCase(property) in el.style) return '';

      for (i = 0; prefix = vendors[i]; i++) {
        if (prefix + property in el.style) {
          return prefix.toLowerCase();
        }
      }

      return 'unsupported';
    },

    /**
     * @private
     * @return  {string}
     */
    randomHex: function randomHex() {
      return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();
    },

    /**
     * @private
     * @param   {HTMLDocument}  [doc]
     * @return  {object}
     */
    getDocumentState: function getDocumentState(doc) {
      doc = _typeof(doc.body) === 'object' ? doc : window.document;
      return {
        scrollTop: window.pageYOffset,
        scrollLeft: window.pageXOffset,
        docHeight: doc.documentElement.scrollHeight,
        docWidth: doc.documentElement.scrollWidth,
        viewportHeight: doc.documentElement.clientHeight,
        viewportWidth: doc.documentElement.clientWidth
      };
    },

    /**
     * @private
     * @param   {object}    obj
     * @param   {function}  fn
     * @return  {function}
     */
    bind: function bind(obj, fn) {
      return function () {
        return fn.apply(obj, arguments);
      };
    },

    /**
     * @private
     * @param   {HTMLElement}   el
     * @return  {boolean}
     */
    isVisible: function isVisible(el) {
      var styles = null;
      if (el.offsetParent) return true;
      styles = window.getComputedStyle(el);

      if (styles.position === 'fixed' && styles.visibility !== 'hidden' && styles.opacity !== '0') {
        // Fixed elements report no offsetParent,
        // but may still be invisible
        return true;
      }

      return false;
    },

    /**
     * @private
     * @param   {object}    obj
     */
    seal: function seal(obj) {
      if (typeof Object.seal === 'function') {
        Object.seal(obj);
      }
    },

    /**
     * @private
     * @param   {object}    obj
     */
    freeze: function freeze(obj) {
      if (typeof Object.freeze === 'function') {
        Object.freeze(obj);
      }
    },

    /**
     * @private
     * @param   {string}    control
     * @param   {string}    specimen
     * @return  {boolean}
     */
    compareVersions: function compareVersions(control, specimen) {
      var controlParts = control.split('.'),
          specimenParts = specimen.split('.'),
          controlPart = -1,
          specimenPart = -1,
          i = -1;

      for (i = 0; i < controlParts.length; i++) {
        controlPart = parseInt(controlParts[i].replace(/[^\d.]/g, ''));
        specimenPart = parseInt(specimenParts[i].replace(/[^\d.]/g, '') || 0);

        if (specimenPart < controlPart) {
          return false;
        } else if (specimenPart > controlPart) {
          return true;
        }
      }

      return true;
    },

    /**
     * @private
     * @constructor
     */
    Deferred: function Deferred() {
      this.promise = null;
      this.resolve = null;
      this.reject = null;
      this.id = h.randomHex();
    },

    /**
     * @private
     * @param   {object}  obj
     * @return  {boolean}
     */
    isEmptyObject: function isEmptyObject(obj) {
      var key = '';

      if (typeof Object.keys === 'function') {
        return Object.keys(obj).length === 0;
      }

      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          return false;
        }
      }

      return true;
    },

    /**
     * @param   {mixitup.Config.ClassNames}   classNames
     * @param   {string}                      elementName
     * @param   {string}                      [modifier]
     * @return  {string}
     */
    getClassname: function getClassname(classNames, elementName, modifier) {
      var classname = '';
      classname += classNames.block;

      if (classname.length) {
        classname += classNames.delineatorElement;
      }

      classname += classNames['element' + this.pascalCase(elementName)];
      if (!modifier) return classname;

      if (classname.length) {
        classname += classNames.delineatorModifier;
      }

      classname += modifier;
      return classname;
    },

    /**
     * Returns the value of a property on a given object via its string key.
     *
     * @param   {object}    obj
     * @param   {string}    stringKey
     * @return  {*} value
     */
    getProperty: function getProperty(obj, stringKey) {
      var parts = stringKey.split('.'),
          returnCurrent = null,
          current = '',
          i = 0;

      if (!stringKey) {
        return obj;
      }

      returnCurrent = function returnCurrent(obj) {
        if (!obj) {
          return null;
        } else {
          return obj[current];
        }
      };

      while (i < parts.length) {
        current = parts[i];
        obj = returnCurrent(obj);
        i++;
      }

      if (typeof obj !== 'undefined') {
        return obj;
      } else {
        return null;
      }
    }
  };
  _mixitup.h = h;
  /**
   * The Base class adds instance methods to all other extensible MixItUp classes,
   * enabling the calling of any registered hooks.
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.Base = function () {};

  _mixitup.Base.prototype = {
    constructor: _mixitup.Base,

    /**
     * Calls any registered hooks for the provided action.
     *
     * @memberof    mixitup.Base
     * @private
     * @instance
     * @since       2.0.0
     * @param       {string}    actionName
     * @param       {Array<*>}  args
     * @return      {void}
     */
    callActions: function callActions(actionName, args) {
      var self = this,
          hooks = self.constructor.actions[actionName],
          extensionName = '';
      if (!hooks || h.isEmptyObject(hooks)) return;

      for (extensionName in hooks) {
        hooks[extensionName].apply(self, args);
      }
    },

    /**
     * Calls any registered hooks for the provided filter.
     *
     * @memberof    mixitup.Base
     * @private
     * @instance
     * @since       2.0.0
     * @param       {string}    filterName
     * @param       {*}         input
     * @param       {Array<*>}  args
     * @return      {*}
     */
    callFilters: function callFilters(filterName, input, args) {
      var self = this,
          hooks = self.constructor.filters[filterName],
          output = input,
          extensionName = '';
      if (!hooks || h.isEmptyObject(hooks)) return output;
      args = args || [];

      for (extensionName in hooks) {
        args = h.arrayFromList(args);
        args.unshift(output);
        output = hooks[extensionName].apply(self, args);
      }

      return output;
    }
  };
  /**
   * The BaseStatic class holds a set of static methods which are then added to all other
   * extensible MixItUp classes as a means of integrating extensions via the addition of new
   * methods and/or actions and hooks.
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.BaseStatic = function () {
    this.actions = {};
    this.filters = {};
    /**
     * Performs a shallow extend on the class's prototype, adding one or more new members to
     * the class in a single operation.
     *
     * @memberof    mixitup.BaseStatic
     * @public
     * @static
     * @since       2.1.0
     * @param       {object} extension
     * @return      {void}
     */

    this.extend = function (extension) {
      h.extend(this.prototype, extension);
    };
    /**
     * Registers a function to be called on the action hook of the provided name.
     *
     * @memberof    mixitup.BaseStatic
     * @public
     * @static
     * @since       2.1.0
     * @param       {string}    hookName
     * @param       {string}    extensionName
     * @param       {function}  func
     * @return      {void}
     */


    this.registerAction = function (hookName, extensionName, func) {
      (this.actions[hookName] = this.actions[hookName] || {})[extensionName] = func;
    };
    /**
     * Registers a function to be called on the filter of the provided name.
     *
     * @memberof    mixitup.BaseStatic
     * @public
     * @static
     * @since       2.1.0
     * @param       {string}    hookName
     * @param       {string}    extensionName
     * @param       {function}  func
     * @return      {void}
     */


    this.registerFilter = function (hookName, extensionName, func) {
      (this.filters[hookName] = this.filters[hookName] || {})[extensionName] = func;
    };
  };
  /**
   * The `mixitup.Features` class performs all feature and CSS prefix detection
   * neccessary for MixItUp to function correctly, as well as storing various
   * string and array constants. All feature decection is on evaluation of the
   * library and stored in a singleton instance for use by other internal classes.
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */


  _mixitup.Features = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.boxSizingPrefix = '';
    this.transformPrefix = '';
    this.transitionPrefix = '';
    this.boxSizingPrefix = '';
    this.transformProp = '';
    this.transformRule = '';
    this.transitionProp = '';
    this.perspectiveProp = '';
    this.perspectiveOriginProp = '';
    this.has = new _mixitup.Has();
    this.canary = null;
    this.BOX_SIZING_PROP = 'boxSizing';
    this.TRANSITION_PROP = 'transition';
    this.TRANSFORM_PROP = 'transform';
    this.PERSPECTIVE_PROP = 'perspective';
    this.PERSPECTIVE_ORIGIN_PROP = 'perspectiveOrigin';
    this.VENDORS = ['Webkit', 'moz', 'O', 'ms'];
    this.TWEENABLE = ['opacity', 'width', 'height', 'marginRight', 'marginBottom', 'x', 'y', 'scale', 'translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ'];
    this.callActions('afterConstruct');
  };

  _mixitup.BaseStatic.call(_mixitup.Features);

  _mixitup.Features.prototype = Object.create(_mixitup.Base.prototype);
  h.extend(_mixitup.Features.prototype,
  /** @lends mixitup.Features */
  {
    constructor: _mixitup.Features,

    /**
     * @private
     * @return  {void}
     */
    init: function init() {
      var self = this;
      self.callActions('beforeInit', arguments);
      self.canary = document.createElement('div');
      self.setPrefixes();
      self.runTests();
      self.callActions('beforeInit', arguments);
    },

    /**
     * @private
     * @return  {void}
     */
    runTests: function runTests() {
      var self = this;
      self.callActions('beforeRunTests', arguments);
      self.has.promises = typeof window.Promise === 'function';
      self.has.transitions = self.transitionPrefix !== 'unsupported';
      self.callActions('afterRunTests', arguments);
      h.freeze(self.has);
    },

    /**
     * @private
     * @return  {void}
     */
    setPrefixes: function setPrefixes() {
      var self = this;
      self.callActions('beforeSetPrefixes', arguments);
      self.transitionPrefix = h.getPrefix(self.canary, 'Transition', self.VENDORS);
      self.transformPrefix = h.getPrefix(self.canary, 'Transform', self.VENDORS);
      self.boxSizingPrefix = h.getPrefix(self.canary, 'BoxSizing', self.VENDORS);
      self.boxSizingProp = self.boxSizingPrefix ? self.boxSizingPrefix + h.pascalCase(self.BOX_SIZING_PROP) : self.BOX_SIZING_PROP;
      self.transitionProp = self.transitionPrefix ? self.transitionPrefix + h.pascalCase(self.TRANSITION_PROP) : self.TRANSITION_PROP;
      self.transformProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.TRANSFORM_PROP) : self.TRANSFORM_PROP;
      self.transformRule = self.transformPrefix ? '-' + self.transformPrefix + '-' + self.TRANSFORM_PROP : self.TRANSFORM_PROP;
      self.perspectiveProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.PERSPECTIVE_PROP) : self.PERSPECTIVE_PROP;
      self.perspectiveOriginProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.PERSPECTIVE_ORIGIN_PROP) : self.PERSPECTIVE_ORIGIN_PROP;
      self.callActions('afterSetPrefixes', arguments);
    }
  });
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.Has = function () {
    this.transitions = false;
    this.promises = false;
    h.seal(this);
  }; // Assign a singleton instance to `mixitup.features` and initialise:


  _mixitup.features = new _mixitup.Features();

  _mixitup.features.init();
  /**
   * A group of properties defining the mixer's animation and effects settings.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        animation
   * @namespace
   * @public
   * @since       2.0.0
   */


  _mixitup.ConfigAnimation = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A boolean dictating whether or not animation should be enabled for the MixItUp instance.
     * If `false`, all operations will occur instantly and syncronously, although callback
     * functions and any returned promises will still be fulfilled.
     *
     * @example <caption>Example: Create a mixer with all animations disabled</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         enable: false
     *     }
     * });
     *
     * @name        enable
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.enable = true;
    /**
     * A string of one or more space-seperated properties to which transitions will be
     * applied for all filtering animations.
     *
     * Properties can be listed any order or combination, although they will be applied in a specific
     * predefined order to produce consistent results.
     *
     * To learn more about available effects, experiment with our <a href="https://www.kunkalabs.com/mixitup/">
     * sandbox demo</a> and try out the "Export config" button in the Animation options drop down.
     *
     * @example <caption>Example: Apply "fade" and "translateZ" effects to all animations</caption>
     * // As targets are filtered in and out, they will fade between
     * // opacity 1 and 0 and transform between translateZ(-100px) and
     * // translateZ(0).
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effects: 'fade translateZ(-100px)'
     *     }
     * });
     *
     * @name        effects
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {string}
     * @default     'fade scale'
     */

    this.effects = 'fade scale';
    /**
     * A string of one or more space-seperated effects to be applied only to filter-in
     * animations, overriding `config.animation.effects` if set.
     *
     * @example <caption>Example: Apply downwards vertical translate to targets being filtered in</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effectsIn: 'fade translateY(-100%)'
     *     }
     * });
     *
     * @name        effectsIn
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {string}
     * @default     ''
     */

    this.effectsIn = '';
    /**
     * A string of one or more space-seperated effects to be applied only to filter-out
     * animations, overriding `config.animation.effects` if set.
     *
     * @example <caption>Example: Apply upwards vertical translate to targets being filtered out</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effectsOut: 'fade translateY(-100%)'
     *     }
     * });
     *
     * @name        effectsOut
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {string}
     * @default     ''
     */

    this.effectsOut = '';
    /**
     * An integer dictating the duration of all MixItUp animations in milliseconds, not
     * including any additional delay apllied via the `'stagger'` effect.
     *
     * @example <caption>Example: Apply an animation duration of 200ms to all mixitup animations</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         duration: 200
     *     }
     * });
     *
     * @name        duration
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {number}
     * @default     600
     */

    this.duration = 600;
    /**
     * A valid CSS3 transition-timing function or shorthand. For a full list of accepted
     * values, visit <a href="http://easings.net" target="_blank">easings.net</a>.
     *
     * @example <caption>Example 1: Apply "ease-in-out" easing to all animations</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         easing: 'ease-in-out'
     *     }
     * });
     *
     * @example <caption>Example 2: Apply a custom "cubic-bezier" easing function to all animations</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         easing: 'cubic-bezier(0.645, 0.045, 0.355, 1)'
     *     }
     * });
     *
     * @name        easing
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {string}
     * @default     'ease'
     */

    this.easing = 'ease';
    /**
     * A boolean dictating whether or not to apply perspective to the MixItUp container
     * during animations. By default, perspective is always applied and creates the
     * illusion of three-dimensional space for effects such as `translateZ`, `rotateX`,
     * and `rotateY`.
     *
     * You may wish to disable this and define your own perspective settings via CSS.
     *
     * @example <caption>Example: Prevent perspective from being applied to any 3D transforms</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         applyPerspective: false
     *     }
     * });
     *
     * @name        applyPerspective
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {bolean}
     * @default     true
     */

    this.applyPerspective = true;
    /**
     * The perspective distance value to be applied to the container during animations,
     * affecting any 3D-transform-based effects.
     *
     * @example <caption>Example: Set a perspective distance of 2000px</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effects: 'rotateY(-25deg)',
     *         perspectiveDistance: '2000px'
     *     }
     * });
     *
     * @name        perspectiveDistance
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {string}
     * @default     '3000px'
     */

    this.perspectiveDistance = '3000px';
    /**
     * The perspective-origin value to be applied to the container during animations,
     * affecting any 3D-transform-based effects.
     *
     * @example <caption>Example: Set a perspective origin in the top-right of the container</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effects: 'transateZ(-200px)',
     *         perspectiveOrigin: '100% 0'
     *     }
     * });
     *
     * @name        perspectiveOrigin
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {string}
     * @default     '50% 50%'
     */

    this.perspectiveOrigin = '50% 50%';
    /**
     * A boolean dictating whether or not to enable the queuing of operations.
     *
     * If `true` (default), and a control is clicked or an API call is made while another
     * operation is progress, the operation will go into the queue and will be automatically exectuted
     * when the previous operaitons is finished.
     *
     * If `false`, any requested operations will be ignored, and the `onMixBusy` callback and `mixBusy`
     * event will be fired. If `debug.showWarnings` is enabled, a console warning will also occur.
     *
     * @example <caption>Example: Disable queuing</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         queue: false
     *     }
     * });
     *
     * @name        queue
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.queue = true;
    /**
     * An integer dictacting the maximum number of operations allowed in the queue at
     * any time, when queuing is enabled.
     *
     * @example <caption>Example: Allow a maximum of 5 operations in the queue at any time</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         queueLimit: 5
     *     }
     * });
     *
     * @name        queueLimit
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {number}
     * @default     3
     */

    this.queueLimit = 3;
    /**
     * A boolean dictating whether or not to transition the height and width of the
     * container as elements are filtered in and out. If disabled, the container height
     * will change abruptly.
     *
     * It may be desirable to disable this on mobile devices as the CSS `height` and
     * `width` properties do not receive GPU-acceleration and can therefore cause stuttering.
     *
     * @example <caption>Example 1: Disable the transitioning of the container height and/or width</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         animateResizeContainer: false
     *     }
     * });
     *
     * @example <caption>Example 2: Disable the transitioning of the container height and/or width for mobile devices only</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         animateResizeContainer: myFeatureTests.isMobile ? false : true
     *     }
     * });
     *
     * @name        animateResizeContainer
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.animateResizeContainer = true;
    /**
     * A boolean dictating whether or not to transition the height and width of target
     * elements as they change throughout the course of an animation.
     *
     * This is often a must for flex-box grid layouts where the size of target elements may change
     * depending on final their position in relation to their siblings, or for `.changeLayout()`
     * operations where the size of targets change between layouts.
     *
     * NB: This feature requires additional calculations and manipulation to non-hardware-accelerated
     * properties which may adversely affect performance on slower devices, and is therefore
     * disabled by default.
     *
     * @example <caption>Example: Enable the transitioning of target widths and heights</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         animateResizeTargets: true
     *     }
     * });
     *
     * @name        animateResizeTargets
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     false
     */

    this.animateResizeTargets = false;
    /**
     * A custom function used to manipulate the order in which the stagger delay is
     * incremented when using the ‘stagger’ effect.
     *
     * When using the 'stagger' effect, the delay applied to each target element is incremented
     * based on its index. You may create a custom function to manipulate the order in which the
     * delay is incremented and create engaging non-linear stagger effects.
     *
     * The function receives the index of the target element as a parameter, and must
     * return an integer which serves as the multiplier for the stagger delay.
     *
     * @example <caption>Example 1: Stagger target elements by column in a 3-column grid</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effects: 'fade stagger(100ms)',
     *         staggerSequence: function(i) {
     *             return i % 3;
     *         }
     *     }
     * });
     *
     * @example <caption>Example 2: Using an algorithm to produce a more complex sequence</caption>
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effects: 'fade stagger(100ms)',
     *         staggerSequence: function(i) {
     *             return (2*i) - (5*((i/3) - ((1/3) * (i%3))));
     *         }
     *     }
     * });
     *
     * @name        staggerSequence
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {function}
     * @default     null
     */

    this.staggerSequence = null;
    /**
     * A boolean dictating whether or not to reverse the direction of `translate`
     * and `rotate` transforms for elements being filtered out.
     *
     * It can be used to create carousel-like animations where elements enter and exit
     * from opposite directions. If enabled, the effect `translateX(-100%)` for elements
     * being filtered in would become `translateX(100%)` for targets being filtered out.
     *
     * This functionality can also be achieved by providing seperate effects
     * strings for `config.animation.effectsIn` and `config.animation.effectsOut`.
     *
     * @example <caption>Example: Reverse the desired direction on any translate/rotate effect for targets being filtered out</caption>
     * // Elements being filtered in will be translated from '100%' to '0' while
     * // elements being filtered out will be translated from 0 to '-100%'
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         effects: 'fade translateX(100%)',
     *         reverseOut: true,
     *         nudge: false // Disable nudging to create a carousel-like effect
     *     }
     * });
     *
     * @name        reverseOut
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     false
     */

    this.reverseOut = false;
    /**
     * A boolean dictating whether or not to "nudge" the animation path of targets
     * when they are being filtered in and out simulatenously.
     *
     * This has been the default behavior of MixItUp since version 1, but it
     * may be desirable to disable this effect when filtering directly from
     * one exclusive set of targets to a different exclusive set of targets,
     * to create a carousel-like effect, or a generally more subtle animation.
     *
     * @example <caption>Example: Disable the "nudging" of targets being filtered in and out simulatenously</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         nudge: false
     *     }
     * });
     *
     * @name        nudge
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.nudge = true;
    /**
     * A boolean dictating whether or not to clamp the height of the container while MixItUp's
     * geometry tests are carried out before an operation.
     *
     * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the
     * height of the container might affect its vertical positioning in the viewport
     * (e.g. a vertically-centered container), this should be turned off to ensure accurate
     * test results and a smooth animation.
     *
     * @example <caption>Example: Disable container height-clamping</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         clampHeight: false
     *     }
     * });
     *
     * @name        clampHeight
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.clampHeight = true;
    /**
     * A boolean dictating whether or not to clamp the width of the container while MixItUp's
     * geometry tests are carried out before an operation.
     *
     * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the
     * width of the container might affect its horitzontal positioning in the viewport
     * (e.g. a horizontall-centered container), this should be turned off to ensure accurate
     * test results and a smooth animation.
     *
     * @example <caption>Example: Disable container width-clamping</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     animation: {
     *         clampWidth: false
     *     }
     * });
     *
     * @name        clampWidth
     * @memberof    mixitup.Config.animation
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.clampWidth = true;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigAnimation);

  _mixitup.ConfigAnimation.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigAnimation.prototype.constructor = _mixitup.ConfigAnimation;
  /**
   * A group of properties relating to the behavior of the Mixer.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        behavior
   * @namespace
   * @public
   * @since       3.1.12
   */

  _mixitup.ConfigBehavior = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A boolean dictating whether to allow "live" sorting of the mixer.
     *
     * Because of the expensive nature of sorting, MixItUp makes use of several
     * internal optimizations to skip redundant sorting operations, such as when
     * the newly requested sort command is the same as the active one. The caveat
     * to this optimization is that "live" edits to the value of a target's sorting
     * attribute will be ignored when requesting a re-sort by the same attribute.
     *
     * By setting to `behavior.liveSort` to `true`, the mixer will always re-sort
     * regardless of whether or not the sorting attribute and order have changed.
     *
     * @example <caption>Example: Enabling `liveSort` to allow for re-sorting</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     behavior: {
     *         liveSort: true
     *     },
     *     load: {
     *         sort: 'edited:desc'
     *     }
     * });
     *
     * var target = containerEl.children[3];
     *
     * console.log(target.getAttribute('data-edited')); // '2015-04-24'
     *
     * target.setAttribute('data-edited', '2017-08-10'); // Update the target's edited date
     *
     * mixer.sort('edited:desc')
     *     .then(function(state) {
     *         // The target is now at the top of the list
     *
     *         console.log(state.targets[0] === target); // true
     *     });
     *
     * @name        liveSort
     * @memberof    mixitup.Config.behavior
     * @instance
     * @type        {boolean}
     * @default     false
     */

    this.liveSort = false;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigBehavior);

  _mixitup.ConfigBehavior.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigBehavior.prototype.constructor = _mixitup.ConfigBehavior;
  /**
   * A group of optional callback functions to be invoked at various
   * points within the lifecycle of a mixer operation.
   *
   * Each function is analogous to an event of the same name triggered from the
   * container element, and is invoked immediately after it.
   *
   * All callback functions receive the current `state` object as their first
   * argument, as well as other more specific arguments described below.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        callbacks
   * @namespace
   * @public
   * @since       2.0.0
   */

  _mixitup.ConfigCallbacks = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A callback function invoked immediately after any MixItUp operation is requested
     * and before animations have begun.
     *
     * A second `futureState` argument is passed to the function which represents the final
     * state of the mixer once the requested operation has completed.
     *
     * @example <caption>Example: Adding an `onMixStart` callback function</caption>
     * var mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixStart: function(state, futureState) {
     *              console.log('Starting operation...');
     *         }
     *     }
     * });
     *
     * @name        onMixStart
     * @memberof    mixitup.Config.callbacks
     * @instance
     * @type        {function}
     * @default     null
     */

    this.onMixStart = null;
    /**
     * A callback function invoked when a MixItUp operation is requested while another
     * operation is in progress, and the animation queue is full, or queueing
     * is disabled.
     *
     * @example <caption>Example: Adding an `onMixBusy` callback function</caption>
     * var mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixBusy: function(state) {
     *              console.log('Mixer busy');
     *         }
     *     }
     * });
     *
     * @name        onMixBusy
     * @memberof    mixitup.Config.callbacks
     * @instance
     * @type        {function}
     * @default     null
     */

    this.onMixBusy = null;
    /**
     * A callback function invoked after any MixItUp operation has completed, and the
     * state has been updated.
     *
     * @example <caption>Example: Adding an `onMixEnd` callback function</caption>
     * var mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixEnd: function(state) {
     *              console.log('Operation complete');
     *         }
     *     }
     * });
     *
     * @name        onMixEnd
     * @memberof    mixitup.Config.callbacks
     * @instance
     * @type        {function}
     * @default     null
     */

    this.onMixEnd = null;
    /**
     * A callback function invoked whenever an operation "fails", i.e. no targets
     * could be found matching the requested filter.
     *
     * @example <caption>Example: Adding an `onMixFail` callback function</caption>
     * var mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixFail: function(state) {
     *              console.log('No items could be found matching the requested filter');
     *         }
     *     }
     * });
     *
     * @name        onMixFail
     * @memberof    mixitup.Config.callbacks
     * @instance
     * @type        {function}
     * @default     null
     */

    this.onMixFail = null;
    /**
     * A callback function invoked whenever a MixItUp control is clicked, and before its
     * respective operation is requested.
     *
     * The clicked element is assigned to the `this` keyword within the function. The original
     * click event is passed to the function as the second argument, which can be useful if
     * using `<a>` tags as controls where the default behavior needs to be prevented.
     *
     * Returning `false` from the callback will prevent the control click from triggering
     * an operation.
     *
     * @example <caption>Example 1: Adding an `onMixClick` callback function</caption>
     * var mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixClick: function(state, originalEvent) {
     *              console.log('The control "' + this.innerText + '" was clicked');
     *         }
     *     }
     * });
     *
     * @example <caption>Example 2: Using `onMixClick` to manipulate the original click event</caption>
     * var mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixClick: function(state, originalEvent) {
     *              // Prevent original click event from bubbling up:
     *              originalEvent.stopPropagation();
     *
     *              // Prevent default behavior of clicked element:
     *              originalEvent.preventDefault();
     *         }
     *     }
     * });
     *
     * @example <caption>Example 3: Using `onMixClick` to conditionally cancel operations</caption>
     * var mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixClick: function(state, originalEvent) {
     *              // Perform some conditional check:
     *
     *              if (myApp.isLoading) {
     *                  // By returning false, we can prevent the control click from triggering an operation.
     *
     *                  return false;
     *              }
     *         }
     *     }
     * });
     *
     * @name        onMixClick
     * @memberof    mixitup.Config.callbacks
     * @instance
     * @type        {function}
     * @default     null
     */

    this.onMixClick = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigCallbacks);

  _mixitup.ConfigCallbacks.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigCallbacks.prototype.constructor = _mixitup.ConfigCallbacks;
  /**
   * A group of properties relating to clickable control elements.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        controls
   * @namespace
   * @public
   * @since       2.0.0
   */

  _mixitup.ConfigControls = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A boolean dictating whether or not controls should be enabled for the mixer instance.
     *
     * If `true` (default behavior), MixItUp will search the DOM for any clickable elements with
     * `data-filter`, `data-sort` or `data-toggle` attributes, and bind them for click events.
     *
     * If `false`, no click handlers will be bound, and all functionality must therefore be performed
     * via the mixer's API methods.
     *
     * If you do not intend to use the default controls, setting this property to `false` will
     * marginally improve the startup time of your mixer instance, and will also prevent any other active
     * mixer instances in the DOM which are bound to controls from controlling the instance.
     *
     * @example <caption>Example: Disabling controls</caption>
     * var mixer = mixitup(containerEl, {
     *     controls: {
     *         enable: false
     *     }
     * });
     *
     * // With the default controls disabled, we can only control
     * // the mixer via its API methods, e.g.:
     *
     * mixer.filter('.cat-1');
     *
     * @name        enable
     * @memberof    mixitup.Config.controls
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.enable = true;
    /**
     * A boolean dictating whether or not to use event delegation when binding click events
     * to the default controls.
     *
     * If `false` (default behavior), each control button in the DOM will be found and
     * individually bound when a mixer is instantiated, with their corresponding actions
     * cached for performance.
     *
     * If `true`, a single click handler will be applied to the `window` (or container element - see
     * `config.controls.scope`), and any click events triggered by elements with `data-filter`,
     * `data-sort` or `data-toggle` attributes present will be handled as they propagate upwards.
     *
     * If you require a user interface where control buttons may be added, removed, or changed during the
     * lifetime of a mixer, `controls.live` should be set to `true`. There is a marginal but unavoidable
     * performance deficit when using live controls, as the value of each control button must be read
     * from the DOM in real time once the click event has propagated.
     *
     * @example <caption>Example: Setting live controls</caption>
     * var mixer = mixitup(containerEl, {
     *     controls: {
     *         live: true
     *     }
     * });
     *
     * // Control buttons can now be added, remove and changed without breaking
     * // the mixer's UI
     *
     * @name        live
     * @memberof    mixitup.Config.controls
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.live = false;
    /**
     * A string dictating the "scope" to use when binding or querying the default controls. The available
     * values are `'global'` or `'local'`.
     *
     * When set to `'global'` (default behavior), MixItUp will query the entire document for control buttons
     * to bind, or delegate click events from (see `config.controls.live`).
     *
     * When set to `'local'`, MixItUp will only query (or bind click events to) its own container element.
     * This may be desireable if you require multiple active mixer instances within the same document, with
     * controls that would otherwise intefere with each other if scoped globally.
     *
     * Conversely, if you wish to control multiple instances with a single UI, you would create one
     * set of controls and keep the controls scope of each mixer set to `global`.
     *
     * @example <caption>Example: Setting 'local' scoped controls</caption>
     * var mixerOne = mixitup(containerOne, {
     *     controls: {
     *         scope: 'local'
     *     }
     * });
     *
     * var mixerTwo = mixitup(containerTwo, {
     *     controls: {
     *         scope: 'local'
     *     }
     * });
     *
     * // Both mixers can now exist within the same document with
     * // isolated controls placed within their container elements.
     *
     * @name        scope
     * @memberof    mixitup.Config.controls
     * @instance
     * @type        {string}
     * @default     'global'
     */

    this.scope = 'global'; // enum: ['local' ,'global']

    /**
     * A string dictating the type of logic to apply when concatenating the filter selectors of
     * active toggle buttons (i.e. any clickable element with a `data-toggle` attribute).
     *
     * If set to `'or'` (default behavior), selectors will be concatenated together as
     * a comma-seperated list. For example:
     *
     * `'.cat-1, .cat-2'` (shows any elements matching `'.cat-1'` OR `'.cat-2'`)
     *
     * If set to `'and'`, selectors will be directly concatenated together. For example:
     *
     * `'.cat-1.cat-2'` (shows any elements which match both `'.cat-1'` AND `'.cat-2'`)
     *
     * @example <caption>Example: Setting "and" toggle logic</caption>
     * var mixer = mixitup(containerEl, {
     *     controls: {
     *         toggleLogic: 'and'
     *     }
     * });
     *
     * @name        toggleLogic
     * @memberof    mixitup.Config.controls
     * @instance
     * @type        {string}
     * @default     'or'
     */

    this.toggleLogic = 'or'; // enum: ['or', 'and']

    /**
     * A string dictating the filter behavior when all toggles are inactive.
     *
     * When set to `'all'` (default behavior), *all* targets will be shown by default
     * when no toggles are active, or at the moment all active toggles are toggled off.
     *
     * When set to `'none'`, no targets will be shown by default when no toggles are
     * active, or at the moment all active toggles are toggled off.
     *
     * @example <caption>Example 1: Setting the default toggle behavior to `'all'`</caption>
     * var mixer = mixitup(containerEl, {
     *     controls: {
     *         toggleDefault: 'all'
     *     }
     * });
     *
     * mixer.toggleOn('.cat-2')
     *     .then(function() {
     *         // Deactivate all active toggles
     *
     *         return mixer.toggleOff('.cat-2')
     *     })
     *     .then(function(state) {
     *          console.log(state.activeFilter.selector); // 'all'
     *          console.log(state.totalShow); // 12
     *     });
     *
     * @example <caption>Example 2: Setting the default toggle behavior to `'none'`</caption>
     * var mixer = mixitup(containerEl, {
     *     controls: {
     *         toggleDefault: 'none'
     *     }
     * });
     *
     * mixer.toggleOn('.cat-2')
     *     .then(function() {
     *         // Deactivate all active toggles
     *
     *         return mixer.toggleOff('.cat-2')
     *     })
     *     .then(function(state) {
     *          console.log(state.activeFilter.selector); // 'none'
     *          console.log(state.totalShow); // 0
     *     });
     *
     * @name        toggleDefault
     * @memberof    mixitup.Config.controls
     * @instance
     * @type        {string}
     * @default     'all'
     */

    this.toggleDefault = 'all'; // enum: ['all', 'none']

    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigControls);

  _mixitup.ConfigControls.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigControls.prototype.constructor = _mixitup.ConfigControls;
  /**
   * A group of properties defining the output and structure of class names programmatically
   * added to controls and containers to reflect the state of the mixer.
   *
   * Most commonly, class names are added to controls by MixItUp to indicate that
   * the control is active so that it can be styled accordingly - `'mixitup-control-active'` by default.
   *
   * Using a "BEM" like structure, each classname is broken into the three parts:
   * a block namespace (`'mixitup'`), an element name (e.g. `'control'`), and an optional modifier
   * name (e.g. `'active'`) reflecting the state of the element.
   *
   * By default, each part of the classname is concatenated together using single hyphens as
   * delineators, but this can be easily customised to match the naming convention and style of
   * your project.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        classNames
   * @namespace
   * @public
   * @since       3.0.0
   */

  _mixitup.ConfigClassNames = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * The "block" portion, or top-level namespace added to the start of any class names created by MixItUp.
     *
     * @example <caption>Example 1: changing the `config.classNames.block` value</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         block: 'portfolio'
     *     }
     * });
     *
     * // Active control output: "portfolio-control-active"
     *
     * @example <caption>Example 2: Removing `config.classNames.block`</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         block: ''
     *     }
     * });
     *
     * // Active control output: "control-active"
     *
     * @name        block
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'mixitup'
     */

    this.block = 'mixitup';
    /**
     * The "element" portion of the class name added to container.
     *
     * @name        elementContainer
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'container'
     */

    this.elementContainer = 'container';
    /**
     * The "element" portion of the class name added to filter controls.
     *
     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but
     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.
     *
     * @example <caption>Example 1: changing the `config.classNames.elementFilter` value</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         elementFilter: 'filter'
     *     }
     * });
     *
     * // Active filter output: "mixitup-filter-active"
     *
     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementFilter` values</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         block: 'portfolio',
     *         elementFilter: 'filter'
     *     }
     * });
     *
     * // Active filter output: "portfolio-filter-active"
     *
     * @name        elementFilter
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'control'
     */

    this.elementFilter = 'control';
    /**
     * The "element" portion of the class name added to sort controls.
     *
     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but
     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.
     *
     * @example <caption>Example 1: changing the `config.classNames.elementSort` value</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         elementSort: 'sort'
     *     }
     * });
     *
     * // Active sort output: "mixitup-sort-active"
     *
     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementSort` values</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         block: 'portfolio',
     *         elementSort: 'sort'
     *     }
     * });
     *
     * // Active sort output: "portfolio-sort-active"
     *
     * @name        elementSort
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'control'
     */

    this.elementSort = 'control';
    /**
     * The "element" portion of the class name added to multimix controls.
     *
     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but
     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.
     *
     * @example <caption>Example 1: changing the `config.classNames.elementMultimix` value</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         elementMultimix: 'multimix'
     *     }
     * });
     *
     * // Active multimix output: "mixitup-multimix-active"
     *
     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementMultimix` values</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         block: 'portfolio',
     *         elementSort: 'multimix'
     *     }
     * });
     *
     * // Active multimix output: "portfolio-multimix-active"
     *
     * @name        elementMultimix
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'control'
     */

    this.elementMultimix = 'control';
    /**
     * The "element" portion of the class name added to toggle controls.
     *
     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but
     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.
     *
     * @example <caption>Example 1: changing the `config.classNames.elementToggle` value</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         elementToggle: 'toggle'
     *     }
     * });
     *
     * // Active toggle output: "mixitup-toggle-active"
     *
     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementToggle` values</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         block: 'portfolio',
     *         elementToggle: 'toggle'
     *     }
     * });
     *
     * // Active toggle output: "portfolio-toggle-active"
     *
     * @name        elementToggle
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'control'
     */

    this.elementToggle = 'control';
    /**
     * The "modifier" portion of the class name added to active controls.
     * @name        modifierActive
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'active'
     */

    this.modifierActive = 'active';
    /**
     * The "modifier" portion of the class name added to disabled controls.
     *
     * @name        modifierDisabled
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'disabled'
     */

    this.modifierDisabled = 'disabled';
    /**
     * The "modifier" portion of the class name added to the container when in a "failed" state.
     *
     * @name        modifierFailed
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     'failed'
     */

    this.modifierFailed = 'failed';
    /**
     * The delineator used between the "block" and "element" portions of any class name added by MixItUp.
     *
     * If the block portion is ommited by setting it to an empty string, no delineator will be added.
     *
     * @example <caption>Example: changing the delineator to match BEM convention</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         delineatorElement: '__'
     *     }
     * });
     *
     * // example active control output: "mixitup__control-active"
     *
     * @name        delineatorElement
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     '-'
     */

    this.delineatorElement = '-';
    /**
     * The delineator used between the "element" and "modifier" portions of any class name added by MixItUp.
     *
     * If the element portion is ommited by setting it to an empty string, no delineator will be added.
     *
     * @example <caption>Example: changing both delineators to match BEM convention</caption>
     * var mixer = mixitup(containerEl, {
     *     classNames: {
     *         delineatorElement: '__'
     *         delineatorModifier: '--'
     *     }
     * });
     *
     * // Active control output: "mixitup__control--active"
     *
     * @name        delineatorModifier
     * @memberof    mixitup.Config.classNames
     * @instance
     * @type        {string}
     * @default     '-'
     */

    this.delineatorModifier = '-';
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigClassNames);

  _mixitup.ConfigClassNames.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigClassNames.prototype.constructor = _mixitup.ConfigClassNames;
  /**
   * A group of properties relating to MixItUp's dataset API.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        data
   * @namespace
   * @public
   * @since       3.0.0
   */

  _mixitup.ConfigData = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A string specifying the name of the key containing your data model's unique
     * identifier (UID). To use the dataset API, a UID key must be specified and
     * be present and unique on all objects in the dataset you provide to MixItUp.
     *
     * For example, if your dataset is made up of MongoDB documents, the UID
     * key would be `'id'` or `'_id'`.
     *
     * @example <caption>Example: Setting the UID to `'id'`</caption>
     * var mixer = mixitup(containerEl, {
     *     data: {
     *         uidKey: 'id'
     *     }
     * });
     *
     * @name        uidKey
     * @memberof    mixitup.Config.data
     * @instance
     * @type        {string}
     * @default     ''
     */

    this.uidKey = '';
    /**
     * A boolean dictating whether or not MixItUp should "dirty check" each object in
     * your dataset for changes whenever `.dataset()` is called, and re-render any targets
     * for which a change is found.
     *
     * Depending on the complexity of your data model, dirty checking can be expensive
     * and is therefore disabled by default.
     *
     * NB: For changes to be detected, a new immutable instance of the edited model must be
     * provided to mixitup, rather than manipulating properties on the existing instance.
     * If your changes are a result of a DB write and read, you will most likely be calling
     * `.dataset()` with a clean set of objects each time, so this will not be an issue.
     *
     * @example <caption>Example: Enabling dirty checking</caption>
     *
     * var myDataset = [
     *     {
     *         id: 0,
     *         title: "Blog Post Title 0"
     *         ...
     *     },
     *     {
     *         id: 1,
     *         title: "Blog Post Title 1"
     *         ...
     *     }
     * ];
     *
     * // Instantiate a mixer with a pre-loaded dataset, and a target renderer
     * // function defined
     *
     * var mixer = mixitup(containerEl, {
     *     data: {
     *         uidKey: 'id',
     *         dirtyCheck: true
     *     },
     *     load: {
     *         dataset: myDataset
     *     },
     *     render: {
     *         target: function() { ... }
     *     }
     * });
     *
     * // For illustration, we will clone and edit the second object in the dataset.
     * // NB: this would typically be done server-side in response to a DB update,
     * and then re-queried via an API.
     *
     * myDataset[1] = Object.assign({}, myDataset[1]);
     *
     * myDataset[1].title = 'Blog Post Title 11';
     *
     * mixer.dataset(myDataset)
     *    .then(function() {
     *        // the target with ID "1", will be re-rendered reflecting its new title
     *    });
     *
     * @name        dirtyCheck
     * @memberof    mixitup.Config.data
     * @instance
     * @type        {boolean}
     * @default     false
     */

    this.dirtyCheck = false;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigData);

  _mixitup.ConfigData.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigData.prototype.constructor = _mixitup.ConfigData;
  /**
   * A group of properties allowing the toggling of various debug features.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        debug
   * @namespace
   * @public
   * @since       3.0.0
   */

  _mixitup.ConfigDebug = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A boolean dictating whether or not the mixer instance returned by the
     * `mixitup()` factory function should expose private properties and methods.
     *
     * By default, mixer instances only expose their public API, but enabling
     * debug mode will give you access to various mixer internals which may aid
     * in debugging, or the authoring of extensions.
     *
     * @example <caption>Example: Enabling debug mode</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     debug: {
     *         enable: true
     *     }
     * });
     *
     * // Private properties and methods will now be visible on the mixer instance:
     *
     * console.log(mixer);
     *
     * @name        enable
     * @memberof    mixitup.Config.debug
     * @instance
     * @type        {boolean}
     * @default     false
     */

    this.enable = false;
    /**
     * A boolean dictating whether or not warnings should be shown when various
     * common gotchas occur.
     *
     * Warnings are intended to provide insights during development when something
     * occurs that is not a fatal, but may indicate an issue with your integration,
     * and are therefore turned on by default. However, you may wish to disable
     * them in production.
     *
     * @example <caption>Example 1: Disabling warnings</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     debug: {
     *         showWarnings: false
     *     }
     * });
     *
     * @example <caption>Example 2: Disabling warnings based on environment</caption>
     *
     * var showWarnings = myAppConfig.environment === 'development' ? true : false;
     *
     * var mixer = mixitup(containerEl, {
     *     debug: {
     *         showWarnings: showWarnings
     *     }
     * });
     *
     * @name        showWarnings
     * @memberof    mixitup.Config.debug
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.showWarnings = true;
    /**
     * Used for server-side testing only.
     *
     * @private
     * @name        fauxAsync
     * @memberof    mixitup.Config.debug
     * @instance
     * @type        {boolean}
     * @default     false
     */

    this.fauxAsync = false;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigDebug);

  _mixitup.ConfigDebug.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigDebug.prototype.constructor = _mixitup.ConfigDebug;
  /**
   * A group of properties relating to the layout of the container.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        layout
   * @namespace
   * @public
   * @since       3.0.0
   */

  _mixitup.ConfigLayout = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A boolean dictating whether or not mixitup should query all descendants
     * of the container for targets, or only immediate children.
     *
     * By default, mixitup will query all descendants matching the
     * `selectors.target` selector when indexing targets upon instantiation.
     * This allows for targets to be nested inside a sub-container which is
     * useful when ring-fencing targets from locally scoped controls in your
     * markup (see `controls.scope`).
     *
     * However, if you are building a more complex UI requiring the nesting
     * of mixers within mixers, you will most likely want to limit targets to
     * immediate children of the container by setting this property to `false`.
     *
     * @example <caption>Example: Restricting targets to immediate children</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     layout: {
     *         allowNestedTargets: false
     *     }
     * });
     *
     * @name        allowNestedTargets
     * @memberof    mixitup.Config.layout
     * @instance
     * @type        {boolean}
     * @default     true
     */

    this.allowNestedTargets = true;
    /**
     * A string specifying an optional class name to apply to the container when in
     * its default state.
     *
     * By changing this class name or adding a class name to the container via the
     * `.changeLayout()` API method, the CSS layout of the container can be changed,
     * and MixItUp will attemp to gracefully animate the container and its targets
     * between states.
     *
     * @example <caption>Example 1: Specifying a container class name</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     layout: {
     *         containerClassName: 'grid'
     *     }
     * });
     *
     * @example <caption>Example 2: Changing the default class name with `.changeLayout()`</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     layout: {
     *         containerClassName: 'grid'
     *     }
     * });
     *
     * mixer.changeLayout('list')
     *     .then(function(state) {
     *          console.log(state.activeContainerClass); // "list"
     *     });
     *
     * @name        containerClassName
     * @memberof    mixitup.Config.layout
     * @instance
     * @type        {string}
     * @default     ''
     */

    this.containerClassName = '';
    /**
     * A reference to a non-target sibling element after which to insert targets
     * when there are no targets in the container.
     *
     * @example <caption>Example: Setting a `siblingBefore` reference element</caption>
     *
     * var addButton = containerEl.querySelector('button');
     *
     * var mixer = mixitup(containerEl, {
     *     layout: {
     *         siblingBefore: addButton
     *     }
     * });
     *
     * @name        siblingBefore
     * @memberof    mixitup.Config.layout
     * @instance
     * @type        {HTMLElement}
     * @default     null
     */

    this.siblingBefore = null;
    /**
     * A reference to a non-target sibling element before which to insert targets
     * when there are no targets in the container.
     *
     * @example <caption>Example: Setting an `siblingAfter` reference element</caption>
     *
     * var gap = containerEl.querySelector('.gap');
     *
     * var mixer = mixitup(containerEl, {
     *     layout: {
     *         siblingAfter: gap
     *     }
     * });
     *
     * @name        siblingAfter
     * @memberof    mixitup.Config.layout
     * @instance
     * @type        {HTMLElement}
     * @default     null
     */

    this.siblingAfter = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigLayout);

  _mixitup.ConfigLayout.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigLayout.prototype.constructor = _mixitup.ConfigLayout;
  /**
   * A group of properties defining the initial state of the mixer on load (instantiation).
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        load
   * @namespace
   * @public
   * @since       2.0.0
   */

  _mixitup.ConfigLoad = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A string defining any filtering to be statically applied to the mixer on load.
     * As per the `.filter()` API, this can be any valid selector string, or the
     * values `'all'` or `'none'`.
     *
     * @example <caption>Example 1: Defining an initial filter selector to be applied on load</caption>
     *
     * // The mixer will show only those targets matching '.category-a' on load.
     *
     * var mixer = mixitup(containerEl, {
     *     load: {
     *         filter: '.category-a'
     *     }
     * });
     *
     * @example <caption>Example 2: Hiding all targets on load</caption>
     *
     * // The mixer will show hide all targets on load.
     *
     * var mixer = mixitup(containerEl, {
     *     load: {
     *         filter: 'none'
     *     }
     * });
     *
     * @name        filter
     * @memberof    mixitup.Config.load
     * @instance
     * @type        {string}
     * @default     'all'
     */

    this.filter = 'all';
    /**
     * A string defining any sorting to be statically applied to the mixer on load.
     * As per the `.sort()` API, this should be a valid "sort string" made up of
     * an attribute to sort by (or `'default'`) followed by an optional sorting
     * order, or the value `'random'`;
     *
     * @example <caption>Example: Defining sorting to be applied on load</caption>
     *
     * // The mixer will sort the container by the value of the `data-published-date`
     * // attribute, in descending order.
     *
     * var mixer = mixitup(containerEl, {
     *     load: {
     *         sort: 'published-date:desc'
     *     }
     * });
     *
     * @name        sort
     * @memberof    mixitup.Config.load
     * @instance
     * @type        {string}
     * @default     'default:asc'
     */

    this.sort = 'default:asc';
    /**
     * An array of objects representing the underlying data of any pre-rendered targets,
     * when using the `.dataset()` API.
     *
     * NB: If targets are pre-rendered when the mixer is instantiated, this must be set.
     *
     * @example <caption>Example: Defining the initial underyling dataset</caption>
     *
     * var myDataset = [
     *     {
     *         id: 0,
     *         title: "Blog Post Title 0",
     *         ...
     *     },
     *     {
     *         id: 1,
     *         title: "Blog Post Title 1",
     *         ...
     *     }
     * ];
     *
     * var mixer = mixitup(containerEl, {
     *     data: {
     *         uidKey: 'id'
     *     },
     *     load: {
     *         dataset: myDataset
     *     }
     * });
     *
     * @name        dataset
     * @memberof    mixitup.Config.load
     * @instance
     * @type        {Array.<object>}
     * @default     null
     */

    this.dataset = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigLoad);

  _mixitup.ConfigLoad.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigLoad.prototype.constructor = _mixitup.ConfigLoad;
  /**
   * A group of properties defining the selectors used to query elements within a mixitup container.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        selectors
   * @namespace
   * @public
   * @since       3.0.0
   */

  _mixitup.ConfigSelectors = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A selector string used to query and index target elements within the container.
     *
     * By default, the class selector `'.mix'` is used, but this can be changed to an
     * attribute or element selector to match the style of your project.
     *
     * @example <caption>Example 1: Changing the target selector</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     selectors: {
     *         target: '.portfolio-item'
     *     }
     * });
     *
     * @example <caption>Example 2: Using an attribute selector as a target selector</caption>
     *
     * // The mixer will search for any children with the attribute `data-ref="mix"`
     *
     * var mixer = mixitup(containerEl, {
     *     selectors: {
     *         target: '[data-ref="mix"]'
     *     }
     * });
     *
     * @name        target
     * @memberof    mixitup.Config.selectors
     * @instance
     * @type        {string}
     * @default     '.mix'
     */

    this.target = '.mix';
    /**
     * A optional selector string used to add further specificity to the querying of control elements,
     * in addition to their mandatory data attribute (e.g. `data-filter`, `data-toggle`, `data-sort`).
     *
     * This can be used if other elements in your document must contain the above attributes
     * (e.g. for use in third-party scripts), and would otherwise interfere with MixItUp. Adding
     * an additional `control` selector of your choice allows MixItUp to restrict event handling
     * to only those elements matching the defined selector.
     *
     * @name        control
     * @memberof    mixitup.Config.selectors
     * @instance
     * @type        {string}
     * @default     ''
     *
     * @example <caption>Example 1: Adding a `selectors.control` selector</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     selectors: {
     *         control: '.mixitup-control'
     *     }
     * });
     *
     * // Will not be handled:
     * // <button data-filter=".category-a"></button>
     *
     * // Will be handled:
     * // <button class="mixitup-control" data-filter=".category-a"></button>
     */

    this.control = '';
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigSelectors);

  _mixitup.ConfigSelectors.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigSelectors.prototype.constructor = _mixitup.ConfigSelectors;
  /**
   * A group of optional render functions for creating and updating elements.
   *
   * All render functions receive a data object, and should return a valid HTML string.
   *
   * @constructor
   * @memberof    mixitup.Config
   * @name        render
   * @namespace
   * @public
   * @since       3.0.0
   */

  _mixitup.ConfigRender = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A function returning an HTML string representing a target element, or a reference to a
     * single DOM element.
     *
     * The function is invoked as part of the `.dataset()` API, whenever a new item is added
     * to the dataset, or an item in the dataset changes (if `dataset.dirtyCheck` is enabled).
     *
     * The function receives the relevant dataset item as its first parameter.
     *
     * @example <caption>Example 1: Using string concatenation</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     render: {
     *         target: function(item) {
     *             return (
     *                 '&lt;div class="mix"&gt;' +
     *                     '&lt;h2&gt;' + item.title + '&lt;/h2&gt;' +
     *                 '&lt;/div&gt;'
     *             );
     *         }
     *     }
     * });
     *
     * @example <caption>Example 2: Using an ES2015 template literal</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     render: {
     *         target: function(item) {
     *             return (
     *                 `&lt;div class="mix"&gt;
     *                     &lt;h2&gt;${item.title}&lt;/h2&gt;
     *                  &lt;/div&gt;`
     *             );
     *         }
     *     }
     * });
     *
     * @example <caption>Example 3: Using a Handlebars template</caption>
     *
     * var targetTemplate = Handlebars.compile('&lt;div class="mix"&gt;&lt;h2&gt;{{title}}&lt;/h2&gt;&lt;/div&gt;');
     *
     * var mixer = mixitup(containerEl, {
     *     render: {
     *         target: targetTemplate
     *     }
     * });
     *
     * @example <caption>Example 4: Returning a DOM element</caption>
     *
     * var mixer = mixitup(containerEl, {
     *     render: {
     *         target: function(item) {
     *              // Create a single element using your framework's built-in renderer
     *
     *              var el = ...
     *
     *              return el;
     *         }
     *     }
     * });
     *
     * @name        target
     * @memberof    mixitup.Config.render
     * @instance
     * @type        {function}
     * @default     'null'
     */

    this.target = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigRender);

  _mixitup.ConfigRender.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigRender.prototype.constructor = _mixitup.ConfigRender;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.ConfigTemplates = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ConfigTemplates);

  _mixitup.ConfigTemplates.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ConfigTemplates.prototype.constructor = _mixitup.ConfigTemplates;
  /**
   * `mixitup.Config` is an interface used for customising the functionality of a
   * mixer instance. It is organised into several semantically distinct sub-objects,
   * each one pertaining to a particular aspect of MixItUp functionality.
   *
   * An object literal containing any or all of the available properies,
   * known as the "configuration object", can be passed as the second parameter to
   * the `mixitup` factory function when creating a mixer instance to customise its
   * functionality as needed.
   *
   * If no configuration object is passed, the mixer instance will take on the default
   * configuration values detailed below.
   *
   * @example <caption>Example 1: Creating and passing the configuration object</caption>
   * // Create a configuration object with desired values
   *
   * var config = {
   *     animation: {
   *         enable: false
   *     },
   *     selectors: {
   *         target: '.item'
   *     }
   * };
   *
   * // Pass the configuration object to the mixitup factory function
   *
   * var mixer = mixitup(containerEl, config);
   *
   * @example <caption>Example 2: Passing the configuration object inline</caption>
   * // Typically, the configuration object is passed inline for brevity.
   *
   * var mixer = mixitup(containerEl, {
   *     controls: {
   *         live: true,
   *         toggleLogic: 'and'
   *     }
   * });
   *
   *
   * @constructor
   * @memberof    mixitup
   * @namespace
   * @public
   * @since       2.0.0
   */

  _mixitup.Config = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.animation = new _mixitup.ConfigAnimation();
    this.behavior = new _mixitup.ConfigBehavior();
    this.callbacks = new _mixitup.ConfigCallbacks();
    this.controls = new _mixitup.ConfigControls();
    this.classNames = new _mixitup.ConfigClassNames();
    this.data = new _mixitup.ConfigData();
    this.debug = new _mixitup.ConfigDebug();
    this.layout = new _mixitup.ConfigLayout();
    this.load = new _mixitup.ConfigLoad();
    this.selectors = new _mixitup.ConfigSelectors();
    this.render = new _mixitup.ConfigRender();
    this.templates = new _mixitup.ConfigTemplates();
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Config);

  _mixitup.Config.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.Config.prototype.constructor = _mixitup.Config;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.MixerDom = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.document = null;
    this.body = null;
    this.container = null;
    this.parent = null;
    this.targets = [];
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.MixerDom);

  _mixitup.MixerDom.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.MixerDom.prototype.constructor = _mixitup.MixerDom;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.UiClassNames = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.base = '';
    this.active = '';
    this.disabled = '';
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.UiClassNames);

  _mixitup.UiClassNames.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.UiClassNames.prototype.constructor = _mixitup.UiClassNames;
  /**
   * An object into which all arbitrary arguments sent to '.dataset()' are mapped.
   *
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.CommandDataset = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.dataset = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.CommandDataset);

  _mixitup.CommandDataset.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.CommandDataset.prototype.constructor = _mixitup.CommandDataset;
  /**
   * An object into which all arbitrary arguments sent to '.multimix()' are mapped.
   *
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.CommandMultimix = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.filter = null;
    this.sort = null;
    this.insert = null;
    this.remove = null;
    this.changeLayout = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.CommandMultimix);

  _mixitup.CommandMultimix.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.CommandMultimix.prototype.constructor = _mixitup.CommandMultimix;
  /**
   * An object into which all arbitrary arguments sent to '.filter()' are mapped.
   *
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.CommandFilter = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.selector = '';
    this.collection = null;
    this.action = 'show'; // enum: ['show', 'hide']

    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.CommandFilter);

  _mixitup.CommandFilter.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.CommandFilter.prototype.constructor = _mixitup.CommandFilter;
  /**
   * An object into which all arbitrary arguments sent to '.sort()' are mapped.
   *
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.CommandSort = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.sortString = '';
    this.attribute = '';
    this.order = 'asc';
    this.collection = null;
    this.next = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.CommandSort);

  _mixitup.CommandSort.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.CommandSort.prototype.constructor = _mixitup.CommandSort;
  /**
   * An object into which all arbitrary arguments sent to '.insert()' are mapped.
   *
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.CommandInsert = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.index = 0;
    this.collection = [];
    this.position = 'before'; // enum: ['before', 'after']

    this.sibling = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.CommandInsert);

  _mixitup.CommandInsert.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.CommandInsert.prototype.constructor = _mixitup.CommandInsert;
  /**
   * An object into which all arbitrary arguments sent to '.remove()' are mapped.
   *
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.CommandRemove = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.targets = [];
    this.collection = [];
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.CommandRemove);

  _mixitup.CommandRemove.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.CommandRemove.prototype.constructor = _mixitup.CommandRemove;
  /**
   * An object into which all arbitrary arguments sent to '.changeLayout()' are mapped.
   *
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.CommandChangeLayout = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.containerClassName = '';
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.CommandChangeLayout);

  _mixitup.CommandChangeLayout.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.CommandChangeLayout.prototype.constructor = _mixitup.CommandChangeLayout;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   * @param       {string}        type
   * @param       {string}        selector
   * @param       {boolean}       [live]
   * @param       {string}        [parent]
   *     An optional string representing the name of the mixer.dom property containing a reference to a parent element.
   */

  _mixitup.ControlDefinition = function (type, selector, live, parent) {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.type = type;
    this.selector = selector;
    this.live = live || false;
    this.parent = parent || '';
    this.callActions('afterConstruct');
    h.freeze(this);
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.ControlDefinition);

  _mixitup.ControlDefinition.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.ControlDefinition.prototype.constructor = _mixitup.ControlDefinition;
  _mixitup.controlDefinitions = [];

  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('multimix', '[data-filter][data-sort]'));

  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('filter', '[data-filter]'));

  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('sort', '[data-sort]'));

  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('toggle', '[data-toggle]'));
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */


  _mixitup.Control = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.el = null;
    this.selector = '';
    this.bound = [];
    this.pending = -1;
    this.type = '';
    this.status = 'inactive'; // enum: ['inactive', 'active', 'disabled', 'live']

    this.filter = '';
    this.sort = '';
    this.canDisable = false;
    this.handler = null;
    this.classNames = new _mixitup.UiClassNames();
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Control);

  _mixitup.Control.prototype = Object.create(_mixitup.Base.prototype);
  h.extend(_mixitup.Control.prototype,
  /** @lends mixitup.Control */
  {
    constructor: _mixitup.Control,

    /**
     * @private
     * @param {HTMLElement} el
     * @param {string}      type
     * @param {string}      selector
     */
    init: function init(el, type, selector) {
      var self = this;
      this.callActions('beforeInit', arguments);
      self.el = el;
      self.type = type;
      self.selector = selector;

      if (self.selector) {
        self.status = 'live';
      } else {
        self.canDisable = typeof self.el.disable === 'boolean';

        switch (self.type) {
          case 'filter':
            self.filter = self.el.getAttribute('data-filter');
            break;

          case 'toggle':
            self.filter = self.el.getAttribute('data-toggle');
            break;

          case 'sort':
            self.sort = self.el.getAttribute('data-sort');
            break;

          case 'multimix':
            self.filter = self.el.getAttribute('data-filter');
            self.sort = self.el.getAttribute('data-sort');
            break;
        }
      }

      self.bindClick();

      _mixitup.controls.push(self);

      this.callActions('afterInit', arguments);
    },

    /**
     * @private
     * @param  {mixitup.Mixer} mixer
     * @return {boolean}
     */
    isBound: function isBound(mixer) {
      var self = this,
          isBound = false;
      this.callActions('beforeIsBound', arguments);
      isBound = self.bound.indexOf(mixer) > -1;
      return self.callFilters('afterIsBound', isBound, arguments);
    },

    /**
     * @private
     * @param  {mixitup.Mixer} mixer
     * @return {void}
     */
    addBinding: function addBinding(mixer) {
      var self = this;
      this.callActions('beforeAddBinding', arguments);

      if (!self.isBound()) {
        self.bound.push(mixer);
      }

      this.callActions('afterAddBinding', arguments);
    },

    /**
     * @private
     * @param  {mixitup.Mixer} mixer
     * @return {void}
     */
    removeBinding: function removeBinding(mixer) {
      var self = this,
          removeIndex = -1;
      this.callActions('beforeRemoveBinding', arguments);

      if ((removeIndex = self.bound.indexOf(mixer)) > -1) {
        self.bound.splice(removeIndex, 1);
      }

      if (self.bound.length < 1) {
        // No bindings exist, unbind event click handlers
        self.unbindClick(); // Remove from `mixitup.controls` list

        removeIndex = _mixitup.controls.indexOf(self);

        _mixitup.controls.splice(removeIndex, 1);

        if (self.status === 'active') {
          self.renderStatus(self.el, 'inactive');
        }
      }

      this.callActions('afterRemoveBinding', arguments);
    },

    /**
     * @private
     * @return {void}
     */
    bindClick: function bindClick() {
      var self = this;
      this.callActions('beforeBindClick', arguments);

      self.handler = function (e) {
        self.handleClick(e);
      };

      h.on(self.el, 'click', self.handler);
      this.callActions('afterBindClick', arguments);
    },

    /**
     * @private
     * @return {void}
     */
    unbindClick: function unbindClick() {
      var self = this;
      this.callActions('beforeUnbindClick', arguments);
      h.off(self.el, 'click', self.handler);
      self.handler = null;
      this.callActions('afterUnbindClick', arguments);
    },

    /**
     * @private
     * @param   {MouseEvent} e
     * @return  {void}
     */
    handleClick: function handleClick(e) {
      var self = this,
          button = null,
          mixer = null,
          isActive = false,
          returnValue = void 0,
          command = {},
          clone = null,
          commands = [],
          i = -1;
      this.callActions('beforeHandleClick', arguments);
      this.pending = 0;
      mixer = self.bound[0];

      if (!self.selector) {
        button = self.el;
      } else {
        button = h.closestParent(e.target, mixer.config.selectors.control + self.selector, true, mixer.dom.document);
      }

      if (!button) {
        self.callActions('afterHandleClick', arguments);
        return;
      }

      switch (self.type) {
        case 'filter':
          command.filter = self.filter || button.getAttribute('data-filter');
          break;

        case 'sort':
          command.sort = self.sort || button.getAttribute('data-sort');
          break;

        case 'multimix':
          command.filter = self.filter || button.getAttribute('data-filter');
          command.sort = self.sort || button.getAttribute('data-sort');
          break;

        case 'toggle':
          command.filter = self.filter || button.getAttribute('data-toggle');

          if (self.status === 'live') {
            isActive = h.hasClass(button, self.classNames.active);
          } else {
            isActive = self.status === 'active';
          }

          break;
      }

      for (i = 0; i < self.bound.length; i++) {
        // Create a clone of the command for each bound mixer instance
        clone = new _mixitup.CommandMultimix();
        h.extend(clone, command);
        commands.push(clone);
      }

      commands = self.callFilters('commandsHandleClick', commands, arguments);
      self.pending = self.bound.length;

      for (i = 0; mixer = self.bound[i]; i++) {
        command = commands[i];

        if (!command) {
          // An extension may set a command null to indicate that the click should not be handled
          continue;
        }

        if (!mixer.lastClicked) {
          mixer.lastClicked = button;
        }

        _mixitup.events.fire('mixClick', mixer.dom.container, {
          state: mixer.state,
          instance: mixer,
          originalEvent: e,
          control: mixer.lastClicked
        }, mixer.dom.document);

        if (typeof mixer.config.callbacks.onMixClick === 'function') {
          returnValue = mixer.config.callbacks.onMixClick.call(mixer.lastClicked, mixer.state, e, mixer);

          if (returnValue === false) {
            // User has returned `false` from the callback, so do not handle click
            continue;
          }
        }

        if (self.type === 'toggle') {
          isActive ? mixer.toggleOff(command.filter) : mixer.toggleOn(command.filter);
        } else {
          mixer.multimix(command);
        }
      }

      this.callActions('afterHandleClick', arguments);
    },

    /**
     * @param   {object}          command
     * @param   {Array<string>}   toggleArray
     * @return  {void}
     */
    update: function update(command, toggleArray) {
      var self = this,
          actions = new _mixitup.CommandMultimix();
      self.callActions('beforeUpdate', arguments);
      self.pending--;
      self.pending = Math.max(0, self.pending);
      if (self.pending > 0) return;

      if (self.status === 'live') {
        // Live control (status unknown)
        self.updateLive(command, toggleArray);
      } else {
        // Static control
        actions.sort = self.sort;
        actions.filter = self.filter;
        self.callFilters('actionsUpdate', actions, arguments);
        self.parseStatusChange(self.el, command, actions, toggleArray);
      }

      self.callActions('afterUpdate', arguments);
    },

    /**
     * @param   {mixitup.CommandMultimix} command
     * @param   {Array<string>}           toggleArray
     * @return  {void}
     */
    updateLive: function updateLive(command, toggleArray) {
      var self = this,
          controlButtons = null,
          actions = null,
          button = null,
          i = -1;
      self.callActions('beforeUpdateLive', arguments);
      if (!self.el) return;
      controlButtons = self.el.querySelectorAll(self.selector);

      for (i = 0; button = controlButtons[i]; i++) {
        actions = new _mixitup.CommandMultimix();

        switch (self.type) {
          case 'filter':
            actions.filter = button.getAttribute('data-filter');
            break;

          case 'sort':
            actions.sort = button.getAttribute('data-sort');
            break;

          case 'multimix':
            actions.filter = button.getAttribute('data-filter');
            actions.sort = button.getAttribute('data-sort');
            break;

          case 'toggle':
            actions.filter = button.getAttribute('data-toggle');
            break;
        }

        actions = self.callFilters('actionsUpdateLive', actions, arguments);
        self.parseStatusChange(button, command, actions, toggleArray);
      }

      self.callActions('afterUpdateLive', arguments);
    },

    /**
     * @param   {HTMLElement}             button
     * @param   {mixitup.CommandMultimix} command
     * @param   {mixitup.CommandMultimix} actions
     * @param   {Array<string>}           toggleArray
     * @return  {void}
     */
    parseStatusChange: function parseStatusChange(button, command, actions, toggleArray) {
      var self = this,
          alias = '',
          toggle = '',
          i = -1;
      self.callActions('beforeParseStatusChange', arguments);

      switch (self.type) {
        case 'filter':
          if (command.filter === actions.filter) {
            self.renderStatus(button, 'active');
          } else {
            self.renderStatus(button, 'inactive');
          }

          break;

        case 'multimix':
          if (command.sort === actions.sort && command.filter === actions.filter) {
            self.renderStatus(button, 'active');
          } else {
            self.renderStatus(button, 'inactive');
          }

          break;

        case 'sort':
          if (command.sort.match(/:asc/g)) {
            alias = command.sort.replace(/:asc/g, '');
          }

          if (command.sort === actions.sort || alias === actions.sort) {
            self.renderStatus(button, 'active');
          } else {
            self.renderStatus(button, 'inactive');
          }

          break;

        case 'toggle':
          if (toggleArray.length < 1) self.renderStatus(button, 'inactive');

          if (command.filter === actions.filter) {
            self.renderStatus(button, 'active');
          }

          for (i = 0; i < toggleArray.length; i++) {
            toggle = toggleArray[i];

            if (toggle === actions.filter) {
              // Button matches one active toggle
              self.renderStatus(button, 'active');
              break;
            }

            self.renderStatus(button, 'inactive');
          }

          break;
      }

      self.callActions('afterParseStatusChange', arguments);
    },

    /**
     * @param   {HTMLElement}   button
     * @param   {string}        status
     * @return  {void}
     */
    renderStatus: function renderStatus(button, status) {
      var self = this;
      self.callActions('beforeRenderStatus', arguments);

      switch (status) {
        case 'active':
          h.addClass(button, self.classNames.active);
          h.removeClass(button, self.classNames.disabled);
          if (self.canDisable) self.el.disabled = false;
          break;

        case 'inactive':
          h.removeClass(button, self.classNames.active);
          h.removeClass(button, self.classNames.disabled);
          if (self.canDisable) self.el.disabled = false;
          break;

        case 'disabled':
          if (self.canDisable) self.el.disabled = true;
          h.addClass(button, self.classNames.disabled);
          h.removeClass(button, self.classNames.active);
          break;
      }

      if (self.status !== 'live') {
        // Update the control's status propery if not live
        self.status = status;
      }

      self.callActions('afterRenderStatus', arguments);
    }
  });
  _mixitup.controls = [];
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.StyleData = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.x = 0;
    this.y = 0;
    this.top = 0;
    this.right = 0;
    this.bottom = 0;
    this.left = 0;
    this.width = 0;
    this.height = 0;
    this.marginRight = 0;
    this.marginBottom = 0;
    this.opacity = 0;
    this.scale = new _mixitup.TransformData();
    this.translateX = new _mixitup.TransformData();
    this.translateY = new _mixitup.TransformData();
    this.translateZ = new _mixitup.TransformData();
    this.rotateX = new _mixitup.TransformData();
    this.rotateY = new _mixitup.TransformData();
    this.rotateZ = new _mixitup.TransformData();
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.StyleData);

  _mixitup.StyleData.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.StyleData.prototype.constructor = _mixitup.StyleData;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.TransformData = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.value = 0;
    this.unit = '';
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.TransformData);

  _mixitup.TransformData.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.TransformData.prototype.constructor = _mixitup.TransformData;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.TransformDefaults = function () {
    _mixitup.StyleData.apply(this);

    this.callActions('beforeConstruct');
    this.scale.value = 0.01;
    this.scale.unit = '';
    this.translateX.value = 20;
    this.translateX.unit = 'px';
    this.translateY.value = 20;
    this.translateY.unit = 'px';
    this.translateZ.value = 20;
    this.translateZ.unit = 'px';
    this.rotateX.value = 90;
    this.rotateX.unit = 'deg';
    this.rotateY.value = 90;
    this.rotateY.unit = 'deg';
    this.rotateX.value = 90;
    this.rotateX.unit = 'deg';
    this.rotateZ.value = 180;
    this.rotateZ.unit = 'deg';
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.TransformDefaults);

  _mixitup.TransformDefaults.prototype = Object.create(_mixitup.StyleData.prototype);
  _mixitup.TransformDefaults.prototype.constructor = _mixitup.TransformDefaults;
  /**
   * @private
   * @static
   * @since   3.0.0
   * @type    {mixitup.TransformDefaults}
   */

  _mixitup.transformDefaults = new _mixitup.TransformDefaults();
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.EventDetail = function () {
    this.state = null;
    this.futureState = null;
    this.instance = null;
    this.originalEvent = null;
  };
  /**
   * The `mixitup.Events` class contains all custom events dispatched by MixItUp at various
   * points within the lifecycle of a mixer operation.
   *
   * Each event is analogous to the callback function of the same name defined in
   * the `callbacks` configuration object, and is triggered immediately before it.
   *
   * Events are always triggered from the container element on which MixItUp is instantiated
   * upon.
   *
   * As with any event, registered event handlers receive the event object as a parameter
   * which includes a `detail` property containting references to the current `state`,
   * the `mixer` instance, and other event-specific properties described below.
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @public
   * @since       3.0.0
   */


  _mixitup.Events = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * A custom event triggered immediately after any MixItUp operation is requested
     * and before animations have begun.
     *
     * The `mixStart` event also exposes a `futureState` property via the
     * `event.detail` object, which represents the final state of the mixer once
     * the requested operation has completed.
     *
     * @name        mixStart
     * @memberof    mixitup.Events
     * @static
     * @type        {CustomEvent}
     */

    this.mixStart = null;
    /**
     * A custom event triggered when a MixItUp operation is requested while another
     * operation is in progress, and the animation queue is full, or queueing
     * is disabled.
     *
     * @name        mixBusy
     * @memberof    mixitup.Events
     * @static
     * @type        {CustomEvent}
     */

    this.mixBusy = null;
    /**
     * A custom event triggered after any MixItUp operation has completed, and the
     * state has been updated.
     *
     * @name        mixEnd
     * @memberof    mixitup.Events
     * @static
     * @type        {CustomEvent}
     */

    this.mixEnd = null;
    /**
     * A custom event triggered whenever a filter operation "fails", i.e. no targets
     * could be found matching the requested filter.
     *
     * @name        mixFail
     * @memberof    mixitup.Events
     * @static
     * @type        {CustomEvent}
     */

    this.mixFail = null;
    /**
     * A custom event triggered whenever a MixItUp control is clicked, and before its
     * respective operation is requested.
     *
     * This event also exposes an `originalEvent` property via the `event.detail`
     * object, which holds a reference to the original click event.
     *
     * @name        mixClick
     * @memberof    mixitup.Events
     * @static
     * @type        {CustomEvent}
     */

    this.mixClick = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Events);

  _mixitup.Events.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.Events.prototype.constructor = _mixitup.Events;
  /**
   * @private
   * @param   {string}      eventType
   * @param   {Element}     el
   * @param   {object}      detail
   * @param   {Document}    [doc]
   */

  _mixitup.Events.prototype.fire = function (eventType, el, detail, doc) {
    var self = this,
        event = null,
        eventDetail = new _mixitup.EventDetail();
    self.callActions('beforeFire', arguments);

    if (typeof self[eventType] === 'undefined') {
      throw new Error('Event type "' + eventType + '" not found.');
    }

    eventDetail.state = new _mixitup.State();
    h.extend(eventDetail.state, detail.state);

    if (detail.futureState) {
      eventDetail.futureState = new _mixitup.State();
      h.extend(eventDetail.futureState, detail.futureState);
    }

    eventDetail.instance = detail.instance;

    if (detail.originalEvent) {
      eventDetail.originalEvent = detail.originalEvent;
    }

    event = h.getCustomEvent(eventType, eventDetail, doc);
    self.callFilters('eventFire', event, arguments);
    el.dispatchEvent(event);
  }; // Asign a singleton instance to `mixitup.events`:


  _mixitup.events = new _mixitup.Events();
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.QueueItem = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.args = [];
    this.instruction = null;
    this.triggerElement = null;
    this.deferred = null;
    this.isToggling = false;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.QueueItem);

  _mixitup.QueueItem.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.QueueItem.prototype.constructor = _mixitup.QueueItem;
  /**
   * The `mixitup.Mixer` class is used to hold discreet, user-configured
   * instances of MixItUp on a provided container element.
   *
   * Mixer instances are returned whenever the `mixitup()` factory function is called,
   * which expose a range of methods enabling API-based filtering, sorting,
   * insertion, removal and more.
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @public
   * @since       3.0.0
   */

  _mixitup.Mixer = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.config = new _mixitup.Config();
    this.id = '';
    this.isBusy = false;
    this.isToggling = false;
    this.incPadding = true;
    this.controls = [];
    this.targets = [];
    this.origOrder = [];
    this.cache = {};
    this.toggleArray = [];
    this.targetsMoved = 0;
    this.targetsImmovable = 0;
    this.targetsBound = 0;
    this.targetsDone = 0;
    this.staggerDuration = 0;
    this.effectsIn = null;
    this.effectsOut = null;
    this.transformIn = [];
    this.transformOut = [];
    this.queue = [];
    this.state = null;
    this.lastOperation = null;
    this.lastClicked = null;
    this.userCallback = null;
    this.userDeferred = null;
    this.dom = new _mixitup.MixerDom();
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Mixer);

  _mixitup.Mixer.prototype = Object.create(_mixitup.Base.prototype);
  h.extend(_mixitup.Mixer.prototype,
  /** @lends mixitup.Mixer */
  {
    constructor: _mixitup.Mixer,

    /**
     * @private
     * @instance
     * @since 3.0.0
     * @param {HTMLElement} container
     * @param {HTMLElement} document
     * @param {string}      id
     * @param {object}      [config]
     */
    attach: function attach(container, document, id, config) {
      var self = this,
          target = null,
          i = -1;
      self.callActions('beforeAttach', arguments);
      self.id = id;

      if (config) {
        h.extend(self.config, config, true, true);
      }

      self.sanitizeConfig();
      self.cacheDom(container, document);

      if (self.config.layout.containerClassName) {
        h.addClass(self.dom.container, self.config.layout.containerClassName);
      }

      if (!_mixitup.features.has.transitions) {
        self.config.animation.enable = false;
      }

      if (typeof window.console === 'undefined') {
        self.config.debug.showWarnings = false;
      }

      if (self.config.data.uidKey) {
        // If the dataset API is in use, force disable controls
        self.config.controls.enable = false;
      }

      self.indexTargets();
      self.state = self.getInitialState();

      for (i = 0; target = self.lastOperation.toHide[i]; i++) {
        target.hide();
      }

      if (self.config.controls.enable) {
        self.initControls();
        self.buildToggleArray(null, self.state);
        self.updateControls({
          filter: self.state.activeFilter,
          sort: self.state.activeSort
        });
      }

      self.parseEffects();
      self.callActions('afterAttach', arguments);
    },

    /**
     * @private
     * @instance
     * @since 3.0.0
     * @return {void}
     */
    sanitizeConfig: function sanitizeConfig() {
      var self = this;
      self.callActions('beforeSanitizeConfig', arguments); // Sanitize enum/string config options

      self.config.controls.scope = self.config.controls.scope.toLowerCase().trim();
      self.config.controls.toggleLogic = self.config.controls.toggleLogic.toLowerCase().trim();
      self.config.controls.toggleDefault = self.config.controls.toggleDefault.toLowerCase().trim();
      self.config.animation.effects = self.config.animation.effects.trim();
      self.callActions('afterSanitizeConfig', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @return  {mixitup.State}
     */
    getInitialState: function getInitialState() {
      var self = this,
          state = new _mixitup.State(),
          operation = new _mixitup.Operation();
      self.callActions('beforeGetInitialState', arguments); // Map initial values into a mock state object in order to construct an operation

      state.activeContainerClassName = self.config.layout.containerClassName;

      if (self.config.load.dataset) {
        // Dataset API
        if (!self.config.data.uidKey || typeof self.config.data.uidKey !== 'string') {
          throw new TypeError(_mixitup.messages.errorConfigDataUidKeyNotSet());
        }

        operation.startDataset = operation.newDataset = state.activeDataset = self.config.load.dataset.slice();
        operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;
        operation.show = self.targets.slice();
        state = self.callFilters('stateGetInitialState', state, arguments);
      } else {
        // DOM API
        state.activeFilter = self.parseFilterArgs([self.config.load.filter]).command;
        state.activeSort = self.parseSortArgs([self.config.load.sort]).command;
        state.totalTargets = self.targets.length;
        state = self.callFilters('stateGetInitialState', state, arguments);

        if (state.activeSort.collection || state.activeSort.attribute || state.activeSort.order === 'random' || state.activeSort.order === 'desc') {
          // Sorting on load
          operation.newSort = state.activeSort;
          self.sortOperation(operation);
          self.printSort(false, operation);
          self.targets = operation.newOrder;
        } else {
          operation.startOrder = operation.newOrder = self.targets;
        }

        operation.startFilter = operation.newFilter = state.activeFilter;
        operation.startSort = operation.newSort = state.activeSort;
        operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;

        if (operation.newFilter.selector === 'all') {
          operation.newFilter.selector = self.config.selectors.target;
        } else if (operation.newFilter.selector === 'none') {
          operation.newFilter.selector = '';
        }
      }

      operation = self.callFilters('operationGetInitialState', operation, [state]);
      self.lastOperation = operation;

      if (operation.newFilter) {
        self.filterOperation(operation);
      }

      state = self.buildState(operation);
      return state;
    },

    /**
     * Caches references of DOM elements neccessary for the mixer's functionality.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {HTMLElement}       el
     * @param   {HTMLHtmlElement}   document
     * @return  {void}
     */
    cacheDom: function cacheDom(el, document) {
      var self = this;
      self.callActions('beforeCacheDom', arguments);
      self.dom.document = document;
      self.dom.body = self.dom.document.querySelector('body');
      self.dom.container = el;
      self.dom.parent = el;
      self.callActions('afterCacheDom', arguments);
    },

    /**
     * Indexes all child elements of the mixer matching the `selectors.target`
     * selector, instantiating a mixitup.Target for each one.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @return  {void}
     */
    indexTargets: function indexTargets() {
      var self = this,
          target = null,
          el = null,
          dataset = null,
          i = -1;
      self.callActions('beforeIndexTargets', arguments);
      self.dom.targets = self.config.layout.allowNestedTargets ? self.dom.container.querySelectorAll(self.config.selectors.target) : h.children(self.dom.container, self.config.selectors.target, self.dom.document);
      self.dom.targets = h.arrayFromList(self.dom.targets);
      self.targets = [];

      if ((dataset = self.config.load.dataset) && dataset.length !== self.dom.targets.length) {
        throw new Error(_mixitup.messages.errorDatasetPrerenderedMismatch());
      }

      if (self.dom.targets.length) {
        for (i = 0; el = self.dom.targets[i]; i++) {
          target = new _mixitup.Target();
          target.init(el, self, dataset ? dataset[i] : void 0);
          target.isInDom = true;
          self.targets.push(target);
        }

        self.dom.parent = self.dom.targets[0].parentElement === self.dom.container ? self.dom.container : self.dom.targets[0].parentElement;
      }

      self.origOrder = self.targets;
      self.callActions('afterIndexTargets', arguments);
    },
    initControls: function initControls() {
      var self = this,
          definition = '',
          controlElements = null,
          el = null,
          parent = null,
          delagators = null,
          control = null,
          i = -1,
          j = -1;
      self.callActions('beforeInitControls', arguments);

      switch (self.config.controls.scope) {
        case 'local':
          parent = self.dom.container;
          break;

        case 'global':
          parent = self.dom.document;
          break;

        default:
          throw new Error(_mixitup.messages.errorConfigInvalidControlsScope());
      }

      for (i = 0; definition = _mixitup.controlDefinitions[i]; i++) {
        if (self.config.controls.live || definition.live) {
          if (definition.parent) {
            delagators = self.dom[definition.parent];
            if (!delagators || delagators.length < 0) continue;

            if (typeof delagators.length !== 'number') {
              delagators = [delagators];
            }
          } else {
            delagators = [parent];
          }

          for (j = 0; el = delagators[j]; j++) {
            control = self.getControl(el, definition.type, definition.selector);
            self.controls.push(control);
          }
        } else {
          controlElements = parent.querySelectorAll(self.config.selectors.control + definition.selector);

          for (j = 0; el = controlElements[j]; j++) {
            control = self.getControl(el, definition.type, '');
            if (!control) continue;
            self.controls.push(control);
          }
        }
      }

      self.callActions('afterInitControls', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {HTMLElement} el
     * @param   {string}      type
     * @param   {string}      selector
     * @return  {mixitup.Control|null}
     */
    getControl: function getControl(el, type, selector) {
      var self = this,
          control = null,
          i = -1;
      self.callActions('beforeGetControl', arguments);

      if (!selector) {
        // Static controls only
        for (i = 0; control = _mixitup.controls[i]; i++) {
          if (control.el === el && control.isBound(self)) {
            // Control already bound to this mixer (as another type).
            // NB: This prevents duplicate controls from being registered where a selector
            // might collide, eg: "[data-filter]" and "[data-filter][data-sort]"
            return self.callFilters('controlGetControl', null, arguments);
          } else if (control.el === el && control.type === type && control.selector === selector) {
            // Another mixer is already using this control, add this mixer as a binding
            control.addBinding(self);
            return self.callFilters('controlGetControl', control, arguments);
          }
        }
      } // Create new control


      control = new _mixitup.Control();
      control.init(el, type, selector);
      control.classNames.base = h.getClassname(self.config.classNames, type);
      control.classNames.active = h.getClassname(self.config.classNames, type, self.config.classNames.modifierActive);
      control.classNames.disabled = h.getClassname(self.config.classNames, type, self.config.classNames.modifierDisabled); // Add a reference to this mixer as a binding

      control.addBinding(self);
      return self.callFilters('controlGetControl', control, arguments);
    },

    /**
     * Creates a compound selector by joining the `toggleArray` value as per the
     * defined toggle logic.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @return  {string}
     */
    getToggleSelector: function getToggleSelector() {
      var self = this,
          delineator = self.config.controls.toggleLogic === 'or' ? ', ' : '',
          toggleSelector = '';
      self.callActions('beforeGetToggleSelector', arguments);
      self.toggleArray = h.clean(self.toggleArray);
      toggleSelector = self.toggleArray.join(delineator);

      if (toggleSelector === '') {
        toggleSelector = self.config.controls.toggleDefault;
      }

      return self.callFilters('selectorGetToggleSelector', toggleSelector, arguments);
    },

    /**
     * Breaks compound selector strings in an array of discreet selectors,
     * as per the active `controls.toggleLogic` configuration option. Accepts
     * either a dynamic command object, or a state object.
     *
     * @private
     * @instance
     * @since   2.0.0
     * @param   {object}        [command]
     * @param   {mixitup.State} [state]
     * @return  {void}
     */
    buildToggleArray: function buildToggleArray(command, state) {
      var self = this,
          activeFilterSelector = '';
      self.callActions('beforeBuildToggleArray', arguments);

      if (command && command.filter) {
        activeFilterSelector = command.filter.selector.replace(/\s/g, '');
      } else if (state) {
        activeFilterSelector = state.activeFilter.selector.replace(/\s/g, '');
      } else {
        return;
      }

      if (activeFilterSelector === self.config.selectors.target || activeFilterSelector === 'all') {
        activeFilterSelector = '';
      }

      if (self.config.controls.toggleLogic === 'or') {
        self.toggleArray = activeFilterSelector.split(',');
      } else {
        self.toggleArray = self.splitCompoundSelector(activeFilterSelector);
      }

      self.toggleArray = h.clean(self.toggleArray);
      self.callActions('afterBuildToggleArray', arguments);
    },

    /**
     * Takes a compound selector (e.g. `.cat-1.cat-2`, `[data-cat="1"][data-cat="2"]`)
     * and breaks into its individual selectors.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {string} compoundSelector
     * @return  {string[]}
     */
    splitCompoundSelector: function splitCompoundSelector(compoundSelector) {
      // Break at a `.` or `[`, capturing the delineator
      var partials = compoundSelector.split(/([\.\[])/g),
          toggleArray = [],
          selector = '',
          i = -1;

      if (partials[0] === '') {
        partials.shift();
      }

      for (i = 0; i < partials.length; i++) {
        if (i % 2 === 0) {
          selector = '';
        }

        selector += partials[i];

        if (i % 2 !== 0) {
          toggleArray.push(selector);
        }
      }

      return toggleArray;
    },

    /**
     * Updates controls to their active/inactive state based on the command or
     * current state of the mixer.
     *
     * @private
     * @instance
     * @since   2.0.0
     * @param   {object} command
     * @return  {void}
     */
    updateControls: function updateControls(command) {
      var self = this,
          control = null,
          output = new _mixitup.CommandMultimix(),
          i = -1;
      self.callActions('beforeUpdateControls', arguments); // Sanitise to defaults

      if (command.filter) {
        output.filter = command.filter.selector;
      } else {
        output.filter = self.state.activeFilter.selector;
      }

      if (command.sort) {
        output.sort = self.buildSortString(command.sort);
      } else {
        output.sort = self.buildSortString(self.state.activeSort);
      }

      if (output.filter === self.config.selectors.target) {
        output.filter = 'all';
      }

      if (output.filter === '') {
        output.filter = 'none';
      }

      h.freeze(output);

      for (i = 0; control = self.controls[i]; i++) {
        control.update(output, self.toggleArray);
      }

      self.callActions('afterUpdateControls', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {mixitup.CommandSort}   command
     * @return  {string}
     */
    buildSortString: function buildSortString(command) {
      var self = this;
      var output = '';
      output += command.sortString;

      if (command.next) {
        output += ' ' + self.buildSortString(command.next);
      }

      return output;
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {object}        command
     * @param   {Operation}     operation
     * @return  {Promise.<mixitup.State>}
     */
    insertTargets: function insertTargets(command, operation) {
      var self = this,
          nextSibling = null,
          insertionIndex = -1,
          frag = null,
          target = null,
          el = null,
          i = -1;
      self.callActions('beforeInsertTargets', arguments);
      if (typeof command.index === 'undefined') command.index = 0;
      nextSibling = self.getNextSibling(command.index, command.sibling, command.position);
      frag = self.dom.document.createDocumentFragment();

      if (nextSibling) {
        insertionIndex = h.index(nextSibling, self.config.selectors.target);
      } else {
        insertionIndex = self.targets.length;
      }

      if (command.collection) {
        for (i = 0; el = command.collection[i]; i++) {
          if (self.dom.targets.indexOf(el) > -1) {
            throw new Error(_mixitup.messages.errorInsertPreexistingElement());
          } // Ensure elements are hidden when they are added to the DOM, so they can
          // be animated in gracefully


          el.style.display = 'none';
          frag.appendChild(el);
          frag.appendChild(self.dom.document.createTextNode(' '));
          if (!h.isElement(el, self.dom.document) || !el.matches(self.config.selectors.target)) continue;
          target = new _mixitup.Target();
          target.init(el, self);
          target.isInDom = true;
          self.targets.splice(insertionIndex, 0, target);
          insertionIndex++;
        }

        self.dom.parent.insertBefore(frag, nextSibling);
      } // Since targets have been added, the original order must be updated


      operation.startOrder = self.origOrder = self.targets;
      self.callActions('afterInsertTargets', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Number}      [index]
     * @param   {Element}     [sibling]
     * @param   {string}      [position]
     * @return  {Element}
     */
    getNextSibling: function getNextSibling(index, sibling, position) {
      var self = this,
          element = null;
      index = Math.max(index, 0);

      if (sibling && position === 'before') {
        // Explicit sibling
        element = sibling;
      } else if (sibling && position === 'after') {
        // Explicit sibling
        element = sibling.nextElementSibling || null;
      } else if (self.targets.length > 0 && typeof index !== 'undefined') {
        // Index and targets exist
        element = index < self.targets.length || !self.targets.length ? self.targets[index].dom.el : self.targets[self.targets.length - 1].dom.el.nextElementSibling;
      } else if (self.targets.length === 0 && self.dom.parent.children.length > 0) {
        // No targets but other siblings
        if (self.config.layout.siblingAfter) {
          element = self.config.layout.siblingAfter;
        } else if (self.config.layout.siblingBefore) {
          element = self.config.layout.siblingBefore.nextElementSibling;
        } else {
          self.dom.parent.children[0];
        }
      } else {
        element === null;
      }

      return self.callFilters('elementGetNextSibling', element, arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    filterOperation: function filterOperation(operation) {
      var self = this,
          testResult = false,
          index = -1,
          action = '',
          target = null,
          i = -1;
      self.callActions('beforeFilterOperation', arguments);
      action = operation.newFilter.action;

      for (i = 0; target = operation.newOrder[i]; i++) {
        if (operation.newFilter.collection) {
          // show via collection
          testResult = operation.newFilter.collection.indexOf(target.dom.el) > -1;
        } else {
          // show via selector
          if (operation.newFilter.selector === '') {
            testResult = false;
          } else {
            testResult = target.dom.el.matches(operation.newFilter.selector);
          }
        }

        self.evaluateHideShow(testResult, target, action, operation);
      }

      if (operation.toRemove.length) {
        for (i = 0; target = operation.show[i]; i++) {
          if (operation.toRemove.indexOf(target) > -1) {
            // If any shown targets should be removed, move them into the toHide array
            operation.show.splice(i, 1);

            if ((index = operation.toShow.indexOf(target)) > -1) {
              operation.toShow.splice(index, 1);
            }

            operation.toHide.push(target);
            operation.hide.push(target);
            i--;
          }
        }
      }

      operation.matching = operation.show.slice();

      if (operation.show.length === 0 && operation.newFilter.selector !== '' && self.targets.length !== 0) {
        operation.hasFailed = true;
      }

      self.callActions('afterFilterOperation', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {boolean}   testResult
     * @param   {Element}   target
     * @param   {string}    action
     * @param   {Operation} operation
     * @return  {void}
     */
    evaluateHideShow: function evaluateHideShow(testResult, target, action, operation) {
      var self = this,
          filteredTestResult = false,
          args = Array.prototype.slice.call(arguments, 1);
      filteredTestResult = self.callFilters('testResultEvaluateHideShow', testResult, args);
      self.callActions('beforeEvaluateHideShow', arguments);

      if (filteredTestResult === true && action === 'show' || filteredTestResult === false && action === 'hide') {
        operation.show.push(target);
        !target.isShown && operation.toShow.push(target);
      } else {
        operation.hide.push(target);
        target.isShown && operation.toHide.push(target);
      }

      self.callActions('afterEvaluateHideShow', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    sortOperation: function sortOperation(operation) {
      var self = this,
          newOrder = [],
          target = null,
          el = null,
          i = -1;
      self.callActions('beforeSortOperation', arguments);
      operation.startOrder = self.targets;

      if (operation.newSort.collection) {
        // Sort by collection
        newOrder = [];

        for (i = 0; el = operation.newSort.collection[i]; i++) {
          if (self.dom.targets.indexOf(el) < 0) {
            throw new Error(_mixitup.messages.errorSortNonExistentElement());
          }

          target = new _mixitup.Target();
          target.init(el, self);
          target.isInDom = true;
          newOrder.push(target);
        }

        operation.newOrder = newOrder;
      } else if (operation.newSort.order === 'random') {
        // Sort random
        operation.newOrder = h.arrayShuffle(operation.startOrder);
      } else if (operation.newSort.attribute === '') {
        // Sort by default
        operation.newOrder = self.origOrder.slice();

        if (operation.newSort.order === 'desc') {
          operation.newOrder.reverse();
        }
      } else {
        // Sort by attribute
        operation.newOrder = operation.startOrder.slice();
        operation.newOrder.sort(function (a, b) {
          return self.compare(a, b, operation.newSort);
        });
      }

      if (h.isEqualArray(operation.newOrder, operation.startOrder)) {
        operation.willSort = false;
      }

      self.callActions('afterSortOperation', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {mixitup.Target}        a
     * @param   {mixitup.Target}        b
     * @param   {mixitup.CommandSort}   command
     * @return  {Number}
     */
    compare: function compare(a, b, command) {
      var self = this,
          order = command.order,
          attrA = self.getAttributeValue(a, command.attribute),
          attrB = self.getAttributeValue(b, command.attribute);

      if (isNaN(attrA * 1) || isNaN(attrB * 1)) {
        attrA = attrA.toLowerCase();
        attrB = attrB.toLowerCase();
      } else {
        attrA = attrA * 1;
        attrB = attrB * 1;
      }

      if (attrA < attrB) {
        return order === 'asc' ? -1 : 1;
      }

      if (attrA > attrB) {
        return order === 'asc' ? 1 : -1;
      }

      if (attrA === attrB && command.next) {
        return self.compare(a, b, command.next);
      }

      return 0;
    },

    /**
     * Reads the values of any data attributes present the provided target element
     * which match the current sort command.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {mixitup.Target}    target
     * @param   {string}            [attribute]
     * @return  {(String|Number)}
     */
    getAttributeValue: function getAttributeValue(target, attribute) {
      var self = this,
          value = '';
      value = target.dom.el.getAttribute('data-' + attribute);

      if (value === null) {
        if (self.config.debug.showWarnings) {
          // Encourage users to assign values to all targets to avoid erroneous sorting
          // when types are mixed
          console.warn(_mixitup.messages.warningInconsistentSortingAttributes({
            attribute: 'data-' + attribute
          }));
        }
      } // If an attribute is not present, return 0 as a safety value


      return self.callFilters('valueGetAttributeValue', value || 0, arguments);
    },

    /**
     * Inserts elements into the DOM in the appropriate
     * order using a document fragment for minimal
     * DOM thrashing
     *
     * @private
     * @instance
     * @since   2.0.0
     * @param   {boolean}   isResetting
     * @param   {Operation} operation
     * @return  {void}
     */
    printSort: function printSort(isResetting, operation) {
      var self = this,
          startOrder = isResetting ? operation.newOrder : operation.startOrder,
          newOrder = isResetting ? operation.startOrder : operation.newOrder,
          nextSibling = startOrder.length ? startOrder[startOrder.length - 1].dom.el.nextElementSibling : null,
          frag = window.document.createDocumentFragment(),
          whitespace = null,
          target = null,
          el = null,
          i = -1;
      self.callActions('beforePrintSort', arguments); // Empty the container

      for (i = 0; target = startOrder[i]; i++) {
        el = target.dom.el;
        if (el.style.position === 'absolute') continue;
        h.removeWhitespace(el.previousSibling);
        el.parentElement.removeChild(el);
      }

      whitespace = nextSibling ? nextSibling.previousSibling : self.dom.parent.lastChild;

      if (whitespace && whitespace.nodeName === '#text') {
        h.removeWhitespace(whitespace);
      }

      for (i = 0; target = newOrder[i]; i++) {
        // Add targets into a document fragment
        el = target.dom.el;

        if (h.isElement(frag.lastChild)) {
          frag.appendChild(window.document.createTextNode(' '));
        }

        frag.appendChild(el);
      } // Insert the document fragment into the container
      // before any other non-target elements


      if (self.dom.parent.firstChild && self.dom.parent.firstChild !== nextSibling) {
        frag.insertBefore(window.document.createTextNode(' '), frag.childNodes[0]);
      }

      if (nextSibling) {
        frag.appendChild(window.document.createTextNode(' '));
        self.dom.parent.insertBefore(frag, nextSibling);
      } else {
        self.dom.parent.appendChild(frag);
      }

      self.callActions('afterPrintSort', arguments);
    },

    /**
     * Parses user-defined sort strings (i.e. `default:asc`) into sort commands objects.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {string}                sortString
     * @param   {mixitup.CommandSort}   command
     * @return  {mixitup.CommandSort}
     */
    parseSortString: function parseSortString(sortString, command) {
      var self = this,
          rules = sortString.split(' '),
          current = command,
          rule = [],
          i = -1; // command.sortString = sortString;

      for (i = 0; i < rules.length; i++) {
        rule = rules[i].split(':');
        current.sortString = rules[i];
        current.attribute = h.dashCase(rule[0]);
        current.order = rule[1] || 'asc';

        switch (current.attribute) {
          case 'default':
            // treat "default" as sorting by no attribute
            current.attribute = '';
            break;

          case 'random':
            // treat "random" as an order not an attribute
            current.attribute = '';
            current.order = 'random';
            break;
        }

        if (!current.attribute || current.order === 'random') break;

        if (i < rules.length - 1) {
          // Embed reference to the next command
          current.next = new _mixitup.CommandSort();
          h.freeze(current);
          current = current.next;
        }
      }

      return self.callFilters('commandsParseSort', command, arguments);
    },

    /**
     * Parses all effects out of the user-defined `animation.effects` string into
     * their respective properties and units.
     *
     * @private
     * @instance
     * @since   2.0.0
     * @return  {void}
     */
    parseEffects: function parseEffects() {
      var self = this,
          transformName = '',
          effectsIn = self.config.animation.effectsIn || self.config.animation.effects,
          effectsOut = self.config.animation.effectsOut || self.config.animation.effects;
      self.callActions('beforeParseEffects', arguments);
      self.effectsIn = new _mixitup.StyleData();
      self.effectsOut = new _mixitup.StyleData();
      self.transformIn = [];
      self.transformOut = [];
      self.effectsIn.opacity = self.effectsOut.opacity = 1;
      self.parseEffect('fade', effectsIn, self.effectsIn, self.transformIn);
      self.parseEffect('fade', effectsOut, self.effectsOut, self.transformOut, true);

      for (transformName in _mixitup.transformDefaults) {
        if (!(_mixitup.transformDefaults[transformName] instanceof _mixitup.TransformData)) {
          continue;
        }

        self.parseEffect(transformName, effectsIn, self.effectsIn, self.transformIn);
        self.parseEffect(transformName, effectsOut, self.effectsOut, self.transformOut, true);
      }

      self.parseEffect('stagger', effectsIn, self.effectsIn, self.transformIn);
      self.parseEffect('stagger', effectsOut, self.effectsOut, self.transformOut, true);
      self.callActions('afterParseEffects', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {string}    effectName
     * @param   {string}    effectString
     * @param   {StyleData} effects
     * @param   {String[]}  transform
     * @param   {boolean}   [isOut]
     */
    parseEffect: function parseEffect(effectName, effectString, effects, transform, isOut) {
      var self = this,
          re = /\(([^)]+)\)/,
          propIndex = -1,
          str = '',
          match = [],
          val = '',
          units = ['%', 'px', 'em', 'rem', 'vh', 'vw', 'deg'],
          unit = '',
          i = -1;
      self.callActions('beforeParseEffect', arguments);

      if (typeof effectString !== 'string') {
        throw new TypeError(_mixitup.messages.errorConfigInvalidAnimationEffects());
      }

      if (effectString.indexOf(effectName) < 0) {
        // The effect is not present in the effects string
        if (effectName === 'stagger') {
          // Reset stagger to 0
          self.staggerDuration = 0;
        }

        return;
      } // The effect is present


      propIndex = effectString.indexOf(effectName + '(');

      if (propIndex > -1) {
        // The effect has a user defined value in parentheses
        // Extract from the first parenthesis to the end of string
        str = effectString.substring(propIndex); // Match any number of characters between "(" and ")"

        match = re.exec(str);
        val = match[1];
      }

      switch (effectName) {
        case 'fade':
          effects.opacity = val ? parseFloat(val) : 0;
          break;

        case 'stagger':
          self.staggerDuration = val ? parseFloat(val) : 100; // TODO: Currently stagger must be applied globally, but
          // if seperate values are specified for in/out, this should
          // be respected

          break;

        default:
          // All other effects are transforms following the same structure
          if (isOut && self.config.animation.reverseOut && effectName !== 'scale') {
            effects[effectName].value = (val ? parseFloat(val) : _mixitup.transformDefaults[effectName].value) * -1;
          } else {
            effects[effectName].value = val ? parseFloat(val) : _mixitup.transformDefaults[effectName].value;
          }

          if (val) {
            for (i = 0; unit = units[i]; i++) {
              if (val.indexOf(unit) > -1) {
                effects[effectName].unit = unit;
                break;
              }
            }
          } else {
            effects[effectName].unit = _mixitup.transformDefaults[effectName].unit;
          }

          transform.push(effectName + '(' + effects[effectName].value + effects[effectName].unit + ')');
      }

      self.callActions('afterParseEffect', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {State}
     */
    buildState: function buildState(operation) {
      var self = this,
          state = new _mixitup.State(),
          target = null,
          i = -1;
      self.callActions('beforeBuildState', arguments); // Map target elements into state arrays.
      // the real target objects should never be exposed

      for (i = 0; target = self.targets[i]; i++) {
        if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {
          state.targets.push(target.dom.el);
        }
      }

      for (i = 0; target = operation.matching[i]; i++) {
        state.matching.push(target.dom.el);
      }

      for (i = 0; target = operation.show[i]; i++) {
        state.show.push(target.dom.el);
      }

      for (i = 0; target = operation.hide[i]; i++) {
        if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {
          state.hide.push(target.dom.el);
        }
      }

      state.id = self.id;
      state.container = self.dom.container;
      state.activeFilter = operation.newFilter;
      state.activeSort = operation.newSort;
      state.activeDataset = operation.newDataset;
      state.activeContainerClassName = operation.newContainerClassName;
      state.hasFailed = operation.hasFailed;
      state.totalTargets = self.targets.length;
      state.totalShow = operation.show.length;
      state.totalHide = operation.hide.length;
      state.totalMatching = operation.matching.length;
      state.triggerElement = operation.triggerElement;
      return self.callFilters('stateBuildState', state, arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {boolean}   shouldAnimate
     * @param   {Operation} operation
     * @return  {void}
     */
    goMix: function goMix(shouldAnimate, operation) {
      var self = this,
          deferred = null;
      self.callActions('beforeGoMix', arguments); // If the animation duration is set to 0ms,
      // or no effects specified,
      // or the container is hidden
      // then abort animation

      if (!self.config.animation.duration || !self.config.animation.effects || !h.isVisible(self.dom.container)) {
        shouldAnimate = false;
      }

      if (!operation.toShow.length && !operation.toHide.length && !operation.willSort && !operation.willChangeLayout) {
        // If nothing to show or hide, and not sorting or
        // changing layout
        shouldAnimate = false;
      }

      if (!operation.startState.show.length && !operation.show.length) {
        // If nothing currently shown, nothing to show
        shouldAnimate = false;
      }

      _mixitup.events.fire('mixStart', self.dom.container, {
        state: operation.startState,
        futureState: operation.newState,
        instance: self
      }, self.dom.document);

      if (typeof self.config.callbacks.onMixStart === 'function') {
        self.config.callbacks.onMixStart.call(self.dom.container, operation.startState, operation.newState, self);
      }

      h.removeClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));

      if (!self.userDeferred) {
        // Queue empty, no pending operations
        deferred = self.userDeferred = h.defer(_mixitup.libraries);
      } else {
        // Use existing deferred
        deferred = self.userDeferred;
      }

      self.isBusy = true;

      if (!shouldAnimate || !_mixitup.features.has.transitions) {
        // Abort
        if (self.config.debug.fauxAsync) {
          setTimeout(function () {
            self.cleanUp(operation);
          }, self.config.animation.duration);
        } else {
          self.cleanUp(operation);
        }

        return self.callFilters('promiseGoMix', deferred.promise, arguments);
      } // If we should animate and the platform supports transitions, go for it


      if (window.pageYOffset !== operation.docState.scrollTop) {
        window.scrollTo(operation.docState.scrollLeft, operation.docState.scrollTop);
      }

      if (self.config.animation.applyPerspective) {
        self.dom.parent.style[_mixitup.features.perspectiveProp] = self.config.animation.perspectiveDistance;
        self.dom.parent.style[_mixitup.features.perspectiveOriginProp] = self.config.animation.perspectiveOrigin;
      }

      if (self.config.animation.animateResizeContainer && operation.startHeight !== operation.newHeight && operation.viewportDeltaY !== operation.startHeight - operation.newHeight) {
        self.dom.parent.style.height = operation.startHeight + 'px';
      }

      if (self.config.animation.animateResizeContainer && operation.startWidth !== operation.newWidth && operation.viewportDeltaX !== operation.startWidth - operation.newWidth) {
        self.dom.parent.style.width = operation.startWidth + 'px';
      }

      if (operation.startHeight === operation.newHeight) {
        self.dom.parent.style.height = operation.startHeight + 'px';
      }

      if (operation.startWidth === operation.newWidth) {
        self.dom.parent.style.width = operation.startWidth + 'px';
      }

      if (operation.startHeight === operation.newHeight && operation.startWidth === operation.newWidth) {
        self.dom.parent.style.overflow = 'hidden';
      }

      requestAnimationFrame(function () {
        self.moveTargets(operation);
      });
      return self.callFilters('promiseGoMix', deferred.promise, arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    getStartMixData: function getStartMixData(operation) {
      var self = this,
          parentStyle = window.getComputedStyle(self.dom.parent),
          parentRect = self.dom.parent.getBoundingClientRect(),
          target = null,
          data = {},
          i = -1,
          boxSizing = parentStyle[_mixitup.features.boxSizingProp];
      self.incPadding = boxSizing === 'border-box';
      self.callActions('beforeGetStartMixData', arguments);

      for (i = 0; target = operation.show[i]; i++) {
        data = target.getPosData();
        operation.showPosData[i] = {
          startPosData: data
        };
      }

      for (i = 0; target = operation.toHide[i]; i++) {
        data = target.getPosData();
        operation.toHidePosData[i] = {
          startPosData: data
        };
      }

      operation.startX = parentRect.left;
      operation.startY = parentRect.top;
      operation.startHeight = self.incPadding ? parentRect.height : parentRect.height - parseFloat(parentStyle.paddingTop) - parseFloat(parentStyle.paddingBottom) - parseFloat(parentStyle.borderTop) - parseFloat(parentStyle.borderBottom);
      operation.startWidth = self.incPadding ? parentRect.width : parentRect.width - parseFloat(parentStyle.paddingLeft) - parseFloat(parentStyle.paddingRight) - parseFloat(parentStyle.borderLeft) - parseFloat(parentStyle.borderRight);
      self.callActions('afterGetStartMixData', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    setInter: function setInter(operation) {
      var self = this,
          target = null,
          i = -1;
      self.callActions('beforeSetInter', arguments); // Prevent scrollbar flicker on non-inertial scroll platforms by clamping height/width

      if (self.config.animation.clampHeight) {
        self.dom.parent.style.height = operation.startHeight + 'px';
        self.dom.parent.style.overflow = 'hidden';
      }

      if (self.config.animation.clampWidth) {
        self.dom.parent.style.width = operation.startWidth + 'px';
        self.dom.parent.style.overflow = 'hidden';
      }

      for (i = 0; target = operation.toShow[i]; i++) {
        target.show();
      }

      if (operation.willChangeLayout) {
        h.removeClass(self.dom.container, operation.startContainerClassName);
        h.addClass(self.dom.container, operation.newContainerClassName);
      }

      self.callActions('afterSetInter', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    getInterMixData: function getInterMixData(operation) {
      var self = this,
          target = null,
          i = -1;
      self.callActions('beforeGetInterMixData', arguments);

      for (i = 0; target = operation.show[i]; i++) {
        operation.showPosData[i].interPosData = target.getPosData();
      }

      for (i = 0; target = operation.toHide[i]; i++) {
        operation.toHidePosData[i].interPosData = target.getPosData();
      }

      self.callActions('afterGetInterMixData', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    setFinal: function setFinal(operation) {
      var self = this,
          target = null,
          i = -1;
      self.callActions('beforeSetFinal', arguments);
      operation.willSort && self.printSort(false, operation);

      for (i = 0; target = operation.toHide[i]; i++) {
        target.hide();
      }

      self.callActions('afterSetFinal', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    getFinalMixData: function getFinalMixData(operation) {
      var self = this,
          parentStyle = null,
          parentRect = null,
          target = null,
          i = -1;
      self.callActions('beforeGetFinalMixData', arguments);

      for (i = 0; target = operation.show[i]; i++) {
        operation.showPosData[i].finalPosData = target.getPosData();
      }

      for (i = 0; target = operation.toHide[i]; i++) {
        operation.toHidePosData[i].finalPosData = target.getPosData();
      } // Remove clamping


      if (self.config.animation.clampHeight || self.config.animation.clampWidth) {
        self.dom.parent.style.height = self.dom.parent.style.width = self.dom.parent.style.overflow = '';
      }

      if (!self.incPadding) {
        parentStyle = window.getComputedStyle(self.dom.parent);
      }

      parentRect = self.dom.parent.getBoundingClientRect();
      operation.newX = parentRect.left;
      operation.newY = parentRect.top;
      operation.newHeight = self.incPadding ? parentRect.height : parentRect.height - parseFloat(parentStyle.paddingTop) - parseFloat(parentStyle.paddingBottom) - parseFloat(parentStyle.borderTop) - parseFloat(parentStyle.borderBottom);
      operation.newWidth = self.incPadding ? parentRect.width : parentRect.width - parseFloat(parentStyle.paddingLeft) - parseFloat(parentStyle.paddingRight) - parseFloat(parentStyle.borderLeft) - parseFloat(parentStyle.borderRight);
      operation.viewportDeltaX = operation.docState.viewportWidth - this.dom.document.documentElement.clientWidth;
      operation.viewportDeltaY = operation.docState.viewportHeight - this.dom.document.documentElement.clientHeight;

      if (operation.willSort) {
        self.printSort(true, operation);
      }

      for (i = 0; target = operation.toShow[i]; i++) {
        target.hide();
      }

      for (i = 0; target = operation.toHide[i]; i++) {
        target.show();
      }

      if (operation.willChangeLayout) {
        h.removeClass(self.dom.container, operation.newContainerClassName);
        h.addClass(self.dom.container, self.config.layout.containerClassName);
      }

      self.callActions('afterGetFinalMixData', arguments);
    },

    /**
     * @private
     * @instance
     * @since    3.0.0
     * @param    {Operation}     operation
     */
    getTweenData: function getTweenData(operation) {
      var self = this,
          target = null,
          posData = null,
          effectNames = Object.getOwnPropertyNames(self.effectsIn),
          effectName = '',
          effect = null,
          widthChange = -1,
          heightChange = -1,
          i = -1,
          j = -1;
      self.callActions('beforeGetTweenData', arguments);

      for (i = 0; target = operation.show[i]; i++) {
        posData = operation.showPosData[i];
        posData.posIn = new _mixitup.StyleData();
        posData.posOut = new _mixitup.StyleData();
        posData.tweenData = new _mixitup.StyleData(); // Process x and y

        if (target.isShown) {
          posData.posIn.x = posData.startPosData.x - posData.interPosData.x;
          posData.posIn.y = posData.startPosData.y - posData.interPosData.y;
        } else {
          posData.posIn.x = posData.posIn.y = 0;
        }

        posData.posOut.x = posData.finalPosData.x - posData.interPosData.x;
        posData.posOut.y = posData.finalPosData.y - posData.interPosData.y; // Process opacity

        posData.posIn.opacity = target.isShown ? 1 : self.effectsIn.opacity;
        posData.posOut.opacity = 1;
        posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity; // Adjust x and y if not nudging

        if (!target.isShown && !self.config.animation.nudge) {
          posData.posIn.x = posData.posOut.x;
          posData.posIn.y = posData.posOut.y;
        }

        posData.tweenData.x = posData.posOut.x - posData.posIn.x;
        posData.tweenData.y = posData.posOut.y - posData.posIn.y; // Process width, height, and margins

        if (self.config.animation.animateResizeTargets) {
          posData.posIn.width = posData.startPosData.width;
          posData.posIn.height = posData.startPosData.height; // "||" Prevents width/height change from including 0 width/height if hiding or showing

          widthChange = (posData.startPosData.width || posData.finalPosData.width) - posData.interPosData.width;
          posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;
          heightChange = (posData.startPosData.height || posData.finalPosData.height) - posData.interPosData.height;
          posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;
          posData.posOut.width = posData.finalPosData.width;
          posData.posOut.height = posData.finalPosData.height;
          widthChange = (posData.finalPosData.width || posData.startPosData.width) - posData.interPosData.width;
          posData.posOut.marginRight = posData.finalPosData.marginRight - widthChange;
          heightChange = (posData.finalPosData.height || posData.startPosData.height) - posData.interPosData.height;
          posData.posOut.marginBottom = posData.finalPosData.marginBottom - heightChange;
          posData.tweenData.width = posData.posOut.width - posData.posIn.width;
          posData.tweenData.height = posData.posOut.height - posData.posIn.height;
          posData.tweenData.marginRight = posData.posOut.marginRight - posData.posIn.marginRight;
          posData.tweenData.marginBottom = posData.posOut.marginBottom - posData.posIn.marginBottom;
        } // Process transforms


        for (j = 0; effectName = effectNames[j]; j++) {
          effect = self.effectsIn[effectName];
          if (!(effect instanceof _mixitup.TransformData) || !effect.value) continue;
          posData.posIn[effectName].value = effect.value;
          posData.posOut[effectName].value = 0;
          posData.tweenData[effectName].value = posData.posOut[effectName].value - posData.posIn[effectName].value;
          posData.posIn[effectName].unit = posData.posOut[effectName].unit = posData.tweenData[effectName].unit = effect.unit;
        }
      }

      for (i = 0; target = operation.toHide[i]; i++) {
        posData = operation.toHidePosData[i];
        posData.posIn = new _mixitup.StyleData();
        posData.posOut = new _mixitup.StyleData();
        posData.tweenData = new _mixitup.StyleData(); // Process x and y

        posData.posIn.x = target.isShown ? posData.startPosData.x - posData.interPosData.x : 0;
        posData.posIn.y = target.isShown ? posData.startPosData.y - posData.interPosData.y : 0;
        posData.posOut.x = self.config.animation.nudge ? 0 : posData.posIn.x;
        posData.posOut.y = self.config.animation.nudge ? 0 : posData.posIn.y;
        posData.tweenData.x = posData.posOut.x - posData.posIn.x;
        posData.tweenData.y = posData.posOut.y - posData.posIn.y; // Process width, height, and margins

        if (self.config.animation.animateResizeTargets) {
          posData.posIn.width = posData.startPosData.width;
          posData.posIn.height = posData.startPosData.height;
          widthChange = posData.startPosData.width - posData.interPosData.width;
          posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;
          heightChange = posData.startPosData.height - posData.interPosData.height;
          posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;
        } // Process opacity


        posData.posIn.opacity = 1;
        posData.posOut.opacity = self.effectsOut.opacity;
        posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity; // Process transforms

        for (j = 0; effectName = effectNames[j]; j++) {
          effect = self.effectsOut[effectName];
          if (!(effect instanceof _mixitup.TransformData) || !effect.value) continue;
          posData.posIn[effectName].value = 0;
          posData.posOut[effectName].value = effect.value;
          posData.tweenData[effectName].value = posData.posOut[effectName].value - posData.posIn[effectName].value;
          posData.posIn[effectName].unit = posData.posOut[effectName].unit = posData.tweenData[effectName].unit = effect.unit;
        }
      }

      self.callActions('afterGetTweenData', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    moveTargets: function moveTargets(operation) {
      var self = this,
          target = null,
          moveData = null,
          posData = null,
          statusChange = '',
          willTransition = false,
          staggerIndex = -1,
          i = -1,
          checkProgress = self.checkProgress.bind(self);
      self.callActions('beforeMoveTargets', arguments); // TODO: this is an extra loop in addition to the calcs
      // done in getOperation, could some of this be done there?

      for (i = 0; target = operation.show[i]; i++) {
        moveData = new _mixitup.IMoveData();
        posData = operation.showPosData[i];
        statusChange = target.isShown ? 'none' : 'show';
        willTransition = self.willTransition(statusChange, operation.hasEffect, posData.posIn, posData.posOut);

        if (willTransition) {
          // Prevent non-transitioning targets from incrementing the staggerIndex
          staggerIndex++;
        }

        target.show();
        moveData.posIn = posData.posIn;
        moveData.posOut = posData.posOut;
        moveData.statusChange = statusChange;
        moveData.staggerIndex = staggerIndex;
        moveData.operation = operation;
        moveData.callback = willTransition ? checkProgress : null;
        target.move(moveData);
      }

      for (i = 0; target = operation.toHide[i]; i++) {
        posData = operation.toHidePosData[i];
        moveData = new _mixitup.IMoveData();
        statusChange = 'hide';
        willTransition = self.willTransition(statusChange, posData.posIn, posData.posOut);
        moveData.posIn = posData.posIn;
        moveData.posOut = posData.posOut;
        moveData.statusChange = statusChange;
        moveData.staggerIndex = i;
        moveData.operation = operation;
        moveData.callback = willTransition ? checkProgress : null;
        target.move(moveData);
      }

      if (self.config.animation.animateResizeContainer) {
        self.dom.parent.style[_mixitup.features.transitionProp] = 'height ' + self.config.animation.duration + 'ms ease, ' + 'width ' + self.config.animation.duration + 'ms ease ';
        requestAnimationFrame(function () {
          if (operation.startHeight !== operation.newHeight && operation.viewportDeltaY !== operation.startHeight - operation.newHeight) {
            self.dom.parent.style.height = operation.newHeight + 'px';
          }

          if (operation.startWidth !== operation.newWidth && operation.viewportDeltaX !== operation.startWidth - operation.newWidth) {
            self.dom.parent.style.width = operation.newWidth + 'px';
          }
        });
      }

      if (operation.willChangeLayout) {
        h.removeClass(self.dom.container, self.config.layout.ContainerClassName);
        h.addClass(self.dom.container, operation.newContainerClassName);
      }

      self.callActions('afterMoveTargets', arguments);
    },

    /**
     * @private
     * @instance
     * @return  {boolean}
     */
    hasEffect: function hasEffect() {
      var self = this,
          EFFECTABLES = ['scale', 'translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ'],
          effectName = '',
          effect = null,
          result = false,
          value = -1,
          i = -1;

      if (self.effectsIn.opacity !== 1) {
        return self.callFilters('resultHasEffect', true, arguments);
      }

      for (i = 0; effectName = EFFECTABLES[i]; i++) {
        effect = self.effectsIn[effectName];
        value = _typeof(effect) && effect.value !== 'undefined' ? effect.value : effect;

        if (value !== 0) {
          result = true;
          break;
        }
      }

      return self.callFilters('resultHasEffect', result, arguments);
    },

    /**
     * Determines if a target element will transition in
     * some fasion and therefore requires binding of
     * transitionEnd
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {string}        statusChange
     * @param   {boolean}       hasEffect
     * @param   {StyleData}     posIn
     * @param   {StyleData}     posOut
     * @return  {boolean}
     */
    willTransition: function willTransition(statusChange, hasEffect, posIn, posOut) {
      var self = this,
          result = false;

      if (!h.isVisible(self.dom.container)) {
        // If the container is not visible, the transitionEnd
        // event will not occur and MixItUp will hang
        result = false;
      } else if (statusChange !== 'none' && hasEffect || posIn.x !== posOut.x || posIn.y !== posOut.y) {
        // If opacity and/or translate will change
        result = true;
      } else if (self.config.animation.animateResizeTargets) {
        // Check if width, height or margins will change
        result = posIn.width !== posOut.width || posIn.height !== posOut.height || posIn.marginRight !== posOut.marginRight || posIn.marginTop !== posOut.marginTop;
      } else {
        result = false;
      }

      return self.callFilters('resultWillTransition', result, arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    checkProgress: function checkProgress(operation) {
      var self = this;
      self.targetsDone++;

      if (self.targetsBound === self.targetsDone) {
        self.cleanUp(operation);
      }
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Operation}     operation
     * @return  {void}
     */
    cleanUp: function cleanUp(operation) {
      var self = this,
          target = null,
          whitespaceBefore = null,
          whitespaceAfter = null,
          nextInQueue = null,
          i = -1;
      self.callActions('beforeCleanUp', arguments);
      self.targetsMoved = self.targetsImmovable = self.targetsBound = self.targetsDone = 0;

      for (i = 0; target = operation.show[i]; i++) {
        target.cleanUp();
        target.show();
      }

      for (i = 0; target = operation.toHide[i]; i++) {
        target.cleanUp();
        target.hide();
      }

      if (operation.willSort) {
        self.printSort(false, operation);
      } // Remove any styles applied to the parent container


      self.dom.parent.style[_mixitup.features.transitionProp] = self.dom.parent.style.height = self.dom.parent.style.width = self.dom.parent.style.overflow = self.dom.parent.style[_mixitup.features.perspectiveProp] = self.dom.parent.style[_mixitup.features.perspectiveOriginProp] = '';

      if (operation.willChangeLayout) {
        h.removeClass(self.dom.container, operation.startContainerClassName);
        h.addClass(self.dom.container, operation.newContainerClassName);
      }

      if (operation.toRemove.length) {
        for (i = 0; target = self.targets[i]; i++) {
          if (operation.toRemove.indexOf(target) > -1) {
            if ((whitespaceBefore = target.dom.el.previousSibling) && whitespaceBefore.nodeName === '#text' && (whitespaceAfter = target.dom.el.nextSibling) && whitespaceAfter.nodeName === '#text') {
              h.removeWhitespace(whitespaceBefore);
            }

            if (!operation.willSort) {
              // NB: Sorting will remove targets as a bi-product of `printSort()`
              self.dom.parent.removeChild(target.dom.el);
            }

            self.targets.splice(i, 1);
            target.isInDom = false;
            i--;
          }
        } // Since targets have been removed, the original order must be updated


        self.origOrder = self.targets;
      }

      if (operation.willSort) {
        self.targets = operation.newOrder;
      }

      self.state = operation.newState;
      self.lastOperation = operation;
      self.dom.targets = self.state.targets; // mixEnd

      _mixitup.events.fire('mixEnd', self.dom.container, {
        state: self.state,
        instance: self
      }, self.dom.document);

      if (typeof self.config.callbacks.onMixEnd === 'function') {
        self.config.callbacks.onMixEnd.call(self.dom.container, self.state, self);
      }

      if (operation.hasFailed) {
        // mixFail
        _mixitup.events.fire('mixFail', self.dom.container, {
          state: self.state,
          instance: self
        }, self.dom.document);

        if (typeof self.config.callbacks.onMixFail === 'function') {
          self.config.callbacks.onMixFail.call(self.dom.container, self.state, self);
        }

        h.addClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));
      } // User-defined callback function


      if (typeof self.userCallback === 'function') {
        self.userCallback.call(self.dom.container, self.state, self);
      }

      if (typeof self.userDeferred.resolve === 'function') {
        self.userDeferred.resolve(self.state);
      }

      self.userCallback = null;
      self.userDeferred = null;
      self.lastClicked = null;
      self.isToggling = false;
      self.isBusy = false;

      if (self.queue.length) {
        self.callActions('beforeReadQueueCleanUp', arguments);
        nextInQueue = self.queue.shift(); // Update non-public API properties stored in queue

        self.userDeferred = nextInQueue.deferred;
        self.isToggling = nextInQueue.isToggling;
        self.lastClicked = nextInQueue.triggerElement;

        if (nextInQueue.instruction.command instanceof _mixitup.CommandMultimix) {
          self.multimix.apply(self, nextInQueue.args);
        } else {
          self.dataset.apply(self, nextInQueue.args);
        }
      }

      self.callActions('afterCleanUp', arguments);
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Array<*>}  args
     * @return  {mixitup.UserInstruction}
     */
    parseMultimixArgs: function parseMultimixArgs(args) {
      var self = this,
          instruction = new _mixitup.UserInstruction(),
          arg = null,
          i = -1;
      instruction.animate = self.config.animation.enable;
      instruction.command = new _mixitup.CommandMultimix();

      for (i = 0; i < args.length; i++) {
        arg = args[i];
        if (arg === null) continue;

        if (_typeof(arg) === 'object') {
          h.extend(instruction.command, arg);
        } else if (typeof arg === 'boolean') {
          instruction.animate = arg;
        } else if (typeof arg === 'function') {
          instruction.callback = arg;
        }
      } // Coerce arbitrary command arguments into typed command objects


      if (instruction.command.insert && !(instruction.command.insert instanceof _mixitup.CommandInsert)) {
        instruction.command.insert = self.parseInsertArgs([instruction.command.insert]).command;
      }

      if (instruction.command.remove && !(instruction.command.remove instanceof _mixitup.CommandRemove)) {
        instruction.command.remove = self.parseRemoveArgs([instruction.command.remove]).command;
      }

      if (instruction.command.filter && !(instruction.command.filter instanceof _mixitup.CommandFilter)) {
        instruction.command.filter = self.parseFilterArgs([instruction.command.filter]).command;
      }

      if (instruction.command.sort && !(instruction.command.sort instanceof _mixitup.CommandSort)) {
        instruction.command.sort = self.parseSortArgs([instruction.command.sort]).command;
      }

      if (instruction.command.changeLayout && !(instruction.command.changeLayout instanceof _mixitup.CommandChangeLayout)) {
        instruction.command.changeLayout = self.parseChangeLayoutArgs([instruction.command.changeLayout]).command;
      }

      instruction = self.callFilters('instructionParseMultimixArgs', instruction, arguments);
      h.freeze(instruction);
      return instruction;
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Array<*>}  args
     * @return  {mixitup.UserInstruction}
     */
    parseFilterArgs: function parseFilterArgs(args) {
      var self = this,
          instruction = new _mixitup.UserInstruction(),
          arg = null,
          i = -1;
      instruction.animate = self.config.animation.enable;
      instruction.command = new _mixitup.CommandFilter();

      for (i = 0; i < args.length; i++) {
        arg = args[i];

        if (typeof arg === 'string') {
          // Selector
          instruction.command.selector = arg;
        } else if (arg === null) {
          instruction.command.collection = [];
        } else if (_typeof(arg) === 'object' && h.isElement(arg, self.dom.document)) {
          // Single element
          instruction.command.collection = [arg];
        } else if (_typeof(arg) === 'object' && typeof arg.length !== 'undefined') {
          // Multiple elements in array, NodeList or jQuery collection
          instruction.command.collection = h.arrayFromList(arg);
        } else if (_typeof(arg) === 'object') {
          // Filter command
          h.extend(instruction.command, arg);
        } else if (typeof arg === 'boolean') {
          instruction.animate = arg;
        } else if (typeof arg === 'function') {
          instruction.callback = arg;
        }
      }

      if (instruction.command.selector && instruction.command.collection) {
        throw new Error(_mixitup.messages.errorFilterInvalidArguments());
      }

      instruction = self.callFilters('instructionParseFilterArgs', instruction, arguments);
      h.freeze(instruction);
      return instruction;
    },
    parseSortArgs: function parseSortArgs(args) {
      var self = this,
          instruction = new _mixitup.UserInstruction(),
          arg = null,
          sortString = '',
          i = -1;
      instruction.animate = self.config.animation.enable;
      instruction.command = new _mixitup.CommandSort();

      for (i = 0; i < args.length; i++) {
        arg = args[i];
        if (arg === null) continue;

        switch (_typeof(arg)) {
          case 'string':
            // Sort string
            sortString = arg;
            break;

          case 'object':
            // Array of element references
            if (arg.length) {
              instruction.command.collection = h.arrayFromList(arg);
            }

            break;

          case 'boolean':
            instruction.animate = arg;
            break;

          case 'function':
            instruction.callback = arg;
            break;
        }
      }

      if (sortString) {
        instruction.command = self.parseSortString(sortString, instruction.command);
      }

      instruction = self.callFilters('instructionParseSortArgs', instruction, arguments);
      h.freeze(instruction);
      return instruction;
    },

    /**
     * @private
     * @instance
     * @since   2.0.0
     * @param   {Array<*>}  args
     * @return  {mixitup.UserInstruction}
     */
    parseInsertArgs: function parseInsertArgs(args) {
      var self = this,
          instruction = new _mixitup.UserInstruction(),
          arg = null,
          i = -1;
      instruction.animate = self.config.animation.enable;
      instruction.command = new _mixitup.CommandInsert();

      for (i = 0; i < args.length; i++) {
        arg = args[i];
        if (arg === null) continue;

        if (typeof arg === 'number') {
          // Insert index
          instruction.command.index = arg;
        } else if (typeof arg === 'string' && ['before', 'after'].indexOf(arg) > -1) {
          // 'before'/'after'
          instruction.command.position = arg;
        } else if (typeof arg === 'string') {
          // Markup
          instruction.command.collection = h.arrayFromList(h.createElement(arg).childNodes);
        } else if (_typeof(arg) === 'object' && h.isElement(arg, self.dom.document)) {
          // Single element
          !instruction.command.collection.length ? instruction.command.collection = [arg] : instruction.command.sibling = arg;
        } else if (_typeof(arg) === 'object' && arg.length) {
          // Multiple elements in array or jQuery collection
          !instruction.command.collection.length ? instruction.command.collection = arg : instruction.command.sibling = arg[0];
        } else if (_typeof(arg) === 'object' && arg.childNodes && arg.childNodes.length) {
          // Document fragment
          !instruction.command.collection.length ? instruction.command.collection = h.arrayFromList(arg.childNodes) : instruction.command.sibling = arg.childNodes[0];
        } else if (_typeof(arg) === 'object') {
          // Insert command
          h.extend(instruction.command, arg);
        } else if (typeof arg === 'boolean') {
          instruction.animate = arg;
        } else if (typeof arg === 'function') {
          instruction.callback = arg;
        }
      }

      if (instruction.command.index && instruction.command.sibling) {
        throw new Error(_mixitup.messages.errorInsertInvalidArguments());
      }

      if (!instruction.command.collection.length && self.config.debug.showWarnings) {
        console.warn(_mixitup.messages.warningInsertNoElements());
      }

      instruction = self.callFilters('instructionParseInsertArgs', instruction, arguments);
      h.freeze(instruction);
      return instruction;
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Array<*>}  args
     * @return  {mixitup.UserInstruction}
     */
    parseRemoveArgs: function parseRemoveArgs(args) {
      var self = this,
          instruction = new _mixitup.UserInstruction(),
          target = null,
          arg = null,
          i = -1;
      instruction.animate = self.config.animation.enable;
      instruction.command = new _mixitup.CommandRemove();

      for (i = 0; i < args.length; i++) {
        arg = args[i];
        if (arg === null) continue;

        switch (_typeof(arg)) {
          case 'number':
            if (self.targets[arg]) {
              instruction.command.targets[0] = self.targets[arg];
            }

            break;

          case 'string':
            instruction.command.collection = h.arrayFromList(self.dom.parent.querySelectorAll(arg));
            break;

          case 'object':
            if (arg && arg.length) {
              instruction.command.collection = arg;
            } else if (h.isElement(arg, self.dom.document)) {
              instruction.command.collection = [arg];
            } else {
              // Remove command
              h.extend(instruction.command, arg);
            }

            break;

          case 'boolean':
            instruction.animate = arg;
            break;

          case 'function':
            instruction.callback = arg;
            break;
        }
      }

      if (instruction.command.collection.length) {
        for (i = 0; target = self.targets[i]; i++) {
          if (instruction.command.collection.indexOf(target.dom.el) > -1) {
            instruction.command.targets.push(target);
          }
        }
      }

      if (!instruction.command.targets.length && self.config.debug.showWarnings) {
        console.warn(_mixitup.messages.warningRemoveNoElements());
      }

      h.freeze(instruction);
      return instruction;
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Array<*>}  args
     * @return  {mixitup.UserInstruction}
     */
    parseDatasetArgs: function parseDatasetArgs(args) {
      var self = this,
          instruction = new _mixitup.UserInstruction(),
          arg = null,
          i = -1;
      instruction.animate = self.config.animation.enable;
      instruction.command = new _mixitup.CommandDataset();

      for (i = 0; i < args.length; i++) {
        arg = args[i];
        if (arg === null) continue;

        switch (_typeof(arg)) {
          case 'object':
            if (Array.isArray(arg) || typeof arg.length === 'number') {
              instruction.command.dataset = arg;
            } else {
              // Change layout command
              h.extend(instruction.command, arg);
            }

            break;

          case 'boolean':
            instruction.animate = arg;
            break;

          case 'function':
            instruction.callback = arg;
            break;
        }
      }

      h.freeze(instruction);
      return instruction;
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Array<*>}  args
     * @return  {mixitup.UserInstruction}
     */
    parseChangeLayoutArgs: function parseChangeLayoutArgs(args) {
      var self = this,
          instruction = new _mixitup.UserInstruction(),
          arg = null,
          i = -1;
      instruction.animate = self.config.animation.enable;
      instruction.command = new _mixitup.CommandChangeLayout();

      for (i = 0; i < args.length; i++) {
        arg = args[i];
        if (arg === null) continue;

        switch (_typeof(arg)) {
          case 'string':
            instruction.command.containerClassName = arg;
            break;

          case 'object':
            // Change layout command
            h.extend(instruction.command, arg);
            break;

          case 'boolean':
            instruction.animate = arg;
            break;

          case 'function':
            instruction.callback = arg;
            break;
        }
      }

      h.freeze(instruction);
      return instruction;
    },

    /**
     * @private
     * @instance
     * @since       3.0.0
     * @param       {mixitup.QueueItem}         queueItem
     * @return      {Promise.<mixitup.State>}
     */
    queueMix: function queueMix(queueItem) {
      var self = this,
          deferred = null,
          toggleSelector = '';
      self.callActions('beforeQueueMix', arguments);
      deferred = h.defer(_mixitup.libraries);

      if (self.config.animation.queue && self.queue.length < self.config.animation.queueLimit) {
        queueItem.deferred = deferred;
        self.queue.push(queueItem); // Keep controls in sync with user interactions. Mixer will catch up as it drains the queue.

        if (self.config.controls.enable) {
          if (self.isToggling) {
            self.buildToggleArray(queueItem.instruction.command);
            toggleSelector = self.getToggleSelector();
            self.updateControls({
              filter: {
                selector: toggleSelector
              }
            });
          } else {
            self.updateControls(queueItem.instruction.command);
          }
        }
      } else {
        if (self.config.debug.showWarnings) {
          console.warn(_mixitup.messages.warningMultimixInstanceQueueFull());
        }

        deferred.resolve(self.state);

        _mixitup.events.fire('mixBusy', self.dom.container, {
          state: self.state,
          instance: self
        }, self.dom.document);

        if (typeof self.config.callbacks.onMixBusy === 'function') {
          self.config.callbacks.onMixBusy.call(self.dom.container, self.state, self);
        }
      }

      return self.callFilters('promiseQueueMix', deferred.promise, arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Array.<object>}    newDataset
     * @return  {Operation}
     */
    getDataOperation: function getDataOperation(newDataset) {
      var self = this,
          operation = new _mixitup.Operation(),
          startDataset = [];
      operation = self.callFilters('operationUnmappedGetDataOperation', operation, arguments);

      if (self.dom.targets.length && !(startDataset = self.state.activeDataset || []).length) {
        throw new Error(_mixitup.messages.errorDatasetNotSet());
      }

      operation.id = h.randomHex();
      operation.startState = self.state;
      operation.startDataset = startDataset;
      operation.newDataset = newDataset.slice();
      self.diffDatasets(operation);
      operation.startOrder = self.targets;
      operation.newOrder = operation.show;

      if (self.config.animation.enable) {
        self.getStartMixData(operation);
        self.setInter(operation);
        operation.docState = h.getDocumentState(self.dom.document);
        self.getInterMixData(operation);
        self.setFinal(operation);
        self.getFinalMixData(operation);
        self.parseEffects();
        operation.hasEffect = self.hasEffect();
        self.getTweenData(operation);
      }

      self.targets = operation.show.slice();
      operation.newState = self.buildState(operation); // NB: Targets to be removed must be included in `self.targets` for removal during clean up,
      // but are added after state is built so that state is accurate

      Array.prototype.push.apply(self.targets, operation.toRemove);
      operation = self.callFilters('operationMappedGetDataOperation', operation, arguments);
      return operation;
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {mixitup.Operation} operation
     * @return  {void}
     */
    diffDatasets: function diffDatasets(operation) {
      var self = this,
          persistantStartIds = [],
          persistantNewIds = [],
          insertedTargets = [],
          data = null,
          target = null,
          el = null,
          frag = null,
          nextEl = null,
          uids = {},
          id = '',
          i = -1;
      self.callActions('beforeDiffDatasets', arguments);

      for (i = 0; data = operation.newDataset[i]; i++) {
        if (typeof (id = data[self.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {
          throw new TypeError(_mixitup.messages.errorDatasetInvalidUidKey({
            uidKey: self.config.data.uidKey
          }));
        }

        if (!uids[id]) {
          uids[id] = true;
        } else {
          throw new Error(_mixitup.messages.errorDatasetDuplicateUid({
            uid: id
          }));
        }

        if ((target = self.cache[id]) instanceof _mixitup.Target) {
          // Already in cache
          if (self.config.data.dirtyCheck && !h.deepEquals(data, target.data)) {
            // change detected
            el = target.render(data);
            target.data = data;

            if (el !== target.dom.el) {
              // Update target element reference
              if (target.isInDom) {
                target.unbindEvents();
                self.dom.parent.replaceChild(el, target.dom.el);
              }

              if (!target.isShown) {
                el.style.display = 'none';
              }

              target.dom.el = el;

              if (target.isInDom) {
                target.bindEvents();
              }
            }
          }

          el = target.dom.el;
        } else {
          // New target
          target = new _mixitup.Target();
          target.init(null, self, data);
          target.hide();
        }

        if (!target.isInDom) {
          // Adding to DOM
          if (!frag) {
            // Open frag
            frag = self.dom.document.createDocumentFragment();
          }

          if (frag.lastElementChild) {
            frag.appendChild(self.dom.document.createTextNode(' '));
          }

          frag.appendChild(target.dom.el);
          target.isInDom = true;
          target.unbindEvents();
          target.bindEvents();
          target.hide();
          operation.toShow.push(target);
          insertedTargets.push(target);
        } else {
          // Already in DOM
          nextEl = target.dom.el.nextElementSibling;
          persistantNewIds.push(id);

          if (frag) {
            // Close and insert previously opened frag
            if (frag.lastElementChild) {
              frag.appendChild(self.dom.document.createTextNode(' '));
            }

            self.insertDatasetFrag(frag, target.dom.el, insertedTargets);
            frag = null;
          }
        }

        operation.show.push(target);
      }

      if (frag) {
        // Unclosed frag remaining
        nextEl = nextEl || self.config.layout.siblingAfter;

        if (nextEl) {
          frag.appendChild(self.dom.document.createTextNode(' '));
        }

        self.insertDatasetFrag(frag, nextEl, insertedTargets);
      }

      for (i = 0; data = operation.startDataset[i]; i++) {
        id = data[self.config.data.uidKey];
        target = self.cache[id];

        if (operation.show.indexOf(target) < 0) {
          // Previously shown but now absent
          operation.hide.push(target);
          operation.toHide.push(target);
          operation.toRemove.push(target);
        } else {
          persistantStartIds.push(id);
        }
      }

      if (!h.isEqualArray(persistantStartIds, persistantNewIds)) {
        operation.willSort = true;
      }

      self.callActions('afterDiffDatasets', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.1.5
     * @param   {DocumentFragment}          frag
     * @param   {(HTMLElement|null)}        nextEl
     * @param   {Array.<mixitup.Target>}    targets
     * @return  {void}
     */
    insertDatasetFrag: function insertDatasetFrag(frag, nextEl, targets) {
      var self = this;
      var insertAt = nextEl ? h.arrayFromList(self.dom.parent.children).indexOf(nextEl) : self.targets.length;
      self.dom.parent.insertBefore(frag, nextEl);

      while (targets.length) {
        self.targets.splice(insertAt, 0, targets.shift());
        insertAt++;
      }
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {mixitup.CommandSort} sortCommandA
     * @param   {mixitup.CommandSort} sortCommandB
     * @return  {boolean}
     */
    willSort: function willSort(sortCommandA, sortCommandB) {
      var self = this,
          result = false;

      if (self.config.behavior.liveSort || sortCommandA.order === 'random' || sortCommandA.attribute !== sortCommandB.attribute || sortCommandA.order !== sortCommandB.order || sortCommandA.collection !== sortCommandB.collection || sortCommandA.next === null && sortCommandB.next || sortCommandA.next && sortCommandB.next === null) {
        result = true;
      } else if (sortCommandA.next && sortCommandB.next) {
        result = self.willSort(sortCommandA.next, sortCommandB.next);
      } else {
        result = false;
      }

      return self.callFilters('resultWillSort', result, arguments);
    },

    /**
     * A shorthand method for `.filter('all')`. Shows all targets in the container.
     *
     * @example
     *
     * .show()
     *
     * @example <caption>Example: Showing all targets</caption>
     *
     * mixer.show()
     *     .then(function(state) {
     *         console.log(state.totalShow === state.totalTargets); // true
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @return      {Promise.<mixitup.State>}
     */
    show: function show() {
      var self = this;
      return self.filter('all');
    },

    /**
     * A shorthand method for `.filter('none')`. Hides all targets in the container.
     *
     * @example
     *
     * .hide()
     *
     * @example <caption>Example: Hiding all targets</caption>
     *
     * mixer.hide()
     *     .then(function(state) {
     *         console.log(state.totalShow === 0); // true
     *         console.log(state.totalHide === state.totalTargets); // true
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @return      {Promise.<mixitup.State>}
     */
    hide: function hide() {
      var self = this;
      return self.filter('none');
    },

    /**
     * Returns a boolean indicating whether or not a MixItUp operation is
     * currently in progress.
     *
     * @example
     *
     * .isMixing()
     *
     * @example <caption>Example: Checking the status of a mixer</caption>
     *
     * mixer.sort('random', function() {
     *     console.log(mixer.isMixing()) // false
     * });
     *
     * console.log(mixer.isMixing()) // true
     *
     * @public
     * @instance
     * @since   2.0.0
     * @return  {boolean}
     */
    isMixing: function isMixing() {
      var self = this;
      return self.isBusy;
    },

    /**
     * Filters all targets in the container by a provided selector string, or the values `'all'`
     * or `'none'`. Only targets matching the selector will be shown.
     *
     * @example
     *
     * .filter(selector [, animate] [, callback])
     *
     * @example <caption>Example 1: Filtering targets by a class selector</caption>
     *
     * mixer.filter('.category-a')
     *     .then(function(state) {
     *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a').length); // true
     *     });
     *
     * @example <caption>Example 2: Filtering targets by an attribute selector</caption>
     *
     * mixer.filter('[data-category~="a"]')
     *     .then(function(state) {
     *         console.log(state.totalShow === containerEl.querySelectorAll('[data-category~="a"]').length); // true
     *     });
     *
     * @example <caption>Example 3: Filtering targets by a compound selector</caption>
     *
     * // Show only those targets with the classes 'category-a' AND 'category-b'
     *
     * mixer.filter('.category-a.category-c')
     *     .then(function(state) {
     *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a.category-c').length); // true
     *     });
     *
     * @example <caption>Example 4: Filtering via an element collection</caption>
     *
     * var collection = Array.from(container.querySelectorAll('.mix'));
     *
     * console.log(collection.length); // 34
     *
     * // Filter the collection manually using Array.prototype.filter
     *
     * var filtered = collection.filter(function(target) {
     *    return parseInt(target.getAttribute('data-price')) > 10;
     * });
     *
     * console.log(filtered.length); // 22
     *
     * // Pass the filtered collection to MixItUp
     *
     * mixer.filter(filtered)
     *    .then(function(state) {
     *        console.log(state.activeFilter.collection.length === 22); // true
     *    });
     *
     * @public
     * @instance
     * @since       2.0.0
     * @param       {(string|HTMLElement|Array.<HTMLElement>)} selector
     *      Any valid CSS selector (i.e. `'.category-a'`), or the values `'all'` or `'none'`. The filter method also accepts a reference to single target element or a collection of target elements to show.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    filter: function filter() {
      var self = this,
          instruction = self.parseFilterArgs(arguments);
      return self.multimix({
        filter: instruction.command
      }, instruction.animate, instruction.callback);
    },

    /**
     * Adds an additional selector to the currently active filter selector, concatenating
     * as per the logic defined in `controls.toggleLogic`.
     *
     * @example
     *
     * .toggleOn(selector [, animate] [, callback])
     *
     * @example <caption>Example: Toggling on a filter selector</caption>
     *
     * console.log(mixer.getState().activeFilter.selector); // '.category-a'
     *
     * mixer.toggleOn('.category-b')
     *     .then(function(state) {
     *         console.log(state.activeFilter.selector); // '.category-a, .category-b'
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {string}    selector
     *      Any valid CSS selector (i.e. `'.category-a'`)
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    toggleOn: function toggleOn() {
      var self = this,
          instruction = self.parseFilterArgs(arguments),
          selector = instruction.command.selector,
          toggleSelector = '';
      self.isToggling = true;

      if (self.toggleArray.indexOf(selector) < 0) {
        self.toggleArray.push(selector);
      }

      toggleSelector = self.getToggleSelector();
      return self.multimix({
        filter: toggleSelector
      }, instruction.animate, instruction.callback);
    },

    /**
     * Removes a selector from the active filter selector.
     *
     * @example
     *
     * .toggleOff(selector [, animate] [, callback])
     *
     * @example <caption>Example: Toggling off a filter selector</caption>
     *
     * console.log(mixer.getState().activeFilter.selector); // '.category-a, .category-b'
     *
     * mixer.toggleOff('.category-b')
     *     .then(function(state) {
     *         console.log(state.activeFilter.selector); // '.category-a'
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {string}    selector
     *      Any valid CSS selector (i.e. `'.category-a'`)
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    toggleOff: function toggleOff() {
      var self = this,
          instruction = self.parseFilterArgs(arguments),
          selector = instruction.command.selector,
          selectorIndex = self.toggleArray.indexOf(selector),
          toggleSelector = '';
      self.isToggling = true;

      if (selectorIndex > -1) {
        self.toggleArray.splice(selectorIndex, 1);
      }

      toggleSelector = self.getToggleSelector();
      return self.multimix({
        filter: toggleSelector
      }, instruction.animate, instruction.callback);
    },

    /**
     * Sorts all targets in the container according to a provided sort string.
     *
     * @example
     *
     * .sort(sortString [, animate] [, callback])
     *
     * @example <caption>Example 1: Sorting by the default DOM order</caption>
     *
     * // Reverse the default order of the targets
     *
     * mixer.sort('default:desc')
     *     .then(function(state) {
     *         console.log(state.activeSort.attribute === 'default'); // true
     *         console.log(state.activeSort.order === 'desc'); // true
     *     });
     *
     * @example <caption>Example 2: Sorting by a custom data-attribute</caption>
     *
     * // Sort the targets by the value of a `data-published-date` attribute
     *
     * mixer.sort('published-date:asc')
     *     .then(function(state) {
     *         console.log(state.activeSort.attribute === 'published-date'); // true
     *         console.log(state.activeSort.order === 'asc'); // true
     *     });
     *
     * @example <caption>Example 3: Sorting by multiple attributes</caption>
     *
     * // Sort the targets by the value of a `data-published-date` attribute, then by `data-title`
     *
     * mixer.sort('published-date:desc data-title:asc')
     *     .then(function(state) {
     *         console.log(state.activeSort.attribute === 'published-date'); // true
     *         console.log(state.activeSort.order === 'desc'); // true
     *
     *         console.log(state.activeSort.next.attribute === 'title'); // true
     *         console.log(state.activeSort.next.order === 'asc'); // true
     *     });
     *
     * @example <caption>Example 4: Sorting by random</caption>
     *
     * mixer.sort('random')
     *     .then(function(state) {
     *         console.log(state.activeSort.order === 'random') // true
     *     });
     *
     * @example <caption>Example 5: Sorting via an element collection</caption>
     *
     * var collection = Array.from(container.querySelectorAll('.mix'));
     *
     * // Swap the position of two elements in the collection:
     *
     * var temp = collection[1];
     *
     * collection[1] = collection[0];
     * collection[0] = temp;
     *
     * // Pass the sorted collection to MixItUp
     *
     * mixer.sort(collection)
     *     .then(function(state) {
     *         console.log(state.targets[0] === collection[0]); // true
     *     });
     *
     * @public
     * @instance
     * @since       2.0.0
     * @param       {(string|Array.<HTMLElement>)}    sortString
     *      A valid sort string (e.g. `'default'`, `'published-date:asc'`, or `'random'`). The sort method also accepts an array of all target elements in a user-defined order.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    sort: function sort() {
      var self = this,
          instruction = self.parseSortArgs(arguments);
      return self.multimix({
        sort: instruction.command
      }, instruction.animate, instruction.callback);
    },

    /**
     * Changes the layout of the container by adding, removing or updating a
     * layout-specific class name. If `animation.animateResizetargets` is
     * enabled, MixItUp will attempt to gracefully animate the width, height,
     * and position of targets between layout states.
     *
     * @example
     *
     * .changeLayout(containerClassName [, animate] [, callback])
     *
     * @example <caption>Example 1: Adding a new class name to the container</caption>
     *
     * mixer.changeLayout('container-list')
     *      .then(function(state) {
     *          console.log(state.activeContainerClass === 'container-list'); // true
     *      });
     *
     * @example <caption>Example 2: Removing a previously added class name from the container</caption>
     *
     * mixer.changeLayout('')
     *      .then(function(state) {
     *          console.log(state.activeContainerClass === ''); // true
     *      });
     *
     * @public
     * @instance
     * @since       2.0.0
     * @param       {string}    containerClassName
     *      A layout-specific class name to add to the container.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    changeLayout: function changeLayout() {
      var self = this,
          instruction = self.parseChangeLayoutArgs(arguments);
      return self.multimix({
        changeLayout: instruction.command
      }, instruction.animate, instruction.callback);
    },

    /**
     * Updates the contents and order of the container to reflect the provided dataset,
     * if the dataset API is in use.
     *
     * The dataset API is designed for use in API-driven JavaScript applications, and
     * can be used instead of DOM-based methods such as `.filter()`, `.sort()`,
     * `.insert()`, etc. When used, insertion, removal, sorting and pagination can be
     * achieved purely via changes to your data model, without the uglyness of having
     * to interact with or query the DOM directly.
     *
     * @example
     *
     * .dataset(dataset [, animate] [, callback])
     *
     * @example <caption>Example 1: Rendering a dataset</caption>
     *
     * var myDataset = [
     *     {id: 1, ...},
     *     {id: 2, ...},
     *     {id: 3, ...}
     * ];
     *
     * mixer.dataset(myDataset)
     *     .then(function(state) {
     *         console.log(state.totalShow === 3); // true
     *     });
     *
     * @example <caption>Example 2: Sorting a dataset</caption>
     *
     * // Create a new dataset in reverse order
     *
     * var newDataset = myDataset.slice().reverse();
     *
     * mixer.dataset(newDataset)
     *     .then(function(state) {
     *         console.log(state.activeDataset[0] === myDataset[2]); // true
     *     });
     *
     * @example <caption>Example 3: Removing an item from the dataset</caption>
     *
     * console.log(myDataset.length); // 3
     *
     * // Create a new dataset with the last item removed.
     *
     * var newDataset = myDataset.slice().pop();
     *
     * mixer.dataset(newDataset)
     *     .then(function(state) {
     *         console.log(state.totalShow === 2); // true
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {Array.<object>}    dataset
     *      An array of objects, each one representing the underlying data model of a target to be rendered.
     * @param       {boolean}           [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}          [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    dataset: function dataset() {
      var self = this,
          instruction = self.parseDatasetArgs(arguments),
          operation = null,
          queueItem = null,
          animate = false;
      self.callActions('beforeDataset', arguments);

      if (!self.isBusy) {
        if (instruction.callback) self.userCallback = instruction.callback;
        animate = instruction.animate ^ self.config.animation.enable ? instruction.animate : self.config.animation.enable;
        operation = self.getDataOperation(instruction.command.dataset);
        return self.goMix(animate, operation);
      } else {
        queueItem = new _mixitup.QueueItem();
        queueItem.args = arguments;
        queueItem.instruction = instruction;
        return self.queueMix(queueItem);
      }
    },

    /**
     * Performs simultaneous `filter`, `sort`, `insert`, `remove` and `changeLayout`
     * operations as requested.
     *
     * @example
     *
     * .multimix(multimixCommand [, animate] [, callback])
     *
     * @example <caption>Example 1: Performing simultaneous filtering and sorting</caption>
     *
     * mixer.multimix({
     *     filter: '.category-b',
     *     sort: 'published-date:desc'
     * })
     *     .then(function(state) {
     *         console.log(state.activeFilter.selector === '.category-b'); // true
     *         console.log(state.activeSort.attribute === 'published-date'); // true
     *     });
     *
     * @example <caption>Example 2: Performing simultaneous sorting, insertion, and removal</caption>
     *
     * console.log(mixer.getState().totalShow); // 6
     *
     * // NB: When inserting via `multimix()`, an object should be provided as the value
     * // for the `insert` portion of the command, allowing for a collection of elements
     * // and an insertion index to be specified.
     *
     * mixer.multimix({
     *     sort: 'published-date:desc', // Sort the container, including any new elements
     *     insert: {
     *         collection: [newElementReferenceA, newElementReferenceB], // Add 2 new elements at index 5
     *         index: 5
     *     },
     *     remove: existingElementReference // Remove 1 existing element
     * })
     *     .then(function(state) {
     *         console.log(state.activeSort.attribute === 'published-date'); // true
     *         console.log(state.totalShow === 7); // true
     *     });
     *
     * @public
     * @instance
     * @since       2.0.0
     * @param       {object}    multimixCommand
     *      An object containing one or more things to do
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    multimix: function multimix() {
      var self = this,
          operation = null,
          animate = false,
          queueItem = null,
          instruction = self.parseMultimixArgs(arguments);
      self.callActions('beforeMultimix', arguments);

      if (!self.isBusy) {
        operation = self.getOperation(instruction.command);

        if (self.config.controls.enable) {
          // Update controls for API calls
          if (instruction.command.filter && !self.isToggling) {
            // As we are not toggling, reset the toggle array
            // so new filter overrides existing toggles
            self.toggleArray.length = 0;
            self.buildToggleArray(operation.command);
          }

          if (self.queue.length < 1) {
            self.updateControls(operation.command);
          }
        }

        if (instruction.callback) self.userCallback = instruction.callback; // Always allow the instruction to override the instance setting

        animate = instruction.animate ^ self.config.animation.enable ? instruction.animate : self.config.animation.enable;
        self.callFilters('operationMultimix', operation, arguments);
        return self.goMix(animate, operation);
      } else {
        queueItem = new _mixitup.QueueItem();
        queueItem.args = arguments;
        queueItem.instruction = instruction;
        queueItem.triggerElement = self.lastClicked;
        queueItem.isToggling = self.isToggling;
        return self.queueMix(queueItem);
      }
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {object}            multimixCommand
     * @param   {boolean}           [isPreFetch]
     *      An optional boolean indicating that the operation is being pre-fetched for execution at a later time.
     * @return  {Operation|null}
     */
    getOperation: function getOperation(multimixCommand) {
      var self = this,
          sortCommand = multimixCommand.sort,
          filterCommand = multimixCommand.filter,
          changeLayoutCommand = multimixCommand.changeLayout,
          removeCommand = multimixCommand.remove,
          insertCommand = multimixCommand.insert,
          operation = new _mixitup.Operation();
      operation = self.callFilters('operationUnmappedGetOperation', operation, arguments);
      operation.id = h.randomHex();
      operation.command = multimixCommand;
      operation.startState = self.state;
      operation.triggerElement = self.lastClicked;

      if (self.isBusy) {
        if (self.config.debug.showWarnings) {
          console.warn(_mixitup.messages.warningGetOperationInstanceBusy());
        }

        return null;
      }

      if (insertCommand) {
        self.insertTargets(insertCommand, operation);
      }

      if (removeCommand) {
        operation.toRemove = removeCommand.targets;
      }

      operation.startSort = operation.newSort = operation.startState.activeSort;
      operation.startOrder = operation.newOrder = self.targets;

      if (sortCommand) {
        operation.startSort = operation.startState.activeSort;
        operation.newSort = sortCommand;
        operation.willSort = self.willSort(sortCommand, operation.startState.activeSort);

        if (operation.willSort) {
          self.sortOperation(operation);
        }
      }

      operation.startFilter = operation.startState.activeFilter;

      if (filterCommand) {
        operation.newFilter = filterCommand;
      } else {
        operation.newFilter = h.extend(new _mixitup.CommandFilter(), operation.startFilter);
      }

      if (operation.newFilter.selector === 'all') {
        operation.newFilter.selector = self.config.selectors.target;
      } else if (operation.newFilter.selector === 'none') {
        operation.newFilter.selector = '';
      }

      self.filterOperation(operation);
      operation.startContainerClassName = operation.startState.activeContainerClassName;

      if (changeLayoutCommand) {
        operation.newContainerClassName = changeLayoutCommand.containerClassName;

        if (operation.newContainerClassName !== operation.startContainerClassName) {
          operation.willChangeLayout = true;
        }
      } else {
        operation.newContainerClassName = operation.startContainerClassName;
      }

      if (self.config.animation.enable) {
        // Populate the operation's position data
        self.getStartMixData(operation);
        self.setInter(operation);
        operation.docState = h.getDocumentState(self.dom.document);
        self.getInterMixData(operation);
        self.setFinal(operation);
        self.getFinalMixData(operation);
        self.parseEffects();
        operation.hasEffect = self.hasEffect();
        self.getTweenData(operation);
      }

      if (operation.willSort) {
        self.targets = operation.newOrder;
      }

      operation.newState = self.buildState(operation);
      return self.callFilters('operationMappedGetOperation', operation, arguments);
    },

    /**
     * Renders a previously created operation at a specific point in its path, as
     * determined by a multiplier between 0 and 1.
     *
     * @example
     * .tween(operation, multiplier)
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {mixitup.Operation}     operation
     *      An operation object created via the `getOperation` method
     *
     * @param   {Float}                 multiplier
     *      Any number between 0 and 1 representing the percentage complete of the operation
     * @return  {void}
     */
    tween: function tween(operation, multiplier) {
      var target = null,
          posData = null,
          toHideIndex = -1,
          i = -1;
      multiplier = Math.min(multiplier, 1);
      multiplier = Math.max(multiplier, 0);

      for (i = 0; target = operation.show[i]; i++) {
        posData = operation.showPosData[i];
        target.applyTween(posData, multiplier);
      }

      for (i = 0; target = operation.hide[i]; i++) {
        if (target.isShown) {
          target.hide();
        }

        if ((toHideIndex = operation.toHide.indexOf(target)) > -1) {
          posData = operation.toHidePosData[toHideIndex];

          if (!target.isShown) {
            target.show();
          }

          target.applyTween(posData, multiplier);
        }
      }
    },

    /**
     * Inserts one or more new target elements into the container at a specified
     * index.
     *
     * To be indexed as targets, new elements must match the `selectors.target`
     * selector (`'.mix'` by default).
     *
     * @example
     *
     * .insert(newElements [, index] [, animate], [, callback])
     *
     * @example <caption>Example 1: Inserting a single element via reference</caption>
     *
     * console.log(mixer.getState().totalShow); // 0
     *
     * // Create a new element
     *
     * var newElement = document.createElement('div');
     * newElement.classList.add('mix');
     *
     * mixer.insert(newElement)
     *     .then(function(state) {
     *         console.log(state.totalShow === 1); // true
     *     });
     *
     * @example <caption>Example 2: Inserting a single element via HTML string</caption>
     *
     * console.log(mixer.getState().totalShow); // 1
     *
     * // Create a new element via reference
     *
     * var newElementHtml = '&lt;div class="mix"&gt;&lt;/div&gt;';
     *
     * // Create and insert the new element at index 1
     *
     * mixer.insert(newElementHtml, 1)
     *     .then(function(state) {
     *         console.log(state.totalShow === 2); // true
     *         console.log(state.show[1].outerHTML === newElementHtml); // true
     *     });
     *
     * @example <caption>Example 3: Inserting multiple elements via reference</caption>
     *
     * console.log(mixer.getState().totalShow); // 2
     *
     * // Create an array of new elements to insert.
     *
     * var newElement1 = document.createElement('div');
     * var newElement2 = document.createElement('div');
     *
     * newElement1.classList.add('mix');
     * newElement2.classList.add('mix');
     *
     * var newElementsCollection = [newElement1, newElement2];
     *
     * // Insert the new elements starting at index 1
     *
     * mixer.insert(newElementsCollection, 1)
     *     .then(function(state) {
     *         console.log(state.totalShow === 4); // true
     *         console.log(state.show[1] === newElement1); // true
     *         console.log(state.show[2] === newElement2); // true
     *     });
     *
     * @example <caption>Example 4: Inserting a jQuery collection object containing one or more elements</caption>
     *
     * console.log(mixer.getState().totalShow); // 4
     *
     * var $newElement = $('&lt;div class="mix"&gt;&lt;/div&gt;');
     *
     * // Insert the new elements starting at index 3
     *
     * mixer.insert($newElement, 3)
     *     .then(function(state) {
     *         console.log(state.totalShow === 5); // true
     *         console.log(state.show[3] === $newElement[0]); // true
     *     });
     *
     * @public
     * @instance
     * @since       2.0.0
     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements
     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.
     * @param       {number}    index=0
     *      The index at which to insert the new element(s). `0` by default.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    insert: function insert() {
      var self = this,
          args = self.parseInsertArgs(arguments);
      return self.multimix({
        insert: args.command
      }, args.animate, args.callback);
    },

    /**
     * Inserts one or more new elements before a provided reference element.
     *
     * @example
     *
     * .insertBefore(newElements, referenceElement [, animate] [, callback])
     *
     * @example <caption>Example: Inserting a new element before a reference element</caption>
     *
     * // An existing reference element is chosen at index 2
     *
     * var referenceElement = mixer.getState().show[2];
     *
     * // Create a new element
     *
     * var newElement = document.createElement('div');
     * newElement.classList.add('mix');
     *
     * mixer.insertBefore(newElement, referenceElement)
     *     .then(function(state) {
     *         // The new element is inserted into the container at index 2, before the reference element
     *
     *         console.log(state.show[2] === newElement); // true
     *
     *         // The reference element is now at index 3
     *
     *         console.log(state.show[3] === referenceElement); // true
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements
     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.
     * @param       {HTMLElement}    referenceElement
     *      A reference to an existing element in the container to insert new elements before.
     *@param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    insertBefore: function insertBefore() {
      var self = this,
          args = self.parseInsertArgs(arguments);
      return self.insert(args.command.collection, 'before', args.command.sibling, args.animate, args.callback);
    },

    /**
     * Inserts one or more new elements after a provided reference element.
     *
     * @example
     *
     * .insertAfter(newElements, referenceElement [, animate] [, callback])
     *
     * @example <caption>Example: Inserting a new element after a reference element</caption>
     *
     * // An existing reference element is chosen at index 2
     *
     * var referenceElement = mixer.getState().show[2];
     *
     * // Create a new element
     *
     * var newElement = document.createElement('div');
     * newElement.classList.add('mix');
     *
     * mixer.insertAfter(newElement, referenceElement)
     *     .then(function(state) {
     *         // The new element is inserted into the container at index 3, after the reference element
     *
     *         console.log(state.show[3] === newElement); // true
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements
     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.
     * @param       {HTMLElement}    referenceElement
     *      A reference to an existing element in the container to insert new elements after.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    insertAfter: function insertAfter() {
      var self = this,
          args = self.parseInsertArgs(arguments);
      return self.insert(args.command.collection, 'after', args.command.sibling, args.animate, args.callback);
    },

    /**
     * Inserts one or more new elements into the container before all existing targets.
     *
     * @example
     *
     * .prepend(newElements [,animate] [,callback])
     *
     * @example <caption>Example: Prepending a new element</caption>
     *
     * // Create a new element
     *
     * var newElement = document.createElement('div');
     * newElement.classList.add('mix');
     *
     * // Insert the element into the container
     *
     * mixer.prepend(newElement)
     *     .then(function(state) {
     *         console.log(state.show[0] === newElement); // true
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements
     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    prepend: function prepend() {
      var self = this,
          args = self.parseInsertArgs(arguments);
      return self.insert(0, args.command.collection, args.animate, args.callback);
    },

    /**
     * Inserts one or more new elements into the container after all existing targets.
     *
     * @example
     *
     * .append(newElements [,animate] [,callback])
     *
     * @example <caption>Example: Appending a new element</caption>
     *
     * // Create a new element
     *
     * var newElement = document.createElement('div');
     * newElement.classList.add('mix');
     *
     * // Insert the element into the container
     *
     * mixer.append(newElement)
     *     .then(function(state) {
     *         console.log(state.show[state.show.length - 1] === newElement); // true
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements
     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    append: function append() {
      var self = this,
          args = self.parseInsertArgs(arguments);
      return self.insert(self.state.totalTargets, args.command.collection, args.animate, args.callback);
    },

    /**
     * Removes one or more existing target elements from the container.
     *
     * @example
     *
     * .remove(elements [, animate] [, callback])
     *
     * @example <caption>Example 1: Removing an element by reference</caption>
     *
     * var elementToRemove = containerEl.firstElementChild;
     *
     * mixer.remove(elementToRemove)
     *      .then(function(state) {
     *          console.log(state.targets.indexOf(elementToRemove) === -1); // true
     *      });
     *
     * @example <caption>Example 2: Removing a collection of elements by reference</caption>
     *
     * var elementsToRemove = containerEl.querySelectorAll('.category-a');
     *
     * console.log(elementsToRemove.length) // 3
     *
     * mixer.remove(elementsToRemove)
     *      .then(function() {
     *          console.log(containerEl.querySelectorAll('.category-a').length); // 0
     *      });
     *
     * @example <caption>Example 3: Removing one or more elements by selector</caption>
     *
     * mixer.remove('.category-a')
     *      .then(function() {
     *          console.log(containerEl.querySelectorAll('.category-a').length); // 0
     *      });
     *
     * @example <caption>Example 4: Removing an element by index</caption>
     *
     * console.log(mixer.getState.totalShow); // 4
     *
     * // Remove the element at index 3
     *
     * mixer.remove(3)
     *      .then(function(state) {
     *          console.log(state.totalShow); // 3
     *          console.log(state.show[3]); // undefined
     *      });
     *
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {(HTMLElement|Array.<HTMLElement>|string|number)}    elements
     *      A reference to a single element to remove, an array-like collection of elements, a selector string, or the index of an element to remove.
     * @param       {boolean}   [animate=true]
     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.
     * @param       {function}  [callback=null]
     *      An optional callback function to be invoked after the operation has completed.
     * @return      {Promise.<mixitup.State>}
     *      A promise resolving with the current state object.
     */
    remove: function remove() {
      var self = this,
          args = self.parseRemoveArgs(arguments);
      return self.multimix({
        remove: args.command
      }, args.animate, args.callback);
    },

    /**
     * Retrieves the the value of any property or sub-object within the current
     * mixitup configuration, or the whole configuration object.
     *
     * @example
     *
     * .getConfig([stringKey])
     *
     * @example <caption>Example 1: retrieve the entire configuration object</caption>
     *
     * var config = mixer.getConfig(); // Config { ... }
     *
     * @example <caption>Example 2: retrieve a named sub-object of configuration object</caption>
     *
     * var animation = mixer.getConfig('animation'); // ConfigAnimation { ... }
     *
     * @example <caption>Example 3: retrieve a value of configuration object via a dot-notation string key</caption>
     *
     * var effects = mixer.getConfig('animation.effects'); // 'fade scale'
     *
     * @public
     * @instance
     * @since       2.0.0
     * @param       {string}    [stringKey]    A "dot-notation" string key
     * @return      {*}
     */
    getConfig: function getConfig(stringKey) {
      var self = this,
          value = null;

      if (!stringKey) {
        value = self.config;
      } else {
        value = h.getProperty(self.config, stringKey);
      }

      return self.callFilters('valueGetConfig', value, arguments);
    },

    /**
     * Updates the configuration of the mixer, after it has been instantiated.
     *
     * See the Configuration Object documentation for a full list of avilable
     * configuration options.
     *
     * @example
     *
     * .configure(config)
     *
     * @example <caption>Example 1: Updating animation options</caption>
     *
     * mixer.configure({
     *     animation: {
     *         effects: 'fade translateX(-100%)',
     *         duration: 300
     *     }
     * });
     *
     * @example <caption>Example 2: Removing a callback after it has been set</caption>
     *
     * var mixer;
     *
     * function handleMixEndOnce() {
     *     // Do something ..
     *
     *     // Then nullify the callback
     *
     *     mixer.configure({
     *         callbacks: {
     *             onMixEnd: null
     *         }
     *     });
     * };
     *
     * // Instantiate a mixer with a callback defined
     *
     * mixer = mixitup(containerEl, {
     *     callbacks: {
     *         onMixEnd: handleMixEndOnce
     *     }
     * });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {object}    config
     *      An object containing one of more configuration options.
     * @return      {void}
     */
    configure: function configure(config) {
      var self = this;
      self.callActions('beforeConfigure', arguments);
      h.extend(self.config, config, true, true);
      self.callActions('afterConfigure', arguments);
    },

    /**
     * Returns an object containing information about the current state of the
     * mixer. See the State Object documentation for more information.
     *
     * NB: State objects are immutable and should therefore be regenerated
     * after any operation.
     *
     * @example
     *
     * .getState();
     *
     * @example <caption>Example: Retrieving a state object</caption>
     *
     * var state = mixer.getState();
     *
     * console.log(state.totalShow + 'targets are currently shown');
     *
     * @public
     * @instance
     * @since       2.0.0
     * @return      {mixitup.State} An object reflecting the current state of the mixer.
     */
    getState: function getState() {
      var self = this,
          state = null;
      state = new _mixitup.State();
      h.extend(state, self.state);
      h.freeze(state);
      return self.callFilters('stateGetState', state, arguments);
    },

    /**
     * Forces the re-indexing all targets within the container.
     *
     * This should only be used if some other piece of code in your application
     * has manipulated the contents of your container, which should be avoided.
     *
     * If you need to add or remove target elements from the container, use
     * the built-in `.insert()` or `.remove()` methods, and MixItUp will keep
     * itself up to date.
     *
     * @example
     *
     * .forceRefresh()
     *
     * @example <caption>Example: Force refreshing the mixer after external DOM manipulation</caption>
     *
     * console.log(mixer.getState().totalShow); // 3
     *
     * // An element is removed from the container via some external DOM manipulation code:
     *
     * containerEl.removeChild(containerEl.firstElementChild);
     *
     * // The mixer does not know that the number of targets has changed:
     *
     * console.log(mixer.getState().totalShow); // 3
     *
     * mixer.forceRefresh();
     *
     * // After forceRefresh, the mixer is in sync again:
     *
     * console.log(mixer.getState().totalShow); // 2
     *
     * @public
     * @instance
     * @since 2.1.2
     * @return {void}
     */
    forceRefresh: function forceRefresh() {
      var self = this;
      self.indexTargets();
    },

    /**
     * Forces the re-rendering of all targets when using the Dataset API.
     *
     * By default, targets are only re-rendered when `data.dirtyCheck` is
     * enabled, and an item's data has changed when `dataset()` is called.
     *
     * The `forceRender()` method allows for the re-rendering of all targets
     * in response to some arbitrary event, such as the changing of the target
     * render function.
     *
     * Targets are rendered against their existing data.
     *
     * @example
     *
     * .forceRender()
     *
     * @example <caption>Example: Force render targets after changing the target render function</caption>
     *
     * console.log(container.innerHTML); // ... &lt;span class="mix"&gt;Foo&lt;/span&gt; ...
     *
     * mixer.configure({
     *     render: {
     *         target: (item) => `&lt;a href="/${item.slug}/" class="mix"&gt;${item.title}&lt;/a&gt;`
     *     }
     * });
     *
     * mixer.forceRender();
     *
     * console.log(container.innerHTML); // ... &lt;a href="/foo/" class="mix"&gt;Foo&lt;/a&gt; ...
     *
     * @public
     * @instance
     * @since 3.2.1
     * @return {void}
     */
    forceRender: function forceRender() {
      var self = this,
          target = null,
          el = null,
          id = '';

      for (id in self.cache) {
        target = self.cache[id];
        el = target.render(target.data);

        if (el !== target.dom.el) {
          // Update target element reference
          if (target.isInDom) {
            target.unbindEvents();
            self.dom.parent.replaceChild(el, target.dom.el);
          }

          if (!target.isShown) {
            el.style.display = 'none';
          }

          target.dom.el = el;

          if (target.isInDom) {
            target.bindEvents();
          }
        }
      }

      self.state = self.buildState(self.lastOperation);
    },

    /**
     * Removes mixitup functionality from the container, unbinds all control
     * event handlers, and deletes the mixer instance from MixItUp's internal
     * cache.
     *
     * This should be performed whenever a mixer's container is removed from
     * the DOM, such as during a page change in a single page application,
     * or React's `componentWillUnmount()`.
     *
     * @example
     *
     * .destroy([cleanUp])
     *
     * @example <caption>Example: Destroying the mixer before removing its container element</caption>
     *
     * mixer.destroy();
     *
     * containerEl.parentElement.removeChild(containerEl);
     *
     * @public
     * @instance
     * @since   2.0.0
     * @param   {boolean}   [cleanUp=false]
     *     An optional boolean dictating whether or not to clean up any inline `display: none;` styling applied to hidden targets.
     * @return  {void}
     */
    destroy: function destroy(cleanUp) {
      var self = this,
          control = null,
          target = null,
          i = 0;
      self.callActions('beforeDestroy', arguments);

      for (i = 0; control = self.controls[i]; i++) {
        control.removeBinding(self);
      }

      for (i = 0; target = self.targets[i]; i++) {
        if (cleanUp) {
          target.show();
        }

        target.unbindEvents();
      }

      if (self.dom.container.id.match(/^MixItUp/)) {
        self.dom.container.removeAttribute('id');
      }

      delete _mixitup.instances[self.id];
      self.callActions('afterDestroy', arguments);
    }
  });
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.IMoveData = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.posIn = null;
    this.posOut = null;
    this.operation = null;
    this.callback = null;
    this.statusChange = '';
    this.duration = -1;
    this.staggerIndex = -1;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.IMoveData);

  _mixitup.IMoveData.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.IMoveData.prototype.constructor = _mixitup.IMoveData;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.TargetDom = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.el = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.TargetDom);

  _mixitup.TargetDom.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.TargetDom.prototype.constructor = _mixitup.TargetDom;
  /**
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.Target = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.id = '';
    this.sortString = '';
    this.mixer = null;
    this.callback = null;
    this.isShown = false;
    this.isBound = false;
    this.isExcluded = false;
    this.isInDom = false;
    this.handler = null;
    this.operation = null;
    this.data = null;
    this.dom = new _mixitup.TargetDom();
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Target);

  _mixitup.Target.prototype = Object.create(_mixitup.Base.prototype);
  h.extend(_mixitup.Target.prototype, {
    constructor: _mixitup.Target,

    /**
     * Initialises a newly instantiated Target.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {(Element|null)}    el
     * @param   {object}            mixer
     * @param   {object}            [data]
     * @return  {void}
     */
    init: function init(el, mixer, data) {
      var self = this,
          id = '';
      self.callActions('beforeInit', arguments);
      self.mixer = mixer;

      if (!el) {
        // If no element is provided, render it
        el = self.render(data);
      }

      self.cacheDom(el);
      self.bindEvents();

      if (self.dom.el.style.display !== 'none') {
        self.isShown = true;
      }

      if (data && mixer.config.data.uidKey) {
        if (typeof (id = data[mixer.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {
          throw new TypeError(_mixitup.messages.errorDatasetInvalidUidKey({
            uidKey: mixer.config.data.uidKey
          }));
        }

        self.id = id;
        self.data = data;
        mixer.cache[id] = self;
      }

      self.callActions('afterInit', arguments);
    },

    /**
     * Renders the target element using a user-defined renderer function.
     *
     * @private
     * @instance
     * @since   3.1.4
     * @param   {object} data
     * @return  {void}
     */
    render: function render(data) {
      var self = this,
          render = null,
          el = null,
          temp = null,
          output = '';
      self.callActions('beforeRender', arguments);
      render = self.callFilters('renderRender', self.mixer.config.render.target, arguments);

      if (typeof render !== 'function') {
        throw new TypeError(_mixitup.messages.errorDatasetRendererNotSet());
      }

      output = render(data);

      if (output && _typeof(output) === 'object' && h.isElement(output)) {
        el = output;
      } else if (typeof output === 'string') {
        temp = document.createElement('div');
        temp.innerHTML = output;
        el = temp.firstElementChild;
      }

      return self.callFilters('elRender', el, arguments);
    },

    /**
     * Caches references of DOM elements neccessary for the target's functionality.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Element} el
     * @return  {void}
     */
    cacheDom: function cacheDom(el) {
      var self = this;
      self.callActions('beforeCacheDom', arguments);
      self.dom.el = el;
      self.callActions('afterCacheDom', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {string}    attributeName
     * @return  {void}
     */
    getSortString: function getSortString(attributeName) {
      var self = this,
          value = self.dom.el.getAttribute('data-' + attributeName) || '';
      self.callActions('beforeGetSortString', arguments);
      value = isNaN(value * 1) ? value.toLowerCase() : value * 1;
      self.sortString = value;
      self.callActions('afterGetSortString', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @return  {void}
     */
    show: function show() {
      var self = this;
      self.callActions('beforeShow', arguments);

      if (!self.isShown) {
        self.dom.el.style.display = '';
        self.isShown = true;
      }

      self.callActions('afterShow', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @return  {void}
     */
    hide: function hide() {
      var self = this;
      self.callActions('beforeHide', arguments);

      if (self.isShown) {
        self.dom.el.style.display = 'none';
        self.isShown = false;
      }

      self.callActions('afterHide', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {mixitup.IMoveData} moveData
     * @return  {void}
     */
    move: function move(moveData) {
      var self = this;
      self.callActions('beforeMove', arguments);

      if (!self.isExcluded) {
        self.mixer.targetsMoved++;
      }

      self.applyStylesIn(moveData);
      requestAnimationFrame(function () {
        self.applyStylesOut(moveData);
      });
      self.callActions('afterMove', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {object}    posData
     * @param   {number}    multiplier
     * @return  {void}
     */
    applyTween: function applyTween(posData, multiplier) {
      var self = this,
          propertyName = '',
          tweenData = null,
          posIn = posData.posIn,
          currentTransformValues = [],
          currentValues = new _mixitup.StyleData(),
          i = -1;
      self.callActions('beforeApplyTween', arguments);
      currentValues.x = posIn.x;
      currentValues.y = posIn.y;

      if (multiplier === 0) {
        self.hide();
      } else if (!self.isShown) {
        self.show();
      }

      for (i = 0; propertyName = _mixitup.features.TWEENABLE[i]; i++) {
        tweenData = posData.tweenData[propertyName];

        if (propertyName === 'x') {
          if (!tweenData) continue;
          currentValues.x = posIn.x + tweenData * multiplier;
        } else if (propertyName === 'y') {
          if (!tweenData) continue;
          currentValues.y = posIn.y + tweenData * multiplier;
        } else if (tweenData instanceof _mixitup.TransformData) {
          if (!tweenData.value) continue;
          currentValues[propertyName].value = posIn[propertyName].value + tweenData.value * multiplier;
          currentValues[propertyName].unit = tweenData.unit;
          currentTransformValues.push(propertyName + '(' + currentValues[propertyName].value + tweenData.unit + ')');
        } else {
          if (!tweenData) continue;
          currentValues[propertyName] = posIn[propertyName] + tweenData * multiplier;
          self.dom.el.style[propertyName] = currentValues[propertyName];
        }
      }

      if (currentValues.x || currentValues.y) {
        currentTransformValues.unshift('translate(' + currentValues.x + 'px, ' + currentValues.y + 'px)');
      }

      if (currentTransformValues.length) {
        self.dom.el.style[_mixitup.features.transformProp] = currentTransformValues.join(' ');
      }

      self.callActions('afterApplyTween', arguments);
    },

    /**
     * Applies the initial styling to a target element before any transition
     * is applied.
     *
     * @private
     * @instance
     * @param   {mixitup.IMoveData} moveData
     * @return  {void}
     */
    applyStylesIn: function applyStylesIn(moveData) {
      var self = this,
          posIn = moveData.posIn,
          isFading = self.mixer.effectsIn.opacity !== 1,
          transformValues = [];
      self.callActions('beforeApplyStylesIn', arguments);
      transformValues.push('translate(' + posIn.x + 'px, ' + posIn.y + 'px)');

      if (self.mixer.config.animation.animateResizeTargets) {
        if (moveData.statusChange !== 'show') {
          // Don't apply posIn width or height or showing, as will be 0
          self.dom.el.style.width = posIn.width + 'px';
          self.dom.el.style.height = posIn.height + 'px';
        }

        self.dom.el.style.marginRight = posIn.marginRight + 'px';
        self.dom.el.style.marginBottom = posIn.marginBottom + 'px';
      }

      isFading && (self.dom.el.style.opacity = posIn.opacity);

      if (moveData.statusChange === 'show') {
        transformValues = transformValues.concat(self.mixer.transformIn);
      }

      self.dom.el.style[_mixitup.features.transformProp] = transformValues.join(' ');
      self.callActions('afterApplyStylesIn', arguments);
    },

    /**
     * Applies a transition followed by the final styles for the element to
     * transition towards.
     *
     * @private
     * @instance
     * @param   {mixitup.IMoveData} moveData
     * @return  {void}
     */
    applyStylesOut: function applyStylesOut(moveData) {
      var self = this,
          transitionRules = [],
          transformValues = [],
          isResizing = self.mixer.config.animation.animateResizeTargets,
          isFading = typeof self.mixer.effectsIn.opacity !== 'undefined';
      self.callActions('beforeApplyStylesOut', arguments); // Build the transition rules

      transitionRules.push(self.writeTransitionRule(_mixitup.features.transformRule, moveData.staggerIndex));

      if (moveData.statusChange !== 'none') {
        transitionRules.push(self.writeTransitionRule('opacity', moveData.staggerIndex, moveData.duration));
      }

      if (isResizing) {
        transitionRules.push(self.writeTransitionRule('width', moveData.staggerIndex, moveData.duration));
        transitionRules.push(self.writeTransitionRule('height', moveData.staggerIndex, moveData.duration));
        transitionRules.push(self.writeTransitionRule('margin', moveData.staggerIndex, moveData.duration));
      } // If no callback was provided, the element will
      // not transition in any way so tag it as "immovable"


      if (!moveData.callback) {
        self.mixer.targetsImmovable++;

        if (self.mixer.targetsMoved === self.mixer.targetsImmovable) {
          // If the total targets moved is equal to the
          // number of immovable targets, the operation
          // should be considered finished
          self.mixer.cleanUp(moveData.operation);
        }

        return;
      } // If the target will transition in some fasion,
      // assign a callback function


      self.operation = moveData.operation;
      self.callback = moveData.callback; // As long as the target is not excluded, increment
      // the total number of targets bound

      !self.isExcluded && self.mixer.targetsBound++; // Tag the target as bound to differentiate from transitionEnd
      // events that may come from stylesheet driven effects

      self.isBound = true; // Apply the transition

      self.applyTransition(transitionRules); // Apply width, height and margin negation

      if (isResizing && moveData.posOut.width > 0 && moveData.posOut.height > 0) {
        self.dom.el.style.width = moveData.posOut.width + 'px';
        self.dom.el.style.height = moveData.posOut.height + 'px';
        self.dom.el.style.marginRight = moveData.posOut.marginRight + 'px';
        self.dom.el.style.marginBottom = moveData.posOut.marginBottom + 'px';
      }

      if (!self.mixer.config.animation.nudge && moveData.statusChange === 'hide') {
        // If we're not nudging, the translation should be
        // applied before any other transforms to prevent
        // lateral movement
        transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');
      } // Apply fade


      switch (moveData.statusChange) {
        case 'hide':
          isFading && (self.dom.el.style.opacity = self.mixer.effectsOut.opacity);
          transformValues = transformValues.concat(self.mixer.transformOut);
          break;

        case 'show':
          isFading && (self.dom.el.style.opacity = 1);
      }

      if (self.mixer.config.animation.nudge || !self.mixer.config.animation.nudge && moveData.statusChange !== 'hide') {
        // Opposite of above - apply translate after
        // other transform
        transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');
      } // Apply transforms


      self.dom.el.style[_mixitup.features.transformProp] = transformValues.join(' ');
      self.callActions('afterApplyStylesOut', arguments);
    },

    /**
     * Combines the name of a CSS property with the appropriate duration and delay
     * values to created a valid transition rule.
     *
     * @private
     * @instance
     * @since   3.0.0
     * @param   {string}    property
     * @param   {number}    staggerIndex
     * @param   {number}    duration
     * @return  {string}
     */
    writeTransitionRule: function writeTransitionRule(property, staggerIndex, duration) {
      var self = this,
          delay = self.getDelay(staggerIndex),
          rule = '';
      rule = property + ' ' + (duration > 0 ? duration : self.mixer.config.animation.duration) + 'ms ' + delay + 'ms ' + (property === 'opacity' ? 'linear' : self.mixer.config.animation.easing);
      return self.callFilters('ruleWriteTransitionRule', rule, arguments);
    },

    /**
     * Calculates the transition delay for each target element based on its index, if
     * staggering is applied. If defined, A custom `animation.staggerSeqeuence`
     * function can be used to manipulate the order of indices to produce custom
     * stagger effects (e.g. for use in a grid with irregular row lengths).
     *
     * @private
     * @instance
     * @since   2.0.0
     * @param   {number}    index
     * @return  {number}
     */
    getDelay: function getDelay(index) {
      var self = this,
          delay = -1;

      if (typeof self.mixer.config.animation.staggerSequence === 'function') {
        index = self.mixer.config.animation.staggerSequence.call(self, index, self.state);
      }

      delay = !!self.mixer.staggerDuration ? index * self.mixer.staggerDuration : 0;
      return self.callFilters('delayGetDelay', delay, arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {string[]}  rules
     * @return  {void}
     */
    applyTransition: function applyTransition(rules) {
      var self = this,
          transitionString = rules.join(', ');
      self.callActions('beforeApplyTransition', arguments);
      self.dom.el.style[_mixitup.features.transitionProp] = transitionString;
      self.callActions('afterApplyTransition', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Event} e
     * @return  {void}
     */
    handleTransitionEnd: function handleTransitionEnd(e) {
      var self = this,
          propName = e.propertyName,
          canResize = self.mixer.config.animation.animateResizeTargets;
      self.callActions('beforeHandleTransitionEnd', arguments);

      if (self.isBound && e.target.matches(self.mixer.config.selectors.target) && (propName.indexOf('transform') > -1 || propName.indexOf('opacity') > -1 || canResize && propName.indexOf('height') > -1 || canResize && propName.indexOf('width') > -1 || canResize && propName.indexOf('margin') > -1)) {
        self.callback.call(self, self.operation);
        self.isBound = false;
        self.callback = null;
        self.operation = null;
      }

      self.callActions('afterHandleTransitionEnd', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {Event}     e
     * @return  {void}
     */
    eventBus: function eventBus(e) {
      var self = this;
      self.callActions('beforeEventBus', arguments);

      switch (e.type) {
        case 'webkitTransitionEnd':
        case 'transitionend':
          self.handleTransitionEnd(e);
      }

      self.callActions('afterEventBus', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @return  {void}
     */
    unbindEvents: function unbindEvents() {
      var self = this;
      self.callActions('beforeUnbindEvents', arguments);
      h.off(self.dom.el, 'webkitTransitionEnd', self.handler);
      h.off(self.dom.el, 'transitionend', self.handler);
      self.callActions('afterUnbindEvents', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @return  {void}
     */
    bindEvents: function bindEvents() {
      var self = this,
          transitionEndEvent = '';
      self.callActions('beforeBindEvents', arguments);
      transitionEndEvent = _mixitup.features.transitionPrefix === 'webkit' ? 'webkitTransitionEnd' : 'transitionend';

      self.handler = function (e) {
        return self.eventBus(e);
      };

      h.on(self.dom.el, transitionEndEvent, self.handler);
      self.callActions('afterBindEvents', arguments);
    },

    /**
     * @private
     * @instance
     * @since   3.0.0
     * @param   {boolean}   [getBox]
     * @return  {PosData}
     */
    getPosData: function getPosData(getBox) {
      var self = this,
          styles = {},
          rect = null,
          posData = new _mixitup.StyleData();
      self.callActions('beforeGetPosData', arguments);
      posData.x = self.dom.el.offsetLeft;
      posData.y = self.dom.el.offsetTop;

      if (self.mixer.config.animation.animateResizeTargets || getBox) {
        rect = self.dom.el.getBoundingClientRect();
        posData.top = rect.top;
        posData.right = rect.right;
        posData.bottom = rect.bottom;
        posData.left = rect.left;
        posData.width = rect.width;
        posData.height = rect.height;
      }

      if (self.mixer.config.animation.animateResizeTargets) {
        styles = window.getComputedStyle(self.dom.el);
        posData.marginBottom = parseFloat(styles.marginBottom);
        posData.marginRight = parseFloat(styles.marginRight);
      }

      return self.callFilters('posDataGetPosData', posData, arguments);
    },

    /**
     * @private
     * @instance
     * @since       3.0.0
     * @return      {void}
     */
    cleanUp: function cleanUp() {
      var self = this;
      self.callActions('beforeCleanUp', arguments);
      self.dom.el.style[_mixitup.features.transformProp] = '';
      self.dom.el.style[_mixitup.features.transitionProp] = '';
      self.dom.el.style.opacity = '';

      if (self.mixer.config.animation.animateResizeTargets) {
        self.dom.el.style.width = '';
        self.dom.el.style.height = '';
        self.dom.el.style.marginRight = '';
        self.dom.el.style.marginBottom = '';
      }

      self.callActions('afterCleanUp', arguments);
    }
  });
  /**
   * A jQuery-collection-like wrapper around one or more `mixitup.Mixer` instances
   * allowing simultaneous control of said instances similar to the MixItUp 2 API.
   *
   * @example
   * new mixitup.Collection(instances)
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   * @param       {mixitup.Mixer[]}   instances
   */

  _mixitup.Collection = function (instances) {
    var instance = null,
        i = -1;
    this.callActions('beforeConstruct');

    for (i = 0; instance = instances[i]; i++) {
      this[i] = instance;
    }

    this.length = instances.length;
    this.callActions('afterConstruct');
    h.freeze(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Collection);

  _mixitup.Collection.prototype = Object.create(_mixitup.Base.prototype);
  h.extend(_mixitup.Collection.prototype,
  /** @lends mixitup.Collection */
  {
    constructor: _mixitup.Collection,

    /**
     * Calls a method on all instances in the collection by passing the method
     * name as a string followed by any applicable parameters to be curried into
     * to the method.
     *
     * @example
     * .mixitup(methodName[,arg1][,arg2..]);
     *
     * @example
     * var collection = new Collection([mixer1, mixer2]);
     *
     * return collection.mixitup('filter', '.category-a')
     *     .then(function(states) {
     *         state.forEach(function(state) {
     *             console.log(state.activeFilter.selector); // .category-a
     *         });
     *     });
     *
     * @public
     * @instance
     * @since       3.0.0
     * @param       {string}  methodName
     * @return      {Promise<Array<mixitup.State>>}
     */
    mixitup: function mixitup(methodName) {
      var self = this,
          instance = null,
          args = Array.prototype.slice.call(arguments),
          tasks = [],
          i = -1;
      this.callActions('beforeMixitup');
      args.shift();

      for (i = 0; instance = self[i]; i++) {
        tasks.push(instance[methodName].apply(instance, args));
      }

      return self.callFilters('promiseMixitup', h.all(tasks, _mixitup.libraries), arguments);
    }
  });
  /**
   * `mixitup.Operation` objects contain all data neccessary to describe the full
   * lifecycle of any MixItUp operation. They can be used to compute and store an
   * operation for use at a later time (e.g. programmatic tweening).
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.Operation = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.id = '';
    this.args = [];
    this.command = null;
    this.showPosData = [];
    this.toHidePosData = [];
    this.startState = null;
    this.newState = null;
    this.docState = null;
    this.willSort = false;
    this.willChangeLayout = false;
    this.hasEffect = false;
    this.hasFailed = false;
    this.triggerElement = null;
    this.show = [];
    this.hide = [];
    this.matching = [];
    this.toShow = [];
    this.toHide = [];
    this.toMove = [];
    this.toRemove = [];
    this.startOrder = [];
    this.newOrder = [];
    this.startSort = null;
    this.newSort = null;
    this.startFilter = null;
    this.newFilter = null;
    this.startDataset = null;
    this.newDataset = null;
    this.viewportDeltaX = 0;
    this.viewportDeltaY = 0;
    this.startX = 0;
    this.startY = 0;
    this.startHeight = 0;
    this.startWidth = 0;
    this.newX = 0;
    this.newY = 0;
    this.newHeight = 0;
    this.newWidth = 0;
    this.startContainerClassName = '';
    this.startDisplay = '';
    this.newContainerClassName = '';
    this.newDisplay = '';
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Operation);

  _mixitup.Operation.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.Operation.prototype.constructor = _mixitup.Operation;
  /**
   * `mixitup.State` objects expose various pieces of data detailing the state of
   * a MixItUp instance. They are provided at the start and end of any operation via
   * callbacks and events, with the most recent state stored between operations
   * for retrieval at any time via the API.
   *
   * @constructor
   * @namespace
   * @memberof    mixitup
   * @public
   * @since       3.0.0
   */

  _mixitup.State = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /**
     * The ID of the mixer instance.
     *
     * @name        id
     * @memberof    mixitup.State
     * @instance
     * @type        {string}
     * @default     ''
     */

    this.id = '';
    /**
     * The currently active filter command as set by a control click or API call.
     *
     * @name        activeFilter
     * @memberof    mixitup.State
     * @instance
     * @type        {mixitup.CommandFilter}
     * @default     null
     */

    this.activeFilter = null;
    /**
     * The currently active sort command as set by a control click or API call.
     *
     * @name        activeSort
     * @memberof    mixitup.State
     * @instance
     * @type        {mixitup.CommandSort}
     * @default     null
     */

    this.activeSort = null;
    /**
     * The current layout-specific container class name, if applied.
     *
     * @name        activeContainerClassName
     * @memberof    mixitup.State
     * @instance
     * @type        {string}
     * @default     ''
     */

    this.activeContainerClassName = '';
    /**
     * A reference to the container element that the mixer is instantiated on.
     *
     * @name        container
     * @memberof    mixitup.State
     * @instance
     * @type        {Element}
     * @default     null
     */

    this.container = null;
    /**
     * An array of all target elements indexed by the mixer.
     *
     * @name        targets
     * @memberof    mixitup.State
     * @instance
     * @type        {Array.<Element>}
     * @default     []
     */

    this.targets = [];
    /**
     * An array of all target elements not matching the current filter.
     *
     * @name        hide
     * @memberof    mixitup.State
     * @instance
     * @type        {Array.<Element>}
     * @default     []
     */

    this.hide = [];
    /**
     * An array of all target elements matching the current filter and any additional
     * limits applied such as pagination.
     *
     * @name        show
     * @memberof    mixitup.State
     * @instance
     * @type        {Array.<Element>}
     * @default     []
     */

    this.show = [];
    /**
     * An array of all target elements matching the current filter irrespective of
     * any additional limits applied such as pagination.
     *
     * @name        matching
     * @memberof    mixitup.State
     * @instance
     * @type        {Array.<Element>}
     * @default     []
     */

    this.matching = [];
    /**
     * An integer representing the total number of target elements indexed by the
     * mixer. Equivalent to `state.targets.length`.
     *
     * @name        totalTargets
     * @memberof    mixitup.State
     * @instance
     * @type        {number}
     * @default     -1
     */

    this.totalTargets = -1;
    /**
     * An integer representing the total number of target elements matching the
     * current filter and any additional limits applied such as pagination.
     * Equivalent to `state.show.length`.
     *
     * @name        totalShow
     * @memberof    mixitup.State
     * @instance
     * @type        {number}
     * @default     -1
     */

    this.totalShow = -1;
    /**
     * An integer representing the total number of target elements not matching
     * the current filter. Equivalent to `state.hide.length`.
     *
     * @name        totalHide
     * @memberof    mixitup.State
     * @instance
     * @type        {number}
     * @default     -1
     */

    this.totalHide = -1;
    /**
     * An integer representing the total number of target elements matching the
     * current filter irrespective of any other limits applied such as pagination.
     * Equivalent to `state.matching.length`.
     *
     * @name        totalMatching
     * @memberof    mixitup.State
     * @instance
     * @type        {number}
     * @default     -1
     */

    this.totalMatching = -1;
    /**
     * A boolean indicating whether the last operation "failed", i.e. no targets
     * could be found matching the filter.
     *
     * @name        hasFailed
     * @memberof    mixitup.State
     * @instance
     * @type        {boolean}
     * @default     false
     */

    this.hasFailed = false;
    /**
     * The DOM element that was clicked if the last operation was triggered by the
     * clicking of a control and not an API call.
     *
     * @name        triggerElement
     * @memberof    mixitup.State
     * @instance
     * @type        {Element|null}
     * @default     null
     */

    this.triggerElement = null;
    /**
     * The currently active dataset underlying the rendered targets, if the
     * dataset API is in use.
     *
     * @name        activeDataset
     * @memberof    mixitup.State
     * @instance
     * @type        {Array.<object>}
     * @default     null
     */

    this.activeDataset = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.State);

  _mixitup.State.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.State.prototype.constructor = _mixitup.State;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.UserInstruction = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    this.command = {};
    this.animate = false;
    this.callback = null;
    this.callActions('afterConstruct');
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.UserInstruction);

  _mixitup.UserInstruction.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.UserInstruction.prototype.constructor = _mixitup.UserInstruction;
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   */

  _mixitup.Messages = function () {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct');
    /* Errors
    ----------------------------------------------------------------------------- */

    this.ERROR_FACTORY_INVALID_CONTAINER = '[MixItUp] An invalid selector or element reference was passed to the mixitup factory function';
    this.ERROR_FACTORY_CONTAINER_NOT_FOUND = '[MixItUp] The provided selector yielded no container element';
    this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS = '[MixItUp] Invalid value for `animation.effects`';
    this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE = '[MixItUp] Invalid value for `controls.scope`';
    this.ERROR_CONFIG_INVALID_PROPERTY = '[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}';
    this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION = '. Did you mean "${probableMatch}"?';
    this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET = '[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`';
    this.ERROR_DATASET_INVALID_UID_KEY = '[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items';
    this.ERROR_DATASET_DUPLICATE_UID = '[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.';
    this.ERROR_INSERT_INVALID_ARGUMENTS = '[MixItUp] Please provider either an index or a sibling and position to insert, not both';
    this.ERROR_INSERT_PREEXISTING_ELEMENT = '[MixItUp] An element to be inserted already exists in the container';
    this.ERROR_FILTER_INVALID_ARGUMENTS = '[MixItUp] Please provide either a selector or collection `.filter()`, not both';
    this.ERROR_DATASET_NOT_SET = '[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`';
    this.ERROR_DATASET_PRERENDERED_MISMATCH = '[MixItUp] `load.dataset` does not match pre-rendered targets';
    this.ERROR_DATASET_RENDERER_NOT_SET = '[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`';
    this.ERROR_SORT_NON_EXISTENT_ELEMENT = '[MixItUp] An element to be sorted does not already exist in the container';
    /* Warnings
    ----------------------------------------------------------------------------- */

    this.WARNING_FACTORY_PREEXISTING_INSTANCE = '[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored.' + ' If you wish to perform additional methods on this instance, please create a reference.';
    this.WARNING_INSERT_NO_ELEMENTS = '[MixItUp] WARNING: No valid elements were passed to `.insert()`';
    this.WARNING_REMOVE_NO_ELEMENTS = '[MixItUp] WARNING: No valid elements were passed to `.remove()`';
    this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL = '[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the ' + 'queue is full or queuing is disabled.';
    this.WARNING_GET_OPERATION_INSTANCE_BUSY = '[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.';
    this.WARNING_NO_PROMISE_IMPLEMENTATION = '[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install' + ' an ES6 Promise polyfill.';
    this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES = '[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements' + ' which may product unexpected sort output';
    this.callActions('afterConstruct');
    this.compileTemplates();
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Messages);

  _mixitup.Messages.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.Messages.prototype.constructor = _mixitup.Messages;
  /**
   * @return {void}
   */

  _mixitup.Messages.prototype.compileTemplates = function () {
    var errorKey = '';
    var errorMessage = '';

    for (errorKey in this) {
      if (typeof (errorMessage = this[errorKey]) !== 'string') continue;
      this[h.camelCase(errorKey)] = h.template(errorMessage);
    }
  };

  _mixitup.messages = new _mixitup.Messages();
  /**
   * @constructor
   * @memberof    mixitup
   * @private
   * @since       3.0.0
   * @param       {mixitup.Mixer} mixer
   */

  _mixitup.Facade = function Mixer(mixer) {
    _mixitup.Base.call(this);

    this.callActions('beforeConstruct', arguments);
    this.configure = mixer.configure.bind(mixer);
    this.show = mixer.show.bind(mixer);
    this.hide = mixer.hide.bind(mixer);
    this.filter = mixer.filter.bind(mixer);
    this.toggleOn = mixer.toggleOn.bind(mixer);
    this.toggleOff = mixer.toggleOff.bind(mixer);
    this.sort = mixer.sort.bind(mixer);
    this.changeLayout = mixer.changeLayout.bind(mixer);
    this.multimix = mixer.multimix.bind(mixer);
    this.dataset = mixer.dataset.bind(mixer);
    this.tween = mixer.tween.bind(mixer);
    this.insert = mixer.insert.bind(mixer);
    this.insertBefore = mixer.insertBefore.bind(mixer);
    this.insertAfter = mixer.insertAfter.bind(mixer);
    this.prepend = mixer.prepend.bind(mixer);
    this.append = mixer.append.bind(mixer);
    this.remove = mixer.remove.bind(mixer);
    this.destroy = mixer.destroy.bind(mixer);
    this.forceRefresh = mixer.forceRefresh.bind(mixer);
    this.forceRender = mixer.forceRender.bind(mixer);
    this.isMixing = mixer.isMixing.bind(mixer);
    this.getOperation = mixer.getOperation.bind(mixer);
    this.getConfig = mixer.getConfig.bind(mixer);
    this.getState = mixer.getState.bind(mixer);
    this.callActions('afterConstruct', arguments);
    h.freeze(this);
    h.seal(this);
  };

  _mixitup.BaseStatic.call(_mixitup.Facade);

  _mixitup.Facade.prototype = Object.create(_mixitup.Base.prototype);
  _mixitup.Facade.prototype.constructor = _mixitup.Facade;

  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') {
    module.exports = _mixitup;
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return _mixitup;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}

  _mixitup.BaseStatic.call(_mixitup.constructor);

  _mixitup.NAME = 'mixitup';
  _mixitup.CORE_VERSION = '3.3.1';
})(window);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./src/assets/scripts/app.js":
/*!***********************************!*\
  !*** ./src/assets/scripts/app.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/helpers */ "./src/assets/scripts/utils/helpers.js");


var nav = document.getElementById('nav');
var arrowTop = document.getElementById('arrowTop');
var sliderPanel = document.querySelectorAll('.slider__trigger');
var parallax = document.querySelector('.parallax');
var statistics = document.querySelector('.statistics');
var xScrollPosition;
var yScrollPosition;
var counted = false;
var menuItems = document.querySelectorAll('.nav__item');
var menuBtn = document.querySelector('.nav__button');
var sliderBtns = document.querySelectorAll('.slider__trigger');
var sliderImgs = document.querySelectorAll('.slider__img');
document.addEventListener('DOMContentLoaded', function () {
  addDataAttributes('data-name', sliderImgs);
}, false); /// closing mobile menu

menuItems.forEach(function (item) {
  item.addEventListener('click', function (e) {
    console.log(e.currentTarget.parentElement.parentElement.parentElement);
    e.currentTarget.children[0].click();
    e.currentTarget.parentElement.parentElement.classList.remove('open');
    e.currentTarget.parentElement.parentElement.parentElement.children[1].classList.remove('open');
    menuBtn.classList.remove('active');
  });
});

window.onscroll = function () {
  shrinkNav();
  showArrow(); /////// start counting up in service section

  var statsDIVs = document.querySelectorAll('.stats-counter__num');

  if (Object(_utils_helpers__WEBPACK_IMPORTED_MODULE_0__["isElementInViewport"])(statistics) && counted === false) {
    statsDIVs.forEach(function (e) {
      var cat = e.id;
      var time = 3;
      var countTo = completeStats["".concat(cat)];
      countValue(e, countTo, time);
      counted = true;
    });
  }
}; // Smooth scroll


document.querySelectorAll('a[href^="#"]').forEach(function (anchor) {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    document.querySelector(this.getAttribute('href')).scrollIntoView({
      behavior: 'smooth'
    });
  });
});

var shrinkNav = function shrinkNav(width) {
  if (document.body.scrollTop > 80 || document.documentElement.scrollTop > 80) {
    nav.style.backgroundColor = 'rgba(0,0,0,.55)';
    nav.style.padding = '1rem';
    nav.style.position = 'fixed';
    nav.style.height = '80px';
  } else {
    nav.style.backgroundColor = 'transparent';
    nav.style.padding = '3rem 2.5rem';
    nav.style.position = 'absolute';
  }
};

var showArrow = function showArrow() {
  if (document.body.scrollTop > 400 || document.documentElement.scrollTop > 400) {
    arrowTop.style.opacity = '1';
  } else {
    arrowTop.style.opacity = '0';
  }
};
/**
 *
 * @param {string} dataName Gets compiled into data attribute name
 * @param {object} elements HTML objects to add to dataName to
 * @param {string} value Value of the dataName
 */


var addDataAttributes = function addDataAttributes(dataName, elements) {
  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  elements.forEach(function (el) {
    var tmp = value;

    if (value === undefined || value == null) {
      value = getImageName(el.getAttribute('src'));
    }

    el.setAttribute("".concat(dataName), value);
    tmp == null ? value = undefined : value = tmp;
  });
};
/**
 * Extracts image name from a absolute image path
 * @param {string} str Path to the image
 * @returns {string} image name
 */


var getImageName = function getImageName(str) {
  return /([ \w-]+)\./.exec(str)[1];
}; // global - timeout event for slide


var slideInProgress;
sliderBtns.forEach(function (e) {
  e.addEventListener('click', function (event) {
    if (e.classList.contains('active')) {
      return false;
    } else {
      document.querySelector('.slider__trigger.active').classList.remove('active');
      e.classList.add('active');
    }

    var slide = e.id;
    var img = document.querySelectorAll("[data-name='".concat(slide, "']")); // removing active image

    if (document.querySelector('.slider__img.active')) {
      document.querySelector('.slider__img.active').classList.remove('active');
    } // if sliding in progress


    var elems = document.querySelector(".sliding");

    if (elems !== null) {
      elems.classList.remove('sliding');
      clearTimeout(slideInProgress);
    }

    if (!img[0].classList.contains('active') && !img[0].classList.contains('sliding')) {
      img[0].classList.add('sliding'); // Getting animation duration from CSS //

      var currentAnimationDuration = window.getComputedStyle(img[0], null).getPropertyValue("animation-duration"); // in ms

      currentAnimationDuration = parseFloat(currentAnimationDuration.replace('s', '')) * 1000; // setting timeout event

      slideInProgress = setTimeout(function () {
        img[0].classList.remove('sliding');
        img[0].classList.add('active');
      }, currentAnimationDuration);
    }
  });
});
adjustServicesSection(); // Adjust services section

function adjustServicesSection() {
  var rowLeft = document.querySelector('.row').getBoundingClientRect().x;
  var servicesLeft = document.querySelector('.services').getBoundingClientRect().x;
  var mq = window.matchMedia("(max-width: 1200px)");
  sliderPanel.forEach(function (el) {
    if (!mq.matches) {
      el.style.paddingLeft = rowLeft + servicesLeft + 'px';
    }
  });
}

window.addEventListener('resize', function () {
  window.location.reload();
}); // make sub-titles in a slider

var slides = document.querySelectorAll('.mix');
slides.forEach(function (slide) {
  buildDescDiv(slide);
});

function buildDescDiv(div) {
  // list of cats
  var categories = div.classList.value.replace('mix', '').trim().split(' '); // img name

  var imgName = getImageName(div.lastElementChild.getAttribute('src'));
  var container = document.createElement("div");
  var title = document.createElement('h5');
  container.className = 'mix__title';
  title.textContent = imgName.split('-').join(' ');
  container.appendChild(title);
  var categoriesSub = document.createElement('p');
  categoriesSub.className = 'mix__category';

  for (var i = 0; i < categories.length; i++) {
    var categoryHolder = document.createElement('span');
    categoryHolder.textContent = categories[i];
    categoriesSub.appendChild(categoryHolder);
  }

  container.appendChild(categoriesSub);
  div.appendChild(container);
} // Stats counter


var completeStats = {
  favorites: 3891,
  posts24h: 233,
  totalPosts: 643,
  campaigns: 564,
  amazingFeatures: 154
};

function countValue(el, value, time) {
  var interval = value / time / 7;
  var init = 0;
  var counting = setInterval(function () {
    init += interval;

    if (el.id === "posts24h") {
      el.textContent = Math.floor(init) + "K";
    } else {
      el.textContent = Math.floor(init);
    }

    if (init >= value) {
      init = value;
      clearInterval(counting);

      if (el.id === "posts24h") {
        el.textContent = Math.floor(init) + "K";
      } else {
        el.textContent = Math.floor(init);
      }

      return Math.floor(init);
    }
  }, 120);
} // Blog hover function


var readMoreBlog = document.querySelectorAll('.blog__readmore');
readMoreBlog.forEach(function (elem) {
  elem.addEventListener('mouseenter', function (e) {
    var overlay = e.target.parentElement.parentElement.children[0].children[0];
    overlay.classList.add('active');
  });
  elem.addEventListener('mouseout', function (e) {
    var overlay = e.target.parentElement.parentElement.children[0].children[0];
    overlay.classList.remove('active');
  });
}); // hamburger menu

menuBtn.addEventListener('click', function (e) {
  e.currentTarget.classList.toggle('active');
  e.currentTarget.parentNode.children[2].classList.toggle('open');
  e.currentTarget.parentNode.children[1].classList.toggle('open');
});

/***/ }),

/***/ "./src/assets/scripts/components/glide.js":
/*!************************************************!*\
  !*** ./src/assets/scripts/components/glide.js ***!
  \************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _glidejs_glide_dist_glide_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glidejs/glide/dist/glide.min.js */ "./node_modules/@glidejs/glide/dist/glide.min.js");
/* harmony import */ var _glidejs_glide_dist_glide_min_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_glidejs_glide_dist_glide_min_js__WEBPACK_IMPORTED_MODULE_0__);

var glide = new _glidejs_glide_dist_glide_min_js__WEBPACK_IMPORTED_MODULE_0___default.a('.glide', {
  type: 'carousel',
  perView: 1,
  focusAt: 'center',
  autoplay: "2500"
});
glide.mount();

/***/ }),

/***/ "./src/assets/scripts/components/mixitup.js":
/*!**************************************************!*\
  !*** ./src/assets/scripts/components/mixitup.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mixitup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mixitup */ "./node_modules/mixitup/dist/mixitup.js");
/* harmony import */ var mixitup__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mixitup__WEBPACK_IMPORTED_MODULE_0__);

var mixerContainer = document.querySelector('.portfolioMix');
var mixer = mixitup__WEBPACK_IMPORTED_MODULE_0___default()(mixerContainer, {
  selectors: {
    target: '.mix'
  },
  animation: {
    duration: 300
  }
});

/***/ }),

/***/ "./src/assets/scripts/components/scrollReveal.js":
/*!*******************************************************!*\
  !*** ./src/assets/scripts/components/scrollReveal.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Scroll reveeal init
var mq = window.matchMedia("(max-width: 992px)");
var sr = new ScrollReveal();
var scrollAnimations = {
  slideUp: {
    distance: '120%',
    origin: 'bottom',
    opacity: .1,
    duration: 700,
    interval: 50,
    delay: 200
  },
  slideLeft: {
    distance: '120%',
    origin: 'left',
    duration: 750,
    delay: 100,
    mobile: false
  },
  slideTop: {
    distance: '120%',
    origin: 'top',
    duration: 850,
    delay: 300
  },
  slideRight: {
    distance: '120%',
    origin: 'right',
    duration: 250,
    opacity: 0
  }
};

if (!mq.matches) {
  sr.reveal('.stats-counter', scrollAnimations.slideUp);
  sr.reveal('.about-us__img', scrollAnimations.slideLeft);
  sr.reveal('.about-us', scrollAnimations.slideTop);
  sr.reveal('.carousel', scrollAnimations.slideLeft);
  sr.reveal('.case-study__img', scrollAnimations.slideRight);
}

/***/ }),

/***/ "./src/assets/scripts/main.js":
/*!************************************!*\
  !*** ./src/assets/scripts/main.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_scrollReveal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/scrollReveal */ "./src/assets/scripts/components/scrollReveal.js");
/* harmony import */ var _components_scrollReveal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_scrollReveal__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_mixitup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/mixitup */ "./src/assets/scripts/components/mixitup.js");
/* harmony import */ var _components_glide__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/glide */ "./src/assets/scripts/components/glide.js");
/* harmony import */ var _app_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app.js */ "./src/assets/scripts/app.js");





/***/ }),

/***/ "./src/assets/scripts/utils/helpers.js":
/*!*********************************************!*\
  !*** ./src/assets/scripts/utils/helpers.js ***!
  \*********************************************/
/*! exports provided: getDocHeight, isElementInViewport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDocHeight", function() { return getDocHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isElementInViewport", function() { return isElementInViewport; });
var getDocHeight = function getDocHeight() {
  var D = document;
  return Math.max(D.body.scrollHeight, D.documentElement.scrollHeight, D.body.offsetHeight, D.documentElement.offsetHeight, D.body.clientHeight, D.documentElement.clientHeight);
};
var isElementInViewport = function isElementInViewport(el) {
  var rect = el.getBoundingClientRect();
  return rect.bottom > 0 && rect.right > 0 && rect.left < (window.innerWidth || document.documentElement.clientWidth) && rect.top < (window.innerHeight || document.documentElement.clientHeight);
}; //export default getDocHeight;

/***/ }),

/***/ 0:
/*!******************************************!*\
  !*** multi ./src/assets/scripts/main.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! F:\Coding-practice\Lino\src\assets\scripts\main.js */"./src/assets/scripts/main.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,